<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: griddle | Ryan Lanciaux]]></title>
  <link href="http://ryanlanciaux.github.com/blog/categories/griddle/atom.xml" rel="self"/>
  <link href="http://ryanlanciaux.github.com/"/>
  <updated>2016-11-18T01:45:17-05:00</updated>
  <id>http://ryanlanciaux.github.com/</id>
  <author>
    <name><![CDATA[Ryan Lanciaux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test React Components Using Jest (on Windows)]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/08/02/using-jest-for-testing-react-components-on-windows/"/>
    <updated>2014-08-02T12:37:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/08/02/using-jest-for-testing-react-components-on-windows</id>
    <content type="html"><![CDATA[<p>I'm currently going through the process creating unit tests for <a href="http://dynamictyped.github.io/Griddle">Griddle</a> and thought it would be good to document the steps I took to get Jest up and running. I did not find it as simple as typing <code>npm install -g jest-cli</code>, however it was not too bad.</p>

<p>My primary machine is running Windows 8 -- these steps may be a bit different if you're on Mac / Linux.</p>

<ol>
<li><strong>Install Python</strong> - Install version 2.7 of Python and add it to your path or create a <code>PYTHONPATH</code> environment variable.</li>
<li><strong>Install Visual Studio (Express Edition is Fine)</strong> - Thankfully, this step was not required for me as I already use Visual Studio. We will need this for some of modules that are compiled when we are installing Jest. (Express editions available <a href="http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx">here</a> -- get one of the versions that has C++)</li>
<li><strong>Set Visual Studio Version Flags</strong> - this step tripped me up a bit at first. We need to tell node-gyp (something that is used for compiling addons) what version of Visual Studio we want to compile with. You can do this either through an environment variable <code>GYP_MSVS_VERSION</code> or the command line option <code>--msvs_version</code>. My environment variable looks a bit like this <code>GYP_MSVS_VERSION=2013</code> but if you are using Express, I think you have to say <code>GYP_MSVS_VERSION=2013e</code></li>
<li><strong>Install Jest-CLI</strong> - Now you can run the command on the <a href="http://facebook.github.io/jest/docs/getting-started.html#content">Jest docs site</a> <code>npm install jest-cli --save-dev</code></li>
</ol>


<p>At this point you should be ready to run Jest, however, I experienced some further trouble on Windows against React components. In the <a href="http://facebook.github.io/jest/docs/tutorial-react.html#content">react example</a>, the package.json contains <code>"unmockedModulePathPatterns": ["&lt;rootDir&gt;/node_modules/react"]</code> which is basically stating that we don't want to mock React when running our tests. Unfortunately, it seemed like we need to change this path to just <code>"unmockedModulePathPatterns": ["react"]</code> in order for the test to run successfully (again on Windows -- seems fine on other OS). See <a href="https://github.com/facebook/jest/issues/100">this GitHub issue</a> for more on that.</p>

<p>For more reading on installing Jest's requirements see:</p>

<ul>
<li><a href="http://www.steveworkman.com/node-js/2012/installing-jsdom-on-windows/">http://www.steveworkman.com/node-js/2012/installing-jsdom-on-windows/</a></li>
<li><a href="https://github.com/atom/atom/issues/2435">https://github.com/atom/atom/issues/2435</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Griddle: A React.js grid]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/07/08/introducing-griddle-a-react-dot-js-grid/"/>
    <updated>2014-07-08T01:01:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/07/08/introducing-griddle-a-react-dot-js-grid</id>
    <content type="html"><![CDATA[<p>Many of the websites I have worked on have required a grid component. As I had been exploring <a href="http://facebook.github.io/react/">React.js</a> more it was made apparent that I was going to need a grid component for it to be a viable my projects. There are many great solutions for displaying grid data with React but many seem to rely  on writing wrappers for components using jQuery or other libraries. While these solutions work well, I was hoping to render entirely with React. Additionally, I wanted to avoid a dependency on libraries like jQuery / Angular if I could help it.</p>

<p>I decided to try my hand at writing a grid to fit my requirements -- the outcome is <a href="http://dynamictyped.github.io/Griddle/">Griddle - a simple React.js grid</a>.</p>

<h2>What it is</h2>

<p><a href="http://dynamictyped.github.io/Griddle/">Griddle</a> is a configurable grid component for React.js. The main philosophy is that the grid should render quickly, contain a lot of the expected functionality and be simple to use without dictating how the rest of the code is structured. While Griddle is far from perfect I'm pretty happy with the initial outcome.</p>

<h2>Where it's going</h2>

<p>As stated above Griddle is far from finished. There are a lot of things that need to be cleaned up and a good deal of functionality that needs to be added. The high-level road map is as follows:</p>

<ol>
<li><strong>Tests</strong> - The initial version of this grid was mostly a coding session or two followed by some basic clean-up. Griddle should be sustainable and tests are big part of that.</li>
<li><strong>Metadata</strong> - Griddle should allow a more advanced column order, locked columns, column width, etc. Currently with the column order, for example, an initial order is set but hiding and showing the column will display this column at the end of the list.</li>
<li><strong>Additional User-configuration</strong> - The user should be able to drag columns around.</li>
<li><strong>Better sub-grid support</strong> - Currently sub-grids are constrained to have the same columns as the parent and are only one-level deep. Sub-grids should be able to have entirely different columns than the parent and should be able to be nested. Finally, sub-grids should be able to be loaded from the server.</li>
<li><strong>More responsive options</strong> - Columns should have an optional priority. When the grid gets below a certain size, some columns should drop off depending on the priority. Additionally there should be the option to stack certain columns when a grid gets below a specific size.</li>
<li><strong>Streaming Data</strong> - Similar to one result page per request, there should be an option to allow the grid to get the initial page and stream the rest of the data behind the scenes.</li>
</ol>


<h2>Conclusion</h2>

<p>So that is basically <a href="http://dynamictyped.github.io/Griddle/">Griddle</a>. The priority of the road-map items could change but that is the current order. Please <a href="http://dynamictyped.github.io/Griddle/">check it out</a> and submit issues for anything you run into :)</p>
]]></content>
  </entry>
  
</feed>
