<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IoC | Ryan Lanciaux]]></title>
  <link href="http://ryanlanciaux.github.com/blog/categories/ioc/atom.xml" rel="self"/>
  <link href="http://ryanlanciaux.github.com/"/>
  <updated>2013-04-04T23:49:17-04:00</updated>
  <id>http://ryanlanciaux.github.com/</id>
  <author>
    <name><![CDATA[Ryan Lanciaux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Real Ultimate Power Dependency Injection with Ninject]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/03/26/real-ultimate-power-dependency-injection-with-ninject/"/>
    <updated>2008-03-26T23:02:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/03/26/real-ultimate-power-dependency-injection-with-ninject</id>
    <content type="html"><![CDATA[<div style="padding: 10px; float: right">
<img src="http://ryanlanciaux.github.com/files/ninja.jpg" alt="Ninja" />
</div>


<div style="border: 1px solid #656565; background-color: #ededed; width: 350px">
<strong>UPDATE:</strong> <a href="http://kohari.org/" target="_blank">Nate Kohari</a> (the author of <a href="http://ninject.org/" target="_blank">Ninject</a>) posted some excellent information in the comments (enough info that it could probably be a post on its own).
</div>


<br />


<p>Recently
<a href="http://www.hanselman.com/blog/" target="_blank">Scott Hanselman</a> compiled a <a href="http://www.hanselman.com/blog/ListOfNETDependencyInjectionContainersIOC.aspx" target="_blank">list of Dependency Injection frameworks</a> for .NET. I
really didn&#39;t plan on trying anything new but <a href="http://ninject.org/" target="_blank">Ninject</a> really jumped out
at me (honestly, it was more the reference to ninjas than anything).
After seeing a couple examples, I thought I would check it out in a bit
more detail. <br /></p>

<br />


<blockquote>
    Disclaimer: I&#39;ve been playing
    around with Ninject for all of about 3 hours now ... it&#39;s very possible
    there&#39;s a better way to do some of this stuff :) So I would really
    appreciate any feedback.<br />
</blockquote>


<br />


<p><span><strong>On to the code</strong></span><br /></p>

<br />


<p>Okay,
for this very contrived example we&#39;re going to be building car objects
out of just an engine and a drive type (extremely accurate I know). Just like in my StructureMap example, I&#39;m going to start by creating
the interfaces followed by a default class that we&#39;re going to use as
our skeleton car ... the interfaces are pretty basic so no need to
spend too much time on them.<br /></p>

<br />


<div style="background: #1b1b1b none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; font-family: Consolas; font-size: 9pt; color: white; max-width: 400px">
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">interface</span> <span style="color: #2b91af">IDriveType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">DriveType</span>{ <span style="color: #23b4eb">get</span>;}
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">interface</span> <span style="color: #2b91af">IEngine</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">EngineType</span> { <span style="color: #23b4eb">get</span>; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>


<br />


<br />


<p>Both
of the interfaces have only one string property that will be used for
output. A little on the basic side but hey, we&#39;re looking at IoC not an
accurate car construction. Next we&#39;re going to add all our
implementations of the Engine <br /></p>

<br />


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; max-width: 400px">
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">FourCylinder</span> : <span style="color: #2b91af">IEngine</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">EngineType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #80ff00">&quot;4-Cylinder&quot;</span>; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">Rotary</span> : <span style="color: #2b91af">IEngine</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">EngineType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #80ff00">&quot;Rotary&quot;</span>; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">SixCylinder</span> : <span style="color: #2b91af">IEngine</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">EngineType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #80ff00">&quot;6-Cylinder&quot;</span>; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>


<br />


<br />


<p>And the drive type implementations...<br /></p>

<br />


<div style="background: #1b1b1b none repeat scroll 0% 50%; overflow: hidden; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; max-width: 400px">
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">RWD</span> : <span style="color: #2b91af">IDriveType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">DriveType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #80ff00">&quot;Rear Wheel Drive&quot;</span>; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">FourWD</span> : <span style="color: #2b91af">IDriveType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">DriveType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #80ff00">&quot;Four Wheel Drive&quot;</span>; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">FWD</span> : <span style="color: #2b91af">IDriveType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">DriveType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #80ff00">&quot;Front wheel drive&quot;</span>; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>


<br />


<br />


<p>And finally the class we&#39;re going to use as our base car.<br /></p>

<br />


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">BaseAuto</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #2b91af">IDriveType</span> <span style="color: #a5a3a3">_driveType</span>;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #2b91af">IEngine</span> <span style="color: #a5a3a3">_engine</span>;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">DriveType</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">_driveType</span>.<span style="color: #a5a3a3">DriveType</span>; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">Engine</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">_engine</span>.<span style="color: #a5a3a3">EngineType</span>; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">Inject</span>]
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #a5a3a3">BaseAuto</span>(<span style="color: #2b91af">IDriveType</span> <span style="color: #a5a3a3">drive</span>, <span style="color: #2b91af">IEngine</span> <span style="color: #a5a3a3">engine</span>)
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_driveType</span> = <span style="color: #a5a3a3">drive</span>;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_engine</span> = <span style="color: #a5a3a3">engine</span>;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>


<br />


<br />


<p>You&#39;ll
notice the <strong>[Inject]</strong> attribute above our constructor. This is basically
telling Ninject to toss in an implementation of the IDriveType and
IEngine interfaces to this constructor (more on&nbsp; <a href="http://www.martinfowler.com/articles/injection.html">Constructor Injection over here</a>). <br /></p>

<br />


<p>Now we&#39;re on to the
fun stuff. Ninject does not use XML to configure injections. Instead
we&#39;re going to use a class called Module to define all that. As the
<a href="http://ninject.org/users-guide.html" target="_blank">documentation</a> says, this class should implement IModule but thankfully
(at least for the sake of testing), there&#39;s a pre-defined base
implementation called StandardModule that we can extend. <br /></p>

<br />


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">BaseModule</span> : <span style="color: #47b3d1">StandardModule</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">override</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">Load</span>()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">Bind</span>&lt;<span style="color: #2b91af">IEngine</span>&gt;().<span style="color: #a5a3a3">To</span>&lt;<span style="color: #47b3d1">Rotary</span>&gt;();
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">Bind</span>&lt;<span style="color: #2b91af">IDriveType</span>&gt;().<span style="color: #a5a3a3">To</span>&lt;<span style="color: #47b3d1">RWD</span>&gt;();
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>


<br />


<br />


<p>In
the module definition, we&#39;re basically saying when we request an object
from the Kernel (more on that in a sec.) we want the Rotary class in
place of IEngine and the RWD instead of IDriveType. Simple enough, now
lets take a look at the Kernel definition / initial code (I&#39;m using
winforms for the sake of example but you can really go w/ whatever
project type you&#39;d like). A lot of thought went into the naming of the form.<br /></p>

<br />


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">partial</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">Form1</span> : <span style="color: #47b3d1">Form</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #47b3d1">BaseAuto</span> <span style="color: #a5a3a3">_rx8</span>;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #a5a3a3">Form1</span>()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">InitializeComponent</span>();
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af">IKernel</span> <span style="color: #a5a3a3">kernel</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">StandardKernel</span>(<span style="color: #23b4eb">new</span> <span style="color: #47b3d1">BaseModule</span>());
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_rx8</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">BaseAuto</span>(
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">kernel</span>.<span style="color: #a5a3a3">Get</span>&lt;<span style="color: #a5a3a3">Auto</span>.<span style="color: #2b91af">IDriveType</span>&gt;(),
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">kernel</span>.<span style="color: #a5a3a3">Get</span>&lt;<span style="color: #a5a3a3">Auto</span>.<span style="color: #2b91af">IEngine</span>&gt;()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; );
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #47b3d1">MessageBox</span>.<span style="color: #a5a3a3">Show</span>(<span style="color: #80ff00">&quot;RX8: \n Drive Type: &quot;</span> + <span style="color: #a5a3a3">_rx8</span>.<span style="color: #a5a3a3">DriveType</span> + 
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #80ff00">&quot;\n Engine:&quot;</span> + <span style="color: #a5a3a3">_rx8</span>.<span style="color: #a5a3a3">Engine</span>);
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>


<br />


<br />


<p>And when we run it...<br /></p>

<br />


<p><img src="http://ryanlanciaux.github.com/files/rx-8+working.gif" alt="" /><br /></p>

<br />


<p>Just
what we expected! Lets make things a little more interesting ... Say we wanted to add some other cars to our application? We probably
don&#39;t want everything to be a rear-wheel drive rotary (Unless you
really like RX-8&#39;s -- in that case you can <a href="http://www.frickinsweet.com" target="_blank">buy my RX8</a> <em>shameless plug</em>).
Anyways, we&#39;re going to accomplish this by changing up our Module a bit
to bind to a different IEngine / IDriveType implementation depending on
the <a href="http://kohari.org/2008/03/13/context-variables-in-ninject/" target="_blank">context</a>. <br /></p>

<br />


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">BaseModule</span> : <span style="color: #47b3d1">StandardModule</span>
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">override</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">Load</span>()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">Bind</span>&lt;<span style="color: #2b91af">IEngine</span>&gt;().<span style="color: #a5a3a3">To</span>&lt;<span style="color: #47b3d1">Rotary</span>&gt;()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .<span style="color: #a5a3a3">Only</span>(<span style="color: #47b3d1">When</span>.<span style="color: #a5a3a3">Context</span>.<span style="color: #a5a3a3">Variable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>).<span style="color: #a5a3a3">EqualTo</span>(<span style="color: #80ff00">&quot;RX8&quot;</span>));&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">Bind</span>&lt;<span style="color: #2b91af">IDriveType</span>&gt;().<span style="color: #a5a3a3">To</span>&lt;<span style="color: #47b3d1">RWD</span>&gt;()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .<span style="color: #a5a3a3">Only</span>(<span style="color: #47b3d1">When</span>.<span style="color: #a5a3a3">Context</span>.<span style="color: #a5a3a3">Variable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>).<span style="color: #a5a3a3">EqualTo</span>(<span style="color: #80ff00">&quot;RX8&quot;</span>));
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">Bind</span>&lt;<span style="color: #2b91af">IEngine</span>&gt;().<span style="color: #a5a3a3">To</span>&lt;<span style="color: #47b3d1">SixCylinder</span>&gt;()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .<span style="color: #a5a3a3">Only</span>(<span style="color: #47b3d1">When</span>.<span style="color: #a5a3a3">Context</span>.<span style="color: #a5a3a3">Variable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>).<span style="color: #a5a3a3">EqualTo</span>(<span style="color: #80ff00">&quot;Jetta&quot;</span>));
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">Bind</span>&lt;<span style="color: #2b91af">IDriveType</span>&gt;().<span style="color: #a5a3a3">To</span>&lt;<span style="color: #47b3d1">FWD</span>&gt;()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .<span style="color: #a5a3a3">Only</span>(<span style="color: #47b3d1">When</span>.<span style="color: #a5a3a3">Context</span>.<span style="color: #a5a3a3">Variable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>).<span style="color: #a5a3a3">EqualTo</span>(<span style="color: #80ff00">&quot;Jetta&quot;</span>));
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">Bind</span>&lt;<span style="color: #2b91af">IEngine</span>&gt;().<span style="color: #a5a3a3">To</span>&lt;<span style="color: #47b3d1">FourCylinder</span>&gt;()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .<span style="color: #a5a3a3">Only</span>(<span style="color: #47b3d1">When</span>.<span style="color: #a5a3a3">Context</span>.<span style="color: #a5a3a3">Variable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>).<span style="color: #a5a3a3">EqualTo</span>(<span style="color: #80ff00">&quot;WRX&quot;</span>));
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">Bind</span>&lt;<span style="color: #2b91af">IDriveType</span>&gt;().<span style="color: #a5a3a3">To</span>&lt;<span style="color: #47b3d1">FourWD</span>&gt;()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .<span style="color: #a5a3a3">Only</span>(<span style="color: #47b3d1">When</span>.<span style="color: #a5a3a3">Context</span>.<span style="color: #a5a3a3">Variable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>).<span style="color: #a5a3a3">EqualTo</span>(<span style="color: #80ff00">&quot;WRX&quot;</span>)); 
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>


<br />


<br />


<p>Not
too bad right? I mean, just looking at the code we can pretty much tell
what&#39;s going on due to the Fluent Interface goodness. We can perform
more powerful comparisons on our context variable but for now, this
will work. Next we need to set up our context in the core part of our
application <br />
(where we&#39;re instantiating and requesting classes from our Kernel).<br /></p>

<br />


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #a5a3a3">Form1</span>()
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">InitializeComponent</span>();
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af">IKernel</span> <span style="color: #a5a3a3">kernel</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">StandardKernel</span>(<span style="color: #23b4eb">new</span> <span style="color: #47b3d1">BaseModule</span>());
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_rx8</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">BaseAuto</span>(
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">kernel</span>.<span style="color: #a5a3a3">Get</span>&lt;<span style="color: #a5a3a3">Auto</span>.<span style="color: #2b91af">IDriveType</span>&gt;(
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #47b3d1">With</span>.<span style="color: #a5a3a3">Parameters</span>.<span style="color: #a5a3a3">ContextVariable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>, <span style="color: #80ff00">&quot;RX8&quot;</span>)
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ),
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">kernel</span>.<span style="color: #a5a3a3">Get</span>&lt;<span style="color: #a5a3a3">Auto</span>.<span style="color: #2b91af">IEngine</span>&gt;(
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #47b3d1">With</span>.<span style="color: #a5a3a3">Parameters</span>.<span style="color: #a5a3a3">ContextVariable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>, <span style="color: #80ff00">&quot;RX8&quot;</span>)
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; )
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; );
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_jetta</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">BaseAuto</span>(
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">kernel</span>.<span style="color: #a5a3a3">Get</span>&lt;<span style="color: #a5a3a3">Auto</span>.<span style="color: #2b91af">IDriveType</span>&gt;(
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #47b3d1">With</span>.<span style="color: #a5a3a3">Parameters</span>.<span style="color: #a5a3a3">ContextVariable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>, <span style="color: #80ff00">&quot;Jetta&quot;</span>)
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ),
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">kernel</span>.<span style="color: #a5a3a3">Get</span>&lt;<span style="color: #a5a3a3">Auto</span>.<span style="color: #2b91af">IEngine</span>&gt;(
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #47b3d1">With</span>.<span style="color: #a5a3a3">Parameters</span>.<span style="color: #a5a3a3">ContextVariable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>, <span style="color: #80ff00">&quot;Jetta&quot;</span>)
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; )
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; );
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_wrx</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">BaseAuto</span>(
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">kernel</span>.<span style="color: #a5a3a3">Get</span>&lt;<span style="color: #a5a3a3">Auto</span>.<span style="color: #2b91af">IDriveType</span>&gt;(
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #47b3d1">With</span>.<span style="color: #a5a3a3">Parameters</span>.<span style="color: #a5a3a3">ContextVariable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>, <span style="color: #80ff00">&quot;WRX&quot;</span>)
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ),
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">kernel</span>.<span style="color: #a5a3a3">Get</span>&lt;<span style="color: #a5a3a3">Auto</span>.<span style="color: #2b91af">IEngine</span>&gt;(
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #47b3d1">With</span>.<span style="color: #a5a3a3">Parameters</span>.<span style="color: #a5a3a3">ContextVariable</span>(<span style="color: #80ff00">&quot;carType&quot;</span>, <span style="color: #80ff00">&quot;WRX&quot;</span>)
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; )
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; );
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;
</p>
<p style="margin: 0px; padding: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
</div>


<br />


<br />


<p>I&#39;ve added some buttons so we don&#39;t get spammed with message boxes on
form load... if we fire this off and click on the various buttons, we
see we&#39;re getting the expected results!<br /></p>

<br />


<table border="0">
    <tbody>
        <tr>
            <td><img src="http://ryanlanciaux.github.com/files/screen.gif" alt="" /></td>
            <td><img src="http://ryanlanciaux.github.com/files/rx-8+working.gif" alt="" /></td>
        </tr>
        <tr>
            <td><img src="http://ryanlanciaux.github.com/files/jetta.gif" alt="" /></td>
            <td><img src="http://ryanlanciaux.github.com/files/wrx.gif" alt="" /></td>
        </tr>
    </tbody>
</table>


<p>
<br />
All in all, I&#39;m liking Ninject for more than just the name -- I can definitely
see myself using this in small to medium sized apps. Please let me know
what you think...
</p>


<p>
More info on Ninject:
</p>


<ul>
    <li><a href="http://ninject.org/" target="_blank">Project Site</a></li>
    <li><a href="http://groups.google.com/group/ninject" target="_blank">Google Group</a></li>
    <li><a href="http://www.jaltiere.com/?p=23" target="_blank">Jack Altiere on Learning Dependency Injection</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Very Quick and Simple Dependency Injection with StructureMap]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/02/26/very-quick-and-simple-dependency-injection-with-structuremap/"/>
    <updated>2008-02-26T22:51:00-05:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/02/26/very-quick-and-simple-dependency-injection-with-structuremap</id>
    <content type="html"><![CDATA[<p>
There are a lot of resources on the web about <a href="http://www.martinfowler.com/articles/injection.html" target="_blank">dependency injection</a> and using <a href="http://structuremap.sourceforge.net/Default.htm" target="_blank">StructureMap</a>, however, I wanted to write something that was an extremely simple example. This is basically the tip of the iceberg but hopefully it will help someone.&nbsp; 
</p>


<table border="0">
    <tbody>
        <tr>
            <td valign="top">
            We want to make our application very loosely coupled -- to achieve this &#39;<a href="http://en.wikipedia.org/wiki/Loose_coupling" target="_blank">loose coupling</a>&#39; we&#39;re going to have several projects in the solution. What this means if we need to change any part of this application later on (we wouldn&#39;t want to in this case since its a demo and all), we could do so without impacting everything else. Anyways, we&#39;re going to create three class libraries and a WinForms application. 
            </td>
            <td><img src="http://ryanlanciaux.github.com/ryanlanciaux.com/image.axd?picture=SolutionExplorer.gif" alt="" /> <br />
            </td>
        </tr>
    </tbody>
</table>


<p>
Next we want to create our main inteface -- this will be under the DisplayMessage Project: 
</p>


<p>
&nbsp;
</p>


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
<span style="color: #23b4eb">namespace</span> <span style="color: #a5a3a3">DisplayMessage</span>
</p>
<p style="margin: 0px">
{
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">interface</span> <span style="color: #2b91af">IDisplayMessage</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">message</span>();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
}
</p>
</div>


<p>
The interface defines just one method that, when implemented, will return a string stating what class its coming from. Next, we want to create our two implementation classes (one under Implementation1, the other under Implementation2). Please keep in mind I&#39;m not suggesting to have every class in it&#39;s own library -- it&#39;s just for the sake of example :) 
</p>


<p>
Implementation1:
</p>


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">MessageOne</span> : <span style="color: #2b91af">IDisplayMessage</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">message</span>()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">return</span> <span style="color: #80ff00">&quot;This is a message from Implementation1&quot;</span>;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>


<p>
&nbsp;Implementation2:
</p>


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">MessageTwo</span> : <span style="color: #2b91af">IDisplayMessage</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">message</span>()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">return</span> <span style="color: #80ff00">&quot;This is a message from Implementation2&quot;</span>;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>


<p>
Okay that was easy enough, now on to the Forms App.&nbsp; We&#39;re first going to add a reference to StructureMap and the project DisplayMessage and create a file called StructureMap.config -- this config file is going to define all of our assemblies. We want to make sure we edit the properties of this file and set the <em>Copy to Output Directory</em> option to &quot;<em>Copy Always</em>.&quot; StructureMap will use this file at runtime to get our object references. The config file looks like this:&nbsp;
</p>


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
<span style="color: #88d0e8">&lt;?</span><span style="color: lime">xml</span><span style="color: #88d0e8"> </span><span style="color: #cecece">version</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">1.0</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> </span><span style="color: #cecece">encoding</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">utf-8</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> ?&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&lt;</span><span style="color: lime">StructureMap</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &lt;</span><span style="color: lime">Assembly</span><span style="color: #88d0e8"> </span><span style="color: #cecece">Name</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">DisplayMessage</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &lt;</span><span style="color: lime">Assembly</span><span style="color: #88d0e8"> </span><span style="color: #cecece">Name</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">Implementation1</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &lt;</span><span style="color: lime">Assembly</span><span style="color: #88d0e8"> </span><span style="color: #cecece">Name</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">Implementation2</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;</span>
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &lt;</span><span style="color: lime">PluginFamily</span><span style="color: #88d0e8"> </span><span style="color: #cecece">Type</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">DisplayMessage.IDisplayMessage</span><span style="color: fuchsia">&quot;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #cecece">Assembly</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">DisplayMessage</span><span style="color: fuchsia">&quot;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #cecece">DefaultKey</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">MessageOne</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &nbsp; &lt;</span><span style="color: lime">Plugin</span><span style="color: #88d0e8"> </span><span style="color: #cecece">Type</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">Implementation1.MessageOne</span><span style="color: fuchsia">&quot;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #cecece">Assembly</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">Implementation1</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #cecece">ConcreteKey</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">MessageOne</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &nbsp; &lt;</span><span style="color: lime">Plugin</span><span style="color: #88d0e8"> </span><span style="color: #cecece">Type</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">Implementation2.MessageTwo</span><span style="color: fuchsia">&quot;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #cecece">Assembly</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">Implementation2</span><span style="color: fuchsia">&quot;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #cecece">ConcreteKey</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">MessageTwo</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;&nbsp; &nbsp; </span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp; &lt;/</span><span style="color: lime">PluginFamily</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&lt;/</span><span style="color: lime">StructureMap</span><span style="color: #88d0e8">&gt;</span>
</p>
</div>


<p>
Notice we define a PluginFamily for the IDisplayMessage interface and set the default implementation to be MessageOne (the DefaultKey of PluginFamily references the ConcreteKey of the Plugin). Other than that, this should be pretty straight-forward but if you have any confusion, please <a href="http://structuremap.sourceforge.net/Default.htm" target="_blank">check out the StructureMap documentation</a>. Only a couple more things to do before we can run this... 
</p>


<table border="0">
    <tbody>
        <tr>
            <td>
            <img src="http://ryanlanciaux.github.com/ryanlanciaux.com/image.axd?picture=window2.gif" alt="" />
            </td>
            <td valign="top">Ok, we&#39;re going to add 3 buttons to our form -- one for the default IDisplayMessage and one for each implementation.</td>
        </tr>
    </tbody>
</table>


<p>
&nbsp;Now to add the code... 
</p>


<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #d200d5">//Default IDisplayMessage&nbsp;</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">btnDefault_Click</span>(<span style="color: #23b4eb">object</span> <span style="color: #a5a3a3">sender</span>, <span style="color: #47b3d1">EventArgs</span> <span style="color: #a5a3a3">e</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af">IDisplayMessage</span> <span style="color: #a5a3a3">msg</span> = <span style="color: #a5a3a3">StructureMap</span>.<span style="color: #47b3d1">ObjectFactory</span>.<span style="color: #a5a3a3">GetInstance</span>&lt;<span style="color: #2b91af">IDisplayMessage</span>&gt;();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">System</span>.<span style="color: #a5a3a3">Windows</span>.<span style="color: #a5a3a3">Forms</span>.<span style="color: #47b3d1">MessageBox</span>.<span style="color: #a5a3a3">Show</span>(<span style="color: #a5a3a3">msg</span>.<span style="color: #a5a3a3">message</span>());
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #d200d5">//Implementation1</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">btnOne_Click</span>(<span style="color: #23b4eb">object</span> <span style="color: #a5a3a3">sender</span>, <span style="color: #47b3d1">EventArgs</span> <span style="color: #a5a3a3">e</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af">IDisplayMessage</span> <span style="color: #a5a3a3">msg</span> = <span style="color: #a5a3a3">StructureMap</span>.<span style="color: #47b3d1">ObjectFactory</span>.<span style="color: #a5a3a3">GetNamedInstance</span>&lt;<span style="color: #2b91af">IDisplayMessage</span>&gt;(<span style="color: #80ff00">&quot;MessageOne&quot;</span>);
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">System</span>.<span style="color: #a5a3a3">Windows</span>.<span style="color: #a5a3a3">Forms</span>.<span style="color: #47b3d1">MessageBox</span>.<span style="color: #a5a3a3">Show</span>(<span style="color: #a5a3a3">msg</span>.<span style="color: #a5a3a3">message</span>());
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #d200d5">//Implementation2</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">btnTwo_Click</span>(<span style="color: #23b4eb">object</span> <span style="color: #a5a3a3">sender</span>, <span style="color: #47b3d1">EventArgs</span> <span style="color: #a5a3a3">e</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af">IDisplayMessage</span> <span style="color: #a5a3a3">msg</span> = <span style="color: #a5a3a3">StructureMap</span>.<span style="color: #47b3d1">ObjectFactory</span>.<span style="color: #a5a3a3">GetNamedInstance</span>&lt;<span style="color: #2b91af">IDisplayMessage</span>&gt;(<span style="color: #80ff00">&quot;MessageTwo&quot;</span>);
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">System</span>.<span style="color: #a5a3a3">Windows</span>.<span style="color: #a5a3a3">Forms</span>.<span style="color: #47b3d1">MessageBox</span>.<span style="color: #a5a3a3">Show</span>(<span style="color: #a5a3a3">msg</span>.<span style="color: #a5a3a3">message</span>());
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }&nbsp;
</p>
</div>


<p>
Lets parse this up a little bit...
</p>


<ul>
    <li><span style="color: #2b91af"></span>
    <div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
    <p style="margin: 0px">
    <span style="color: #2b91af">IDisplayMessage</span> <span style="color: #a5a3a3">msg</span> = <span style="color: #a5a3a3">StructureMap</span>.<span style="color: #47b3d1">ObjectFactory</span>.<span style="color: #a5a3a3">GetInstance</span>&lt;<span style="color: #2b91af">IDisplayMessage</span>&gt;();
    </p>
    </div>
    This statement gets the default IDisplayMessage object in the StructureMap.config file. Currently, it will get the same object as getting a named instance of &quot;MessageOne&quot;</li>
    <li>
    <div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
    <p style="margin: 0px">
    <span style="color: #2b91af">IDisplayMessage</span> <span style="color: #a5a3a3">msg</span> = <span style="color: #a5a3a3">StructureMap</span>.<span style="color: #47b3d1">ObjectFactory</span>.<span style="color: #a5a3a3">GetNamedInstance</span>&lt;<span style="color: #2b91af">IDisplayMessage</span>&gt;(<span style="color: #80ff00">&quot;MessageOne&quot;</span>);
    </p>
    </div>
    This statement gets the object associated with the ConcreteKey &quot;MessageOne&quot;
    </li>
    <li>
    <div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
    <p style="margin: 0px">
    <span style="color: #2b91af">IDisplayMessage</span> <span style="color: #a5a3a3">msg</span> = <span style="color: #a5a3a3">StructureMap</span>.<span style="color: #47b3d1">ObjectFactory</span>.<span style="color: #a5a3a3">GetNamedInstance</span>&lt;<span style="color: #2b91af">IDisplayMessage</span>&gt;(<span style="color: #80ff00">&quot;MessageTwo&quot;</span>);
    </p>
    </div>
    This statement gets the object associated with the ConcreteKey &quot;MessageTwo&quot;</li>
</ul>


<p>
Instead of simply hitting F5, we will need to build the application -- we want to copy the DLL files from Implementation1 and Implementation2 to the bin directory of the forms app and run the executable there.&nbsp; For testing, however, we can add a reference to both projects (this completely defeats the purpose of dependency injection so be sure to remove the references later on) or adjust the output directory of the implementation class libraries to be the same as the Form application&#39;s bin directory. Running the application shows that everything is working as expected.
</p>


<p>
For more information please check out the following links:
</p>


<ul>
    <li>&nbsp;<a href="http://structuremap.sourceforge.net/Default.htm" target="_blank">StructureMap Homepage (SourceForge)</a></li>
    <li><a href="http://codebetter.com/blogs/jeremy.miller/archive/2005/11/18/134816.aspx" target="_blank">Introduction to using StructureMap for DependencyInjection</a></li>
    <li><a href="http://dotnetslackers.com/articles/designpatterns/IntroducingDependencyInjectionFrameworks.aspx" target="_blank">Introducing Dependency Injection Frameworks</a> by <a href="http://codebetter.com/blogs/karlseguin/default.aspx" target="_blank">Karl Seguin <br />
    </a></li>
</ul>

]]></content>
  </entry>
  
</feed>
