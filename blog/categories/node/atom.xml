<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node | Ryan Lanciaux]]></title>
  <link href="http://ryanlanciaux.github.com/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://ryanlanciaux.github.com/"/>
  <updated>2016-11-18T01:45:17-05:00</updated>
  <id>http://ryanlanciaux.github.com/</id>
  <author>
    <name><![CDATA[Ryan Lanciaux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup Bash on Windows: My environment configuration]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2016/11/17/setup-bash-on-windows-my-environment-configuration/"/>
    <updated>2016-11-17T23:32:00-05:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2016/11/17/setup-bash-on-windows-my-environment-configuration</id>
    <content type="html"><![CDATA[<p>Inspired by some recent conversations on Twitter, I've decided to give Bash on Windows another shot. This post contains the steps I've taken to install and configure Bash on Windows to closely resemble my Linux / Mac settings for JavaScript and node development (with some extra steps I've taken for Ruby, etc at the end).</p>

<h2>1. Enable Bash on Windows</h2>

<p>Bash on Windows requires the Anniversary update of Windows 10. Please make sure you have that before continuing. To determine what version of Windows you are running, open a command prompt window and type <code>winver</code>. If you see Version 1607, you should be good to proceed (thanks Josh Pollard).</p>

<p><img src="http://ryanlanciaux.github.com/files/winver.png" alt="Windows Version dialog" /></p>

<p>Once that's all set go to <code>Settings -&gt; Update &amp; Security -&gt; For Developers</code> and enable <code>Developer mode</code>. Finally, go to <code>Windows Features</code> and enable <code>Windows Subsystem for Linux</code>. Your computer should restart and you should be able to run Bash for Windows at this point.</p>

<p><img src="http://ryanlanciaux.github.com/files/windows_features.png" alt="Windows features dialog" /></p>

<p>See <a href="http://www.hanselman.com/blog/DevelopersCanRunBashShellAndUsermodeUbuntuLinuxBinariesOnWindows10.aspx">Scott Hanselman's blog</a> or <a href="https://blogs.technet.microsoft.com/heyscriptingguy/2016/09/28/part-1-install-bash-on-windows-10-omi-cim-server-and-dsc-for-linux/">Stefan Roth's post on TechNet</a> for more on this.</p>

<h2>2. Update apt-get</h2>

<p>We are going to be installing some things and it would be good to make sure we're up-to-date here. Launch bash by pressing the Windows key and typing <code>bash</code>. From there, <code>apt-get update</code> should obtain the latest package information. If you are running into issues with IPv6 vs IPv4 checkout this post on <a href="http://askubuntu.com/questions/759524/problem-with-ipv6-sudo-apt-get-update-upgrade">Ask Ubuntu</a> or here on <a href="https://bruteforce.gr/make-apt-get-use-ipv4-instead-ipv6.html">BruteForce labs</a>.</p>

<h2>3. Install nvm</h2>

<p>nvm stands for Node version manager and is an essential part of my development environment. Using nvm allows you to switch what version of node you're using on a project by project basis. To install nvm, run <code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</code> (from <a href="https://github.com/creationix/nvm">the nvm documentation</a>) followed by <code>Source .bashrc</code></p>

<h2>4. Install git</h2>

<p>Take the following steps to install git on Bash for Windows and be ready to work with projects on GitHub.</p>

<ol>
<li><code>apt-get install git</code> (see <a href="https://help.github.com/articles/set-up-git/#platform-linux">GitHub's guides for more on this</a>)</li>
<li>Generate <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/">an access token</a> or <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#platform-linux">a SSH key</a> (and associate the key to your GitHub account)</li>
</ol>


<h2>5. Setup bash git prompt</h2>

<p><a href="https://github.com/magicmonty/bash-git-prompt">bash-git-prompt</a> is, as the project describes, "An informative and fancy bash prompt for Git users" -- that is, it shows git information for the current repository when navigating to project folder.</p>

<p>To install bash-git-prompt:</p>

<ol>
<li><code>cd ~</code></li>
<li><code>git clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1</code></li>
<li>Add <code>GIT_PROMPT_ONLY_IN_REPO=1</code> to .bashrc</li>
</ol>


<p><a href="https://github.com/magicmonty/bash-git-prompt">Read through the documentation</a> as there is a bit of configuration and themeing that's possible. That said, I'm running with the default for now.</p>

<h2>6. Make Visual Studio Code use Bash</h2>

<p>It's possible to toggle a terminal inside Visual Studio Code -- by default, this appears to be the standard command prompt. Thankfully, <a href="http://pjdecarlo.com/2016/06/bash-on-windows-as-integrated-terminal-in-visual-studio-code.html">Paul DeCarlo created a blog post</a> explaining that you can add <code>"terminal.integrated.shell.windows": "C:\\Windows\\sysnative\\bash.exe"</code> to your user settings to use Bash as the default instead.</p>

<p>It should look like this if everything is working correctly:</p>

<p><img src="http://ryanlanciaux.github.com/files/git_with_changes.png" alt="Visual Studio code window" /></p>

<h2>Extras</h2>

<h3>Install tmux</h3>

<p>tmux is a terminal multiplexer that lets you run multiple programs in one terminal (it does a lot more than that but <a href="https://tmux.github.io/">read the docs for more info</a>). I frequently use tmux to run tests while running webpack server, <a href="https://getstorybook.io/">React Storybook</a>, or something else along those lines.</p>

<p>You can install tmux by running <code>apt-get install tmux</code>. Once tmux is installed on the system you can press <code>ctrl + b + c</code> to create a new window and <code>ctrl + b + w</code> to list the windows. <a href="https://gist.github.com/MohamedAlaa/2961058">See this tmux cheatsheet for more</a></p>

<h3>Install Ruby and Rails</h3>

<p>I do a bit of Ruby work and highly recommend rbenv for multiple ruby versions. <a href="https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-ubuntu-14-04">Digital Ocean's guide to installing ruby / rbenv</a> is great AND it works on Bash for Windows.</p>

<h3>Setup vim and Vundle</h3>

<p>I use <a href="http://www.vim.org/">Vim</a> quite a lot and <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> for managing vim plugins.</p>

<ol>
<li><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li>
<li>Setup your .vimrc (here's <a href="https://github.com/ryanlanciaux/dotfiles/blob/master/.vimrc">my .vimrc</a> for example)</li>
<li>Run vim and type <code>:PluginInstall</code></li>
</ol>


<h3>Install cmder</h3>

<p><a href="http://cmder.net/">Cmder</a> is a nice console emulator for Windows. You can run bash in cmder by typing <code>bash</code> from the prompt. You may have to type <code>cd ~</code>from there to get back to your standard bash home directory.</p>

<h2>The End</h2>

<p>Please feel free to let me know of any questions or feel free to <a href="https://github.com/ryanlanciaux/ryanlanciaux.github.com">submit a PR or issue</a> on anything that's mistaken here :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Express Applications]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/05/25/debugging-express-applications/"/>
    <updated>2014-05-25T16:18:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/05/25/debugging-express-applications</id>
    <content type="html"><![CDATA[<p>Coming from the .NET world, I've grown accustomed to great debugging tools. My initial Node setup didn't have a very good way to debug an application (outside of using <code>DEBUG=express:* node .bin/www</code>) and I wanted to resolve that. I had heard about <a href="https://github.com/node-inspector/node-inspector">node-inspector</a> in several places and decided to give that a shot.</p>

<p>Node-inspector is a visual interface for the Node debugger that looks like just Chrome Developer Tools for Chrome / Opera. I use the Developer Tools quite frequently for debugging front-end code so it is a natural fit for my work-flow.</p>

<p><img src="http://ryanlanciaux.github.com/files/node-inspector.png" /></p>

<h2>Setup</h2>

<p>The guide on <a href="https://github.com/node-inspector/node-inspector">the github page for node-inspector</a> is pretty good but I wanted to run through how I'm using it on my Express 4 application.</p>

<p>First, like the guides suggest, I ran <code>npm install -g node-inspector</code>. From there, I tried running the application (<code>node --debug ./bin/www</code>) and then running <code>node-debug</code>. Unfortunately, I mixed up node-debug and node-inspector a little bit and the inspector was throwing an <code>EADDRINUSE</code> error. Thankfully, <a href="http://peterlyons.com/">Peter Lyons</a> quickly answered <a href="http://stackoverflow.com/questions/23797931/node-inspector-with-express-4">a question I put on StackOverflow</a> which straightened out the issue I was encountering. Apparently, you either want to use <code>node --debug ___</code> and <code>node-inspector</code> or just <code>node-debug ____</code> -- using <code>node --debug _____.js</code> with the inspector's <code>node-debug</code> option was causing conflicts as both were starting node's debugger.</p>

<p>Starting the application with <code>node --debug ./bin/www</code> followed by <code>node-inspector</code> (in another terminal) worked painlessly. I could open up the inspector website (generally <code>localhost:8080/debug?port=5858</code>) and set breakpoints. When navigating through my node application, the code execution was stopping at the breakpoint and I could debug from there using the standard Chrome Developer tools.</p>

<h2>Forever</h2>

<p>One final thing I wanted to do is get all this working with Forever as it would be nice to be able to make changes to my code with out needing to restart the node server. I have encountered some weirdness with forever and node-inspector but it does seem to work okay. Starting forever generally doesn't fire up the debugger. After some searching, I came across <a href="http://stackoverflow.com/questions/12819268/node-js-debugging-with-node-inspector-and-forever-js">this StackOverflow post</a> that suggests you have to run a custom command to start forever in debug mode <code>forever -w -c 'node --debug' ./bin/www</code>. From there, I could navigate to both the site I was trying to debug and the inspector page and all seemed to work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Less alt+tab with SublimeText]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/05/09/less-alt-plus-tab-with-sublimetext/"/>
    <updated>2013-05-09T20:40:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/05/09/less-alt-plus-tab-with-sublimetext</id>
    <content type="html"><![CDATA[<p><a href="http://ryanlanciaux.github.io/blog/2013/04/13/sublime-text-on-ubuntu/">Back in April</a>, I jokingly lamented not having the ability to run a console from directly within SublimeText -- apparently I did not do quite enough searching. There is a plug-in called <a href="https://github.com/wuub/SublimeREPL">SublimeREPL</a> that lets you run ruby, node and a whole slew of other environments from within SublimeText.</p>

<p><strong>To install SublimeREPL</strong>:</p>

<ol>
<li>Fire up the Command Palette (ctrl+shift+p) and type "Package Control: Install Package"</li>
<li>Search for and install SublimeREPL</li>
<li>Restart SublimeText</li>
</ol>


<p>If you are using rbenv, (I assume something similar applies to rvm as well) you will need to edit your SublimeREPL settings (Preferences -> Package Settings -> SublimeREPL -> Settings - User) so your rbenv ruby is used.</p>

<p><code>
{
  "default_extend_env": { "PATH": "{HOME}/.rbenv/shims:{PATH}" }
}
</code></p>

<p>Finally, SublimeREPL uses <a href="https://github.com/pry/pry">pry</a> to power the ruby REPL. If you don't have the pry gem installed, you will need to install it prior to running ruby console.</p>

<p>Now that everything is setup you can launch a REPL and test code before you  add it to your project, use rake thru shell, etc. One note, I would be careful about running servers -- I was messing around with <a href="http://www.sailsjs.com">one of my favorite new frameworks</a> and realized I could not shut down the server (this occurs with servers and other long running operations). That being said, SublimeREPL is definitely a plug-in I would recommend.</p>
]]></content>
  </entry>
  
</feed>
