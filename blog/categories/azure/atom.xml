<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: azure | Ryan Lanciaux]]></title>
  <link href="http://ryanlanciaux.github.com/blog/categories/azure/atom.xml" rel="self"/>
  <link href="http://ryanlanciaux.github.com/"/>
  <updated>2016-11-18T01:45:17-05:00</updated>
  <id>http://ryanlanciaux.github.com/</id>
  <author>
    <name><![CDATA[Ryan Lanciaux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Azure Active Directory authentication in existing project]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/10/18/azure-active-directory-authentication-in-existing-project/"/>
    <updated>2014-10-18T04:28:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/10/18/azure-active-directory-authentication-in-existing-project</id>
    <content type="html"><![CDATA[<p>Recently, I needed to add Azure Active directory authentication to an existing web project. There was an automated tool for Visual Studio 2012 but there does not seem to be a similar component for 2013. A lot of the advice I found suggested creating a new project and importing a bit of the code / config from the other application -- that's what I did here. What follows is not a how-to but rather a log of the steps I took to use AAD authentication (mostly for <a href="http://xkcd.com/1421/">future reference</a>).</p>

<h3>References</h3>

<p>First off there are some references that were missing in the project. I needed to add</p>

<ol>
<li><strong>System.IdentityModel</strong></li>
<li><strong>System.IdentityModelServices</strong></li>
</ol>


<p>In addition to the system references, the <strong>Microsoft Token Validation Extension</strong> should be installed from NuGet.</p>

<h3>Code</h3>

<ol>
<li>Copy over <strong>DatabaseIssuerNameRegistry.cs</strong> (I added this under utils)</li>
<li><strong>IssuingAuthorityKey.cs</strong> (model\tenant)</li>
<li><strong>Tenant.cs</strong></li>
<li><strong>TenantDbContext.cs</strong></li>
<li><strong>IdentityConfig.cs</strong> (This needs to be in the app_start directory)</li>
</ol>


<h3>Azure</h3>

<p>On your Azure active directory settings you will need to add an application. Click on Applications -> Add -> URL: Localhost:Port (or real URL) and give it the ID of the site you are developing.</p>

<h3>Config</h3>

<p>Copy over the following config sections replacing any reference to ID / URL with the settings that were applied to the Application added in the Active Directory settings.</p>

<ol>
<li><strong>configuration\configSections\system.identityModel</strong></li>
<li><strong>configuration\configSections\system.identityModel.services</strong></li>
<li><strong>configuration\location</strong></li>
<li><strong>configuration.system.identityModel</strong> - The DatabaseIssuerNameRegistry should have the fully qualified name of the DatabaseIssuer class.</li>
<li><strong>configuration\system.web\authentication</strong></li>
<li><strong>configuration\system.web\authorization</strong></li>
<li><strong>configuration.system.identityModel.services</strong></li>
<li><strong>configuration\appSettings</strong>

<ol>
<li><strong>ida:FederationMetadataLocation</strong> - Use your active directory path</li>
<li><strong>ida:Realm</strong></li>
<li><strong>ida:AudienceUri</strong></li>
</ol>
</li>
<li><strong>configuration\system.webServer</strong></li>
</ol>


<p>Again this is not an exhaustive guide but rather a checklist for making sure the correct code/configuration is included in the existing project.</p>
]]></content>
  </entry>
  
</feed>
