<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angular | Ryan Lanciaux]]></title>
  <link href="http://ryanlanciaux.github.com/blog/categories/angular/atom.xml" rel="self"/>
  <link href="http://ryanlanciaux.github.com/"/>
  <updated>2016-11-18T01:45:17-05:00</updated>
  <id>http://ryanlanciaux.github.com/</id>
  <author>
    <name><![CDATA[Ryan Lanciaux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fake popovers for Angular-xeditable]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/10/16/fake-popovers-for-angular-xeditable/"/>
    <updated>2013-10-16T21:58:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/10/16/fake-popovers-for-angular-xeditable</id>
    <content type="html"><![CDATA[<p>I was recently working on a project with <a href="http://www.angularjs.org">AngularJS</a> and <a href="http://vitalets.github.io/x-editable/">xeditable</a> (if you're not familiar, xeditable is an awesome library for inline editing). There is an <a href="http://vitalets.github.io/angular-xeditable/">Angular version of xeditable</a> but the popover editing functionality is not implemented yet (it's in the roadmap). Instead of using the original version of xeditable and implementing custom directives or try to add the popover functionality to the project, I decided to see if I could make the popover using just CSS -- this happened to be more inline with my timeframe.</p>

<p>Take a look at the original (non-angular) popover:</p>

<p><img src="http://ryanlanciaux.github.com/files/original_xeditable.png" /></p>

<p>Starting out, I noticed that clicking on the link of an xeditable element was showing an input element (and buttons) in a form and hiding the link. To mimic the popover, the link and the form should both be visible when the form was activated, however, the form should be positioned a bit higher than the link. Working with a forked version of <a href="http://jsfiddle.net/NfPcH/3/">vitalets' jsfiddle</a> example, I wrapped the initial links in <code>&lt;span class='item-wrapper'&gt;&lt;/span&gt;</code> -- from there, I edited the link and the form's CSS as follows</p>

<p>```css
.item-wrapper a{</p>

<pre><code>/* make the link always show up */
display: inline !important;
</code></pre>

<p>}</p>

<p>.item-wrapper{</p>

<pre><code>/* make absolutely positioned children constrained to this box*/
position: relative;
</code></pre>

<p>}</p>

<p>.item-wrapper form {</p>

<pre><code>background: #FFF;
border: 1px solid #AAA;
border-radius: 5px;
display: inline-block;
left: 50%;

/* half the width */
margin-left: -110px;
padding: 7px;
position: absolute;
top: -55px;
width: 220px;
z-index: 101;
</code></pre>

<p>}
```</p>

<p><img src="http://ryanlanciaux.github.com/files/xeditable_popover_1.png" /></p>

<p>It's a step in the right direction, however, doesn't really look exactly like we want. To get the triangle to show up below the pop-up, I thought it would be good to use the <a href="http://css-tricks.com/snippets/css/css-triangle/">technique for creating a triangle on css-tricks</a> as an :after filter (please <a href="http://css-tricks.com/snippets/css/css-triangle/">check the link</a> for more info on that because how it works is a bit outside the scope of this post).</p>

<p><img src="http://ryanlanciaux.github.com/files/xeditable_popover_2.png" /></p>

<p> This works but it looks funny because the popover has a border but the triangle is just a solid color. Additionally, we cannot just toss a border on the :after filter since we're using the border to create the triangle. What I ended up doing is using a :before filter with a width of 10px and a background color the same as the border color followed by an :after filter 1px narrower and the same background color as the popover.</p>

<p> <img src="http://ryanlanciaux.github.com/files/xeditable_popover_3.png" /></p>

<p>```css
.item-wrapper form:before{</p>

<pre><code>content:"";
width: 0;
height: 0;
border-left: 10px solid transparent;
border-right: 10px solid transparent;
border-top: 10px solid #AAA;
position:absolute;
bottom:-10px;
left:100px;
</code></pre>

<p>}</p>

<p>.item-wrapper form:after{</p>

<pre><code>content:"";
width:0;
height:0;
border-left: 9px solid transparent;
border-right: 9px solid transparent;
border-top: 9px solid #FFF;
position:absolute;
bottom:-9px;
left:101px;
</code></pre>

<p>}
```</p>

<p>There is a <a href="http://jsfiddle.net/EWcUw/4/">jsfiddle of the example available here</a>. A few things to note... I am only using this with the Angular-xeditable dropdowns and text boxes so the other controls may or may not work. Additionally, I added some javascript (not in the examples) to hide any visible popovers when displaying a new one. I was running into some issues displaying multiple (or displaying the same one multiple times).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning AngularJS III: Routes]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/08/17/learning-angularjs-iii-routes/"/>
    <updated>2013-08-17T19:47:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/08/17/learning-angularjs-iii-routes</id>
    <content type="html"><![CDATA[<p>So far we've covered the basics of <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">using AngularJS to interact with RESTful services</a> and <a href="http://ryanlanciaux.github.io/blog/2013/06/19/angularjs-filtering-slash-ordering/">Filtering / Ordering views in AngularJS</a>. Using <a href="http://docs.angularjs.org/tutorial/step_07">AngularJS Routes</a>, we are going to add a bit of structure to this example app.</p>

<p>If you have not already, please take a look at <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">Part 1</a> and <a href="http://ryanlanciaux.github.io/blog/2013/06/19/angularjs-filtering-slash-ordering/">Part 2</a> as we will be working with the app we have started there...</p>

<p>First off, lets open our index.ejs file. As you may notice this file is an unstructured mess. We want to break apart the controllers and templates into their own files so our architecture of our demo app is a bit more clear. When we're done, we will have the following files:</p>

<ul>
<li><strong>app.js</strong> under /assets/js/angular/</li>
<li><strong>controllers.js</strong> under /assets/js/angular/</li>
<li><strong>list.html</strong> under /public/templates/ -- there is <a href="https://github.com/balderdashy/sails/issues/273">a better way to use Angular with Sails</a>, however, for the sake of example this is okay</li>
<li><strong>detail.html</strong> under /public/templates/</li>
<li><strong>edit.html</strong> under /public/templates/</li>
</ul>


<h2>app.js</h2>

<p>App.js is where we're storing our module definition (that we added in <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">Part 1</a>), our factory defintion and our routes. The factory is exactly the same as before except we've added an update endpoint.</p>

<h4>Resource</h4>

<p>```javascript
foodApp.factory('Food', ['$resource', function($resource){</p>

<pre><code>return $resource('/food/:id', {id:'@id'}, { update: {method:'PUT' } } );
</code></pre>

<p>}]);
```</p>

<p>By default, the <a href="http://docs.angularjs.org/api/ngResource.$resource">Angular resource module</a> has get/save/query/remove/delete methods but no update. What's more, we want to make sure we are using a PUT method for storing our modified food items so Sails knows that we're trying to modify an existing record. Thankfully, we can add custom actions (as you may have noticed above) by simply adding a hash after our route parameters object in the resource defintion like so <code>{ update: {method:'PUT' } }</code>. Since this is just a hash, you can add as many definitions as you would like (e.g. <code>{ update: {method: 'PUT' }, somethingelse: {method: 'DELETE'} }</code>).</p>

<h4>Routing</h4>

<p>In <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">Part 1</a> we are showing/hiding a form based on a $scope variable on our controller. While this works, it may be a bit cleaner to use routing and separate our views by their function. Routing in Angular is pretty straight forward -- especially if you have routing experience in other frameworks.</p>

<p>```javascript
foodApp.config(['$routeProvider', function($routeProvider) {
  $routeProvider</p>

<pre><code>.when('/food', {templateUrl: '/templates/list.html', controller: FoodController})
.when('/food/edit/:id', {templateUrl: '/templates/edit.html', controller: FoodController})
.when('/food/create', {templateUrl: '/templates/edit.html', controller: FoodController})
.when('/food/:id', {templateUrl: '/templates/detail.html', controller: FoodController})
.otherwise({redirectTo: '/food'});
</code></pre>

<p>}]);
```</p>

<p>When the URL matches one of the route values, the visitor will be directed to the template and given controller (you will notice that we're using the same controller for all our routes). Additionally, the routes that have :id will have a route parameter of id available in the controller (more on this later). If none of the routes are matched we default to /food. We won't focus too much on the views becuase they are mostly the same as our old index.ejs, however, they are available in <a href="https://gist.github.com/ryanlanciaux/6257478">the gist created for this post</a>.</p>

<h2>controllers.js</h2>

<p>Our controller is mostly the same as before except we're no longer maintaining which page we're showing. The whole controller is available as <a href="https://gist.github.com/ryanlanciaux/6257478">a gist</a> however, some of the more interesting parts are as follows:</p>

<p><code>javascript
if($routeParams.id){
 $scope.currentFood = Food.get({id: $routeParams.id});
} else {
  $scope.currentFood = new Food();
  $scope.food = Food.query();
}
</code>
This is checking for the route parameter that we are setting in our route -- if it's there, we get the individual food item with that ID. When the parameter is not there, we get all the food items to be displayed in a list (and initialize a Food item for creates).</p>

<p>```javascript
$scope.addFood = function(){</p>

<pre><code>  if ($scope.currentFood.id &amp;&amp; $scope.currentFood.id != 0){
    Food.get({id: $scope.currentFood.id}, function(food){
        food.type = $scope.currentFood.type;
        food.name = $scope.currentFood.name;
        food.percentRemaining = $scope.currentFood.percentRemaining;
        food.quantity = $scope.currentFood.quantity;

        food.$update({}, function(){
          $location.path( "/" );
        });
    });
  } else {
    $scope.currentFood.$save();
    $location.path( "/" );
  }
</code></pre>

<p>};
```
In this method we are adding our food item or updating an existing food item. We start by checking the food item's id. If it has an id, we go ahead and get the server version and update the properties with the form values. If it doesn't have an id, we save the food item and redirect to the list view. Food.$save is calling the built in resource action where Food.$update is calling the custom resource action we created above -- both of these actions then interact with the Sails API on the server.</p>

<h2>Wrapping Up</h2>

<p>So there we have it. While this is still an example app -- it's way more organized than the previous iterations. The code files are available in <a href="https://gist.github.com/ryanlanciaux/6257478">this gist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning AngularJS II : Filtering / Ordering]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/06/19/angularjs-filtering-slash-ordering/"/>
    <updated>2013-06-19T20:38:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/06/19/angularjs-filtering-slash-ordering</id>
    <content type="html"><![CDATA[<p>Last time I wrote about some basic AngularJS functionality for interacting with a RESTful API. We're going to continue where with left off with our food inventory app to add some filtering/sorting . <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">Check out the first post</a> if you missed it, as we will be depending heavily on what is covered there.</p>

<h3>Filtering</h3>

<p>Lets say we want to search through our food inventory for something specific like oranges. We first need to open the index.ejs (that we created in <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">Part 1</a>) and add the following right before our table definition.</p>

<p>```html</p>

<div class="filter">
  <label for="filter">filter:</label>
  <input type="text" name="filter" ng-model="filter" />
</div>


<p>```</p>

<p>The div isn't entirely necessary, however, it could be useful for applying styling (it's pretty ugly as it sits). Now that the filter definition is complete, we need to go back to our repeater definition and pipe the results through the filter as so:</p>

<p><code>html
&lt;tr class="row" ng-repeat="f in food | filter:filter"&gt;
</code></p>

<p>In a console in your project directory -- fire off a <code>sails lift</code> command, navigate to http://localhost:1337 in your browser of choice and start typing in the filter input box. You'll notice that all of the model bound columns are available to be filtered (e.g. entering fruit displays only food items that were classified as fruit -- typing in orange shows only any records with orange in the name etc. etc.). Also, you may notice that this is not case sensitive.</p>

<h3>Ordering</h3>

<p>Now lets add the ability to sort the data in our table. If we followed the basic example on the <a href="http://docs-angularjs-org-dev.appspot.com/api/ng.filter:orderBy">AngularJS docs site</a>, we could simply create a sort variable that we would modify in the table headers and reference in the orderBy of our repeater. The value of the sort property should be the names of one of our columns.</p>

<p><code>html
&lt;th&gt;&lt;a ng-click="sort='name'"&gt;Name&lt;/a&gt;&lt;/th&gt;
...
&lt;tr class="row" ng-repeat="f in food | filter:filter | orderBy:sort"&gt;
</code></p>

<p>To handle ascending / descending we could do something like this (however, as we'll see in a minute this may not be an ideal solution):</p>

<p><code>html
&lt;th&gt;&lt;a ng-click="sort='name'; reverse=!reverse"&gt;Name&lt;/a&gt;&lt;/th&gt;
...
&lt;tr class="row" ng-repeat="f in food | filter:filter | orderBy:sort:reverse"&gt;
</code></p>

<p>Unfortunately, the reverse value would be shared across all columns. That means that if I click the 'Name' column and sort it descending and then click the 'Type' column -- we will notice that it is sorting in ascending order. The problem is that the shared reverse variable is never getting reset when sorting by a different column.</p>

<p>To get around this, lets move our sorting functionality to the controller so we're not duplicating a lot of code:</p>

<p>```javascript
$scope.sort = "name";
$scope.reverse = false;</p>

<p>$scope.changeSort = function(value){</p>

<pre><code>if ($scope.sort == value){
  $scope.reverse = !$scope.reverse;
  return;
}

$scope.sort = value;
$scope.reverse = false;
</code></pre>

<p>}
```</p>

<p>We're creating the sort and reverse properties that are referenced in the orderBy of the repeater (<code>orderBy:sort:reverse</code>) as well as a function to manage whether to change the sort column or simply change the value of reverse. If you click the 'Name' column several times, the sort will not change, however, the reverse value will (which wil trigger ascending / descending order).</p>

<p>Next we need to change our table headers so they call this function when clicked. As before, the column's property name will be passed as a parameter to this function:</p>

<p><code>html
&lt;th&gt;&lt;a ng-click="changeSort('name')"&gt;Name&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a ng-click="changeSort('type')"&gt;Type&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a ng-click="changeSort('expiration')"&gt;Expiration&lt;/a&gt;&lt;/th&gt;
</code></p>

<p>At this point fire up the page and see how everything is looking. The sorting / filtering is all working as intended. I have created <a href="https://gist.github.com/ryanlanciaux/5822098">a gist of the newly created index.ejs</a> file that you can <a href="https://gist.github.com/ryanlanciaux/5822098">view here</a>. In the next part of this series we will look at routes and editing our data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note to self: escape LiquidTags with Jekyll raw tag plugin]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/06/05/note-to-self-escape-liquidtags-with-jekyll-raw-tag-plugin/"/>
    <updated>2013-06-05T21:57:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/06/05/note-to-self-escape-liquidtags-with-jekyll-raw-tag-plugin</id>
    <content type="html"><![CDATA[<p>When reviewing <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">my recent AngularJS post</a>, I noticed that none of my template display bindings were showing up. LiquidTags use the same {{  }} style bindings as AngularJS (and was trying to render my Angular expressions as LiquidTags). Luckily, there is a <a href="https://gist.github.com/phaer/1020852">jekyll plugin called 'raw tag'</a> for rendering data that you do not want interpreted as a LiquidTag / etc. Simply place this raw content between {% raw %} and {% endraw %}</p>

<p>For more information <a href="http://stackoverflow.com/questions/3426182/how-to-escape-liquid-template-tags">check out this Stackoverflow Post</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning AngularJS]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/06/04/learning-angularjs/"/>
    <updated>2013-06-04T21:39:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/06/04/learning-angularjs</id>
    <content type="html"><![CDATA[<p>I have recently been playing around with some of the client-side MV_ frameworks. I have avoided Angular for quite some time because I was not a fan of using ng-click (etc.) HTML attributes to fire off js events. The more I've used the framework, however, the less of an issue that has been to me.</p>

<p>As noted in a <a href="http://ryanlanciaux.github.io/blog/2013/05/09/less-alt-plus-tab-with-sublimetext/">previous post</a>, another framework I have been using a bit is <a href="http://www.sailsjs.com">SailsJS</a>. While this post is not about Sails, I am using it as the REST endpoints of the AngularJS application.</p>

<p>First off, sails needs to be installed. Assuming you have <a href="https://github.com/joyent/node/wiki/Installation">node installed</a>, just <code>npm install -g sails</code> From there, create a new sails project from the command line <code>sails new foodinventory</code> and cd into that directory. Once in the directory, create a model <code>sails generate model food</code> and a controller so we can access the model <code>sails generate controller food</code>. Open up api/models/Food.js and edit the file to look like this:</p>

<p>```javascript
/<em>---------------------
  :: Food
  -> model
---------------------</em>/
module.exports = {
  attributes  : {</p>

<pre><code>name: 'STRING',
type: 'STRING',
expiration: 'DATE',
quantity: 'STRING', //for sake of example, ignore that this is a string...
percentRemaining: 'INTEGER'
</code></pre>

<p>  }
};
<code>``
Now go back to the console and type</code>sails lift`. You should be presented with a cool ascii sailboat and a message stating that sails is running on port 1337. Fire up your browser and head to http://localhost:1337 -- just to see the initial sails page. From there, navigate to /food -- this should return an empty array, which is the JSON representation what's currently stored in our food list.</p>

<p>Add a couple of records to the Food list by visiting http://localhost:1337/food/create?name=Spinach&amp;type=Vegetable&amp;expiration=2013-06-20&amp;quantity=16oz&amp;percentRemaining=75 and /food/create with other properties. Now that you have a couple records in, lets start with the Angular stuffs.</p>

<p>  <em>Please note that there are better ways to utilize the sails framework to write single page applications with Angular (see <a href="https://github.com/balderdashy/sails/issues/273">here</a> and <a href="https://github.com/balderdashy/sails/issues/205">here</a>) -- For the sake of example we're setting everything up in very few files.</em></p>

<p>Open up your Layout file which is located in <code>views/layout.ejs</code> and add the following includes before <code>&lt;%- assets.js() %&gt;</code>:</p>

<p><code>html
 &lt;link href="http://ryanlanciaux.github.com//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css" rel="stylesheet"&gt;
 &lt;script src="http//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
 &lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.min.js"&gt;&lt;/script&gt;
 &lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular-resource.min.js"&gt;&lt;/script&gt;
</code></p>

<p>From here we're going to edit the default view. We can keep the same div structure as the sails default view but we're stripping out all the CSS and other content -- we should have something like this:</p>

<p>```html
 <h1 id="header">
   Food Inventory
 </h1>
 <div id="content"></p>

<pre><code>Some Content Goes Here
</code></pre>

<p> </div>
 <div id="footer"></p>

<pre><code>&lt;a target="_blank" href="http://sailsjs.com" class="copyright"&gt;Built with Sails.js&lt;/a&gt;
</code></pre>

<p> </div>
```</p>

<p>Upon refreshing this page, you can see that not much is going on; we should totally do something about that. First, we want to add the ng-app directive to the html tag in layout.ejs (it should now look like <code>&lt;html ng-app="foodApp"</code>). This <a href="http://docs.angularjs.org/tutorial/step_00">bootstraps</a> (not to be confused with <a href="http://www.getbootstrap.com">Bootstrap</a>) our application, stating that the html tag is the Angular root. We could techincally add this directive to any element but the html tag is as good as any for this example.</p>

<p>Next, we're going to flip back to our index view (under /home) and add an Angular factory for our food app:</p>

<p>```javascript</p>

<pre><code>var foodApp = angular.module('foodApp', ['ngResource']);

foodApp.factory('Food', ['$resource', function($resource){
    return $resource('/food/:id', {id:'@id'});
}]);
</code></pre>

<p>```</p>

<p>Using the factory, we can now access Query / Get / Save / Delete functions off our Food model (the REST API under /food). By using the :id, we are stating that we can alternatively pass an id (e.g. /Food/1).</p>

<p>You may notice that we're injecting 'ngResource' into our module -- this is the Angular library (that we've already included in the layout page) that is used to interact with our sails REST API that we created above.</p>

<p>Now that we can access the data, lets add a controller.. The controller is responsible for managing the state of the application. There are plenty of tutorials that deal with <a href="http://docs.angularjs.org/tutorial/step_02">how to create a controller in Angular</a>, so lets just jump right in..</p>

<p>```javascript
function FoodController($scope, Food){
  $scope.food = Food.query();</p>

<p>  $scope.isFormActive = false;</p>

<p>  $scope.toggleForm = function(){</p>

<pre><code>if ($scope.isFormActive){
    $scope.isFormActive = false;
    return;
}

$scope.isFormActive = true;
$scope.editableFood = new Food();
</code></pre>

<p>  };</p>

<p>  $scope.addFood = function(){</p>

<pre><code>    $scope.editableFood.$save();
    $scope.food.push($scope.editableFood);
    $scope.toggleForm();
</code></pre>

<p>  };
};
```</p>

<p>Our controller is just a plain old javascript function that takes $scope (used to sync data between controller and the view) and our Food item as parameters. The very first line in the controller is obtaining a list of all of the Food items (essentially the same as going to /Food and copying the JSON) and storing it in the $scope.food array.</p>

<p>The isFormActive property is used to determine whether or not we want to show the create form. The toggle form action is used to change this active property as well as create a new model object to use with the form.</p>

<p>Finally, the addFood method posts the newly created food item to our API. This editableForm 'pattern' was something I first came across on <a href="http://odetocode.com/blogs/scott/archive/2013/02/21/forms-with-angularjs.aspx">K. Scott Allen's website</a>.</p>

<p>Now lets write some HTML that utilizes this controller... We'll start this process by specifying that the #content area in our layout page corresponds to the FoodController with the ng-controller directive -- Our modified #content tag should look like this: <code>&lt;div id="content" ng-controller="FoodController"&gt;</code>. All of our $scope.___ properties are now available to use in expressions within the #content div.</p>

<p>Next we're going to add a repeater to show the food items.</p>

<p>```html</p>

<pre><code>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr class="row"&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Expiration&lt;/th&gt;
      &lt;th&gt;Quantity&lt;/th&gt;
      &lt;th&gt;Percent Remaining&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr class="row" ng-repeat="f in food"&gt;
        &lt;td&gt;{{f.name}}&lt;/td&gt;
        &lt;td&gt;{{f.type}}&lt;/td&gt;
        &lt;td&gt;{{f.expiration}}&lt;/td&gt;
        &lt;td&gt;{{f.quantity}}&lt;/td&gt;
        &lt;td class="progress"&gt;&lt;div class="bar" style="width: {{f.percentRemaining}}%"&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>

<p>```</p>

<p>The tr element inside the tbody is where we are telling angular to loop through all our food items. We are going to reference the current item as f and display all of its properties. You may notice in the last column that we're using Twitter Bootstrap's progress bar in addition to an Angular expression. The expressions in Angular can be quite powerful and seem to have a bit more functionality than many of the other templating frameworks. Go ahead and refresh your page to see how everything is looking so far.</p>

<p>Next we want to add the ability to add new items from this page</p>

<p>```html
  <button ng-click="toggleForm()" ng-hide="isFormActive">Add One</button>
  <button ng-click="toggleForm()" ng-show="isFormActive">Hide Form</button>
  <form ng-show="isFormActive"></p>

<pre><code>  &lt;hr /&gt;
  &lt;label for="name"&gt;Name:&lt;/label&gt;
  &lt;input name="name" ng-model="editableFood.name" /&gt;
  &lt;br /&gt;

  &lt;label for="type"&gt;Type:&lt;/label&gt;
  &lt;input name="type" ng-model="editableFood.type" /&gt;
  &lt;br /&gt;

  &lt;label for="expiration"&gt;Expiration&lt;/label&gt;
  &lt;input name="expiration" ng-model="editableFood.expiration" /&gt;
  &lt;br /&gt;

  &lt;label for="quantity"&gt;Quantity&lt;/label&gt;
  &lt;input name="quantity" ng-model="editableFood.quantity" /&gt;
  &lt;br /&gt;

  &lt;label for="percentRemaining"&gt;Percent Remaining&lt;/label&gt;
  &lt;input name="percentRemaining" ng-model="editableFood.percentRemaining" /&gt;&lt;br /&gt;

    &lt;div class="span4 text-right"&gt;
      &lt;div class="row"&gt;
        &lt;button ng-click="toggleForm()"&gt;Cancel&lt;/button&gt;
        &lt;button ng-click="addFood()"&gt;Add&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
</code></pre>

<p>  </form>
```</p>

<p>There is a bit more going on with the Angular directives in this snippet of HTML. First, you'll notice that several of our elements have ng-click directives; these directives are calling functions on the controller when the user clicks on element. In addition to the click functions, we are using the ng-show / ng-hide directives to show or hide content based on a given condition. For instance, the button for 'Add One' is only visible when isFormActive = false and the 'Hide Form' button is only visible when isFormActive = true.</p>

<p>We are using the ng-model directive to bind a form element to $scope.editableFood (which is being created in the toggleForm method of the FoodController). Clicking on 'Add' will call the addFood method on the FoodController -- this will post the new record to our /Food/Create and push the value into our $scope.food array. The UI will update automatically because Angular $scope properties are observed by default.</p>

<p>So far, we've created a simple REST API and added / retrieved data from this API with AngularJS. The full contents of the modified files are available <a href="https://gist.github.com/ryanlanciaux/5711426">over here</a>. I plan on writing another part in this series where we will focus on searching / ordering / filtering the displayed data and in-place editing on the food list.</p>
]]></content>
  </entry>
  
</feed>
