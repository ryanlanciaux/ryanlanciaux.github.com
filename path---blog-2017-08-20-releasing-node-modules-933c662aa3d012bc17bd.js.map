{"version":3,"sources":["webpack:///path---blog-2017-08-20-releasing-node-modules-933c662aa3d012bc17bd.js","webpack:///./.cache/json/blog-2017-08-20-releasing-node-modules.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/blog-2017-08-20-releasing-node-modules.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path"],"mappings":"AAAAA,cAAc,qBAERC,gGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,cACAC,MAAA,6BACAC,OAAA,kBAGAC,gBACAC,GAAA,4IACAC,KAAA,shEACAC,aACAL,MAAA,yBACAM,KAAA,qBAIAC,aACAC,KAAA","file":"path---blog-2017-08-20-releasing-node-modules-933c662aa3d012bc17bd.js","sourcesContent":["webpackJsonp([16137957531058831000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/blog-2017-08-20-releasing-node-modules.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"site\": {\n\t\t\t\t\"siteMetadata\": {\n\t\t\t\t\t\"title\": \"Software Development Notes\",\n\t\t\t\t\t\"author\": \"Ryan Lanciaux\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"id\": \"/Users/ryan/projects/blog/ryanlanciaux.github.com/src/pages/2017-08-20-releasing-node-modules/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\"html\": \"<p>When releasing a new version of an open source project, it’s important to make sure a series of things happen in the same order for every release. I’ve attempted to make a “script” I follow for releasing <a href=\\\"http://griddlegriddle.github.io/Griddle\\\">Griddle</a> to npm that helps promote consistent releases and (as much as possible) illuminates any issues before they impact others using the package.</p>\\n<ol>\\n<li>Run all tests and local ”<a href=\\\"http://softwaretestingfundamentals.com/smoke-testing/\\\">smoke-tests</a>”</li>\\n<li>Update the version in package.json</li>\\n<li>Update CHANGELOG.md with any high-level changes</li>\\n<li>Push package.json and CHANGELOG.md to the master branch of the project</li>\\n<li>Release to npm as a tagged, pre-release version. Generally, this would be done by running <code>npm publish --tag next</code> (or whatever you want to call your pre-release version). This lets you test your project as a npm package without making it the version that is installed when running <code>npm install</code> or <code>yarn add</code>. In Griddle, we generally run this through <code>npm run ship-it</code> which essentially runs our build script and then pushes the output as a pre-release package. <a href=\\\"https://blog.greenkeeper.io/one-simple-trick-for-javascript-package-maintainers-to-avoid-breaking-their-user-s-software-and-to-6edf06dc5617\\\">See this blog post</a> for more thoughts on this pre-release strategy.</li>\\n<li>From here, I generally install the new, pre-release version on the <code>griddle-docs</code> project as well as some of my own projects that use the library. I do this to help ensure that there are no known regressions before making this version the <code>@latest</code> tag in npm.</li>\\n<li>If all is successful, it’s time to officially release this version — <code>npm dist-tag griddle-react@1.8.0 latest</code></li>\\n</ol>\\n<p>While following a script doesn’t ensure there will be zero issues, it does help avoid common mistakes or makes things very clear where there is a problem in the process.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Releasing node modules\",\n\t\t\t\t\t\"date\": \"August 20, 2017\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"path\": \"/blog/2017/08/20/releasing-node-modules/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-2017-08-20-releasing-node-modules-933c662aa3d012bc17bd.js","module.exports = {\n\t\"data\": {\n\t\t\"site\": {\n\t\t\t\"siteMetadata\": {\n\t\t\t\t\"title\": \"Software Development Notes\",\n\t\t\t\t\"author\": \"Ryan Lanciaux\"\n\t\t\t}\n\t\t},\n\t\t\"markdownRemark\": {\n\t\t\t\"id\": \"/Users/ryan/projects/blog/ryanlanciaux.github.com/src/pages/2017-08-20-releasing-node-modules/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\"html\": \"<p>When releasing a new version of an open source project, it’s important to make sure a series of things happen in the same order for every release. I’ve attempted to make a “script” I follow for releasing <a href=\\\"http://griddlegriddle.github.io/Griddle\\\">Griddle</a> to npm that helps promote consistent releases and (as much as possible) illuminates any issues before they impact others using the package.</p>\\n<ol>\\n<li>Run all tests and local ”<a href=\\\"http://softwaretestingfundamentals.com/smoke-testing/\\\">smoke-tests</a>”</li>\\n<li>Update the version in package.json</li>\\n<li>Update CHANGELOG.md with any high-level changes</li>\\n<li>Push package.json and CHANGELOG.md to the master branch of the project</li>\\n<li>Release to npm as a tagged, pre-release version. Generally, this would be done by running <code>npm publish --tag next</code> (or whatever you want to call your pre-release version). This lets you test your project as a npm package without making it the version that is installed when running <code>npm install</code> or <code>yarn add</code>. In Griddle, we generally run this through <code>npm run ship-it</code> which essentially runs our build script and then pushes the output as a pre-release package. <a href=\\\"https://blog.greenkeeper.io/one-simple-trick-for-javascript-package-maintainers-to-avoid-breaking-their-user-s-software-and-to-6edf06dc5617\\\">See this blog post</a> for more thoughts on this pre-release strategy.</li>\\n<li>From here, I generally install the new, pre-release version on the <code>griddle-docs</code> project as well as some of my own projects that use the library. I do this to help ensure that there are no known regressions before making this version the <code>@latest</code> tag in npm.</li>\\n<li>If all is successful, it’s time to officially release this version — <code>npm dist-tag griddle-react@1.8.0 latest</code></li>\\n</ol>\\n<p>While following a script doesn’t ensure there will be zero issues, it does help avoid common mistakes or makes things very clear where there is a problem in the process.</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Releasing node modules\",\n\t\t\t\t\"date\": \"August 20, 2017\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"path\": \"/blog/2017/08/20/releasing-node-modules/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-2017-08-20-releasing-node-modules.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/blog-2017-08-20-releasing-node-modules.json\n// module chunks = 16137957531058831000"],"sourceRoot":""}