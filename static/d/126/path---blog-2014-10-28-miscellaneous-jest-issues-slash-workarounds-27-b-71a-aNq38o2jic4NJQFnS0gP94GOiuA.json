{"data":{"site":{"siteMetadata":{"title":"Ryan Lanciaux","author":"Ryan Lanciaux"}},"markdownRemark":{"id":"522289b3-a05a-5a31-9a7b-4f823dd1fb24","excerpt":"I’ve been using Jest a bit lately and wanted to document some issues I’ve run into for future reference.  Debugging Jest Tests Recently I had a test that was…","html":"<p>I’ve been using Jest a bit lately and wanted to document some issues I’ve run into for future reference. </p>\n<h2>Debugging Jest Tests</h2>\n<p>Recently I had a test that was failing and from looking at the stack trace it wasn’t really clear why. I followed some advice I had seen about running jest in-band and then <a href=\"http://ryanlanciaux.github.io/blog/2014/05/25/debugging-express-applications/\">running node-inspector</a>. Every time I tried to run node-inspector, however, it failed. Similar to the issue I encountered in <a href=\"http://ryanlanciaux.github.io/blog/2014/10/28/react-plus-jest-testing-on-windows-ii/\">my previous post</a>, it appears that there is a <a href=\"https://github.com/facebook/jest/pull/153\">forthcoming fix</a>. </p>\n<p>Until the fix makes it’s way into the release version, following the steps in <a href=\"http://stackoverflow.com/questions/25142173/debugging-jest-test-cases-using-node-inspector/26415442#26415442\">this stackoverflow post</a> should allow test debugging. Like the solution author, I’m not super thrilled about modifying the jest.js file outright but it’s nice to be able to debug the tests.</p>\n<h2>Mocking Third-Party Libraries (that aren’t CommonJS modules)</h2>\n<p>Another issue I’ve encountered is testing components that wrap third-party libraries that are not CommonJS modules. I tried a couple different hacks to try to shim the library in question into something that would load as a CommonJS module but ultimately was unsuccessful in the time I wanted to spend on that.</p>\n<p>Thankfully, <a href=\"https://groups.google.com/forum/#!topic/jestjs/EJGZcNtbW78\">a post in the React Google Group</a> led me to use <a href=\"http://facebook.github.io/jest/docs/manual-mocks.html\">Manual mocks</a> as a way to work around these third-party libraries.  </p>\n<p>Creating a manual mock is pretty simple. Just create a new folder called <code class=\"language-text\">__mocks__</code> at the same level as the <code class=\"language-text\">__tests__</code> directory and create a CommonJS module with the same name/properties as the third-party module that is being mocked. Adding <code class=\"language-text\">var someModule = require(&#39;moduleName&#39;)</code> will cause <code class=\"language-text\">someModule</code> to get replaced with the mock when running through jest. Finally, set the third-party library as an <a href=\"http://webpack.github.io/docs/library-and-externals.html\">external module in webpack.config.js</a> and everything should be good-to-go for both the test and the “compiled” version of the code. </p>","frontmatter":{"title":"Miscellaneous Jest Issues/Workarounds","date":"October 28, 2014","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog//2014-10-28-miscellaneous-jest-issues-slash-workarounds/","previous":{"fields":{"slug":"/blog//2014-10-28-react-plus-jest-testing-on-windows-ii/"},"frontmatter":{"title":"React + Jest Testing on Windows II"}},"next":{"fields":{"slug":"/blog//2014-11-17-miscellaneous-jest-issues-slash-workarouds-ii/"},"frontmatter":{"title":"Miscellaneous Jest Issues/Workarouds II"}}}}