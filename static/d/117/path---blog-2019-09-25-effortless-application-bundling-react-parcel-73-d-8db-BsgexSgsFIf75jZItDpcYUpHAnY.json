{"data":{"site":{"siteMetadata":{"title":"Ryan Lanciaux","author":"Ryan Lanciaux"}},"markdownRemark":{"id":"e584ea10-1e71-5b5a-bff7-cae9279cbc69","excerpt":"Bundle Web Applications effortlessly Bundlers are used to take our various source files (JavaScript, CSS, Sass, etc). and prepare them for use in the browser…","html":"<p>\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\"\n          >\n            <div><iframe src=\"https://www.youtube.com/embed/59EFVPIxgDk\" style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe></div>\n          </div>\n          </p>\n<h2>Bundle Web Applications effortlessly</h2>\n<p>Bundlers are used to take our various source files (JavaScript, CSS, Sass, etc). and prepare them for use in the browser. This article assumes that you’re already sold on using a bundler for your JavaScript applications. For more information on bundlers and how they work, <a href=\"https://medium.com/@gimenete/how-javascript-bundlers-work-1fc0d0caf2da\">check out this post by Alberto Gimeno\n</a></p>\n<p>There are many great tools we can use to bundle our applications like <a href=\"https://webpack.js.org/\">webpack</a>, <a href=\"https://rollupjs.org/guide/en/\">rollup</a>, and others. Today, however, I want to focus on Parcel.</p>\n<h2>Getting started</h2>\n<p>While there is very little overhead with Parcel, there are two steps we need to take (<a href=\"https://parceljs.org\">as noted in the Parcel documentation</a>).</p>\n<p>First, we must install parcel as a global dependency: <code class=\"language-text\">npm install -g parcel-bundler</code> OR <code class=\"language-text\">yarn global add parcel-bundler</code></p>\n<p>From there, we need to create a project folder and initialize the project (with a package.json file): <code class=\"language-text\">npm init -y</code> OR <code class=\"language-text\">yarn init -y</code> (remove the <code class=\"language-text\">-y</code> flag if you’d rather walk through the initialization wizard).</p>\n<h2>A little code</h2>\n<p>At this point, we should be good to start writing some code. We’ll start by writing a “Hello world” type React component. In the video, I called this SayHello.js and created it in the root of the project folder. In a less contrived project, we might want a little bit more organization (e.g. we could place the JavaScript files under <code class=\"language-text\">/src/</code>).</p>\n<p><code class=\"language-text\">SayHello.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we’ll create an index.js file. We’ll treat this file as the location where we will connect our React component with our DOM elements. We haven’t created the HTML file yet but let’s assume that we will eventually have an element with an id of “main” and we’d like to render our component into this element.</p>\n<p><code class=\"language-text\">index.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span>\n<span class=\"token keyword\">import</span> SayHello <span class=\"token keyword\">from</span> <span class=\"token string\">\"./SayHello\"</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>SayHello name<span class=\"token operator\">=</span><span class=\"token string\">\"everyone\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally, we’ll create our HTML file that will serve as the entry point of the application. Please note: we’re using some contrived markup in this example. Ideally, there would be more in our HTML file (like doctype, title, etc) but for the sake of clarity, we’ll keep it pretty light.</p>\n<p><code class=\"language-text\">index.html</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;main&quot;&gt;&lt;/div&gt;\n    &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<h2>Running the application</h2>\n<p>Now we can jump back to our command line and type <code class=\"language-text\">parcel index.html</code> from the project directory and we should be presented with something like the following indication that our project is now running.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">➜  testParcel parcel index.html\nServer running at http://localhost:1234\n⠼ Packaging\n✨  Built in 1.52s.</code></pre></div>\n<p>Navigate to localhost:1234 in the browser, and we should see our running application.</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/ouo112tx6f26thc9ve0r.png\" alt=\"The running application\"></p>\n<p>Please <a href=\"https://parceljs.org/\">check out the Parcel documentation for more information</a>.</p>","frontmatter":{"title":"Effortless Application bundling: React + Parcel in under 2 minutes","date":"September 25, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/09/25/effortless-application-bundling-react-parcel/","previous":{"fields":{"slug":"/blog/2019/09/20/the-magic-of-a-mise-en-place-mindset-for-frontend-development/"},"frontmatter":{"title":"Better frontend development with inspiration from the culinary world"}},"next":null}}