{"data":{"site":{"siteMetadata":{"title":"Ryan Lanciaux","author":"Ryan Lanciaux"}},"markdownRemark":{"id":"12fdc998-59d5-5749-9d34-483d8d64008b","excerpt":"Storybook is awesome for building components I frequently use  Storybook  and  styled components  /  Emotion  when building component libraries. The ability to…","html":"<h2>Storybook is awesome for building components</h2>\n<p>I frequently use <a href=\"https://storybook.js.org/\">Storybook</a> and <a href=\"https://www.styled-components.com/\">styled components</a> / <a href=\"https://emotion.sh/docs/introduction\">Emotion</a> when building component libraries. The ability to apply a consistent theme to all components is very powerful but it requires wrapping your components in a <a href=\"https://www.styled-components.com/docs/advanced\">ThemeProvider</a>.</p>\n<p>Thankfully, there is a straight-forward way to apply a consistent theme object to all of our components in Storybook by using a <a href=\"https://storybook.js.org/docs/basics/writing-stories/#using-decorators\">Storybook Decorator</a>.</p>\n<h2>Create a theme decorator</h2>\n<p>We will start by creating a new decorator. In my current projects, this decorator lives in the <code class=\"language-text\">.storybook</code> folder.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// themeDecorator.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ThemeProvider<span class=\"token punctuation\">,</span> theme <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./pathToThemeProvider\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ThemeDecorator</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">storyFn</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ThemeProvider theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token function\">storyFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeProvider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemeDecorator</code></pre></div>\n<p>Here we include our custom theme provider and define a component that receives a <code class=\"language-text\">storyFn</code> as a prop. This <code class=\"language-text\">storyFn</code> is where the Storybook content will be rendered. We wrap the Storybook content in our provider and export our decorator.</p>\n<p>Next, in our project’s <code class=\"language-text\">.storybook/config.js</code>, we need to specify that Storybook should use this decorator for all stories.</p>\n<h2>Use the theme decorator in Storybook config</h2>\n<p>We’ll start by importing our newly created decorator and make sure that we’re using the <code class=\"language-text\">addDecorator</code> method from Storybook.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configure<span class=\"token punctuation\">,</span> addDecorator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@storybook/react\"</span>\n<span class=\"token keyword\">import</span> themeDecorator <span class=\"token keyword\">from</span> <span class=\"token string\">\"./themeDecorator\"</span></code></pre></div>\n<p>Next, we’ll want to call the following to apply our decorator.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">addDecorator(themeDecorator);</code></pre></div>\n<p>Storybook should now be wrapping all stories with a custom decorator. While this article is specifically about CSS-in-JS themes, this strategy works with other types Providers / Wrapper components as well (like <a href=\"https://react-redux.js.org/api/provider\">Redux</a>).</p>","frontmatter":{"title":"Use a Provider component in Storybook","date":"August 20, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/08/20/use-provider-in-storybook/","previous":{"fields":{"slug":"/blog/2019/08/19/ignoring-files-in-git/"},"frontmatter":{"title":"Ignoring files in git"}},"next":null}}