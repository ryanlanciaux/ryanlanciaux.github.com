{"data":{"site":{"siteMetadata":{"title":"Ryan Lanciaux","author":"Ryan Lanciaux"}},"markdownRemark":{"id":"d7a5e3b8-46cd-5e1f-834d-001db0ac74d6","excerpt":"In this article, we’re going to take a quick look at the new, Optional Chaining operator in JavaScript. This language feature is valid JavaScript as of ES 202…","html":"\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\"\n          >\n            <iframe src=\"https://www.youtube.com/embed/u90I9BuOcmE\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe>\n          </div>\n          \n<p>In this article, we’re going to take a quick look at the new, Optional Chaining operator in JavaScript. This language feature is valid JavaScript as of ES 2020 (the official definition of the language).</p>\n<p>To take a look at why I think this feature is compelling lets assume we have an object that represents a menu for a conference meal plan. Each object represents a different day for the conference and each day can have a <code class=\"language-text\">breakfast</code>, <code class=\"language-text\">lunch</code>, and <code class=\"language-text\">dinner</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const monday = {\n  menuItems: {\n    breakfast: {\n      items: [&#39;Eggs&#39;, &#39;Oatmeal&#39;, &#39;Cereal&#39;]\n    },\n    lunch: {\n      items: [&#39;Sandwich&#39;]\n    },\n    dinner: {\n      items: [&#39;Cheeseburger&#39;, &#39;Salads&#39;, &#39;Tempeh Sandwich&#39;]\n    }\n  }\n};\n\nconst tuesday = {\n  menuItems: {\n    breakfast: {\n      items: [&#39;Cereal&#39;, &#39;Bagel&#39;]\n    },\n    dinner: {\n      items: [&#39;Tacos&#39;]\n    }\n  }\n};</code></pre></div>\n<p>For our example, we’d like to <code class=\"language-text\">console.log</code> the first element of the lunch object. We’ll display “No lunch on this day” for any day where lunch is not specified (and therefore not provided). We’ll start off with the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function logLunch(day) {\n  const lunchItem = day.menuItems.lunch.items[0];\n\n  console.log(lunchItem || &quot;No lunch on this day&quot;);\n}\n\n\nlogLunch(monday);\nlogLunch(tuesday);</code></pre></div>\n<p>This works well for Monday, but fails for the Tuesday object since it only specifies a <code class=\"language-text\">breakfast</code> and <code class=\"language-text\">dinner.</code> Typically we could solve that by ensuring our properties exist before interacting with them. In this case, our expression could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const lunchItem = day &amp;&amp; day.menuItems &amp;&amp; day.menuItems.lunch &amp;&amp; day.menuItems.lunch.items &amp;&amp; day.menuItems.lunch.items[0]</code></pre></div>\n<p>That is pretty annoying to guard each statement in an expression that has a much simpler intent.</p>\n<h2>Optional Chaining</h2>\n<p>Thankfully, we can rewrite this line with Optional Chaining to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const lunchItem = day?.menuItems?.lunch?.items[0];</code></pre></div>\n<p>We’re using the <code class=\"language-text\">?.</code> instead of a <code class=\"language-text\">.</code> between properties. This is the <code class=\"language-text\">optional chaining</code> operator. This entire expression will be evaluated as undefined if any of the properties are null or undefined. Instead of checking these properties, we can express the desired intent much more cleanly with this new operator.</p>\n<p><a href=\"https://codepen.io/ryanlanciaux/pen/KKwLBYp?editors=0012\">Check out the example for this article on Codepen</a>.</p>\n<p>I’d love to know of any thoughts you have. You can <a href=\"https://twitter.com/ryanlanciaux\">find me on Twitter here</a>!</p>","frontmatter":{"title":"Optional Chaining in JavaScript","date":"January 31, 2020","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2020/01/31/optional-chaining-in-javascript/","previous":{"fields":{"slug":"/blog/2020/01/22/nullish-coalescing-in-javascript/"},"frontmatter":{"title":"Nullish Coalescing in JavaScript","page":null}},"next":null}}