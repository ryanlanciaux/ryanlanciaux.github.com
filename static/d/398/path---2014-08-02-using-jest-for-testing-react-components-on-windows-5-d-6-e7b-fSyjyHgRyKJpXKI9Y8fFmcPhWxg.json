{"data":{"site":{"siteMetadata":{"title":"Ryan Lanciaux","author":"Ryan Lanciaux"}},"markdownRemark":{"id":"e011540b-0eaf-5792-bb9e-58dd2709b69b","excerpt":"I’m currently going through the process creating unit tests for  Griddle  and thought it would be good to document the steps I took to get Jest up and running…","html":"<p>I’m currently going through the process creating unit tests for <a href=\"http://dynamictyped.github.io/Griddle\">Griddle</a> and thought it would be good to document the steps I took to get Jest up and running. I did not find it as simple as typing <code class=\"language-text\">npm install -g jest-cli</code>, however it was not too bad.</p>\n<p>My primary machine is running Windows 8 — these steps may be a bit different if you’re on Mac / Linux.</p>\n<ol>\n<li><strong>Install Python</strong> - Install version 2.7 of Python and add it to your path or create a <code class=\"language-text\">PYTHONPATH</code> environment variable.</li>\n<li><strong>Install Visual Studio (Express Edition is Fine)</strong> - Thankfully, this step was not required for me as I already use Visual Studio. We will need this for some of modules that are compiled when we are installing Jest. (Express editions available <a href=\"http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx\">here</a> — get one of the versions that has C++)</li>\n<li><strong>Set Visual Studio Version Flags</strong> - this step tripped me up a bit at first. We need to tell node-gyp (something that is used for compiling addons) what version of Visual Studio we want to compile with. You can do this either through an environment variable <code class=\"language-text\">GYP_MSVS_VERSION</code> or the command line option <code class=\"language-text\">--msvs_version</code>. My environment variable looks a bit like this <code class=\"language-text\">GYP_MSVS_VERSION=2013</code> but if you are using Express, I think you have to say <code class=\"language-text\">GYP_MSVS_VERSION=2013e</code></li>\n<li><strong>Install Jest-CLI</strong> - Now you can run the command on the <a href=\"http://facebook.github.io/jest/docs/getting-started.html#content\">Jest docs site</a> <code class=\"language-text\">npm install jest-cli --save-dev</code></li>\n</ol>\n<p>At this point you should be ready to run Jest, however, I experienced some further trouble on Windows against React components. In the <a href=\"http://facebook.github.io/jest/docs/tutorial-react.html#content\">react example</a>, the package.json contains <code class=\"language-text\">&quot;unmockedModulePathPatterns&quot;: [&quot;&lt;rootDir&gt;/node_modules/react&quot;]</code> which is basically stating that we don’t want to mock React when running our tests. Unfortunately, it seemed like we need to change this path to just <code class=\"language-text\">&quot;unmockedModulePathPatterns&quot;: [&quot;react&quot;]</code> in order for the test to run successfully (again on Windows — seems fine on other OS). See <a href=\"https://github.com/facebook/jest/issues/100\">this GitHub issue</a> for more on that.</p>\n<p>For more reading on installing Jest’s requirements see:</p>\n<ul>\n<li><a href=\"http://www.steveworkman.com/node-js/2012/installing-jsdom-on-windows/\">http://www.steveworkman.com/node-js/2012/installing-jsdom-on-windows/</a></li>\n<li><a href=\"https://github.com/atom/atom/issues/2435\">https://github.com/atom/atom/issues/2435</a></li>\n</ul>","frontmatter":{"title":"Test React Components Using Jest (on Windows)","date":"August 02, 2014","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2014-08-02-using-jest-for-testing-react-components-on-windows/","previous":{"fields":{"slug":"/2014-07-08-introducing-griddle-a-react-dot-js-grid/"},"frontmatter":{"title":"Introducing Griddle: A React.js grid"}},"next":{"fields":{"slug":"/2014-10-18-azure-active-directory-authentication-in-existing-project/"},"frontmatter":{"title":"Azure Active Directory authentication in existing project"}}}}