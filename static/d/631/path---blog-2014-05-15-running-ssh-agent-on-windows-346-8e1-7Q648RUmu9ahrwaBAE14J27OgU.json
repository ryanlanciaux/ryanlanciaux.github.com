{"data":{"site":{"siteMetadata":{"title":"Ryan Lanciaux","author":"Ryan Lanciaux"}},"markdownRemark":{"id":"115bf956-5a4f-5e54-bb34-dbc3f4f5e931","excerpt":"There was one thing I didn’t mention in my  previous post about running Octopress on a Vagrant machine  — in the machine’s current state (with Windows as a host…","html":"<p>There was one thing I didn’t mention in my <a href=\"http://ryanlanciaux.github.io/blog/2014/05/13/vagrantfile-for-octopress/\">previous post about running Octopress on a Vagrant machine</a> — in the machine’s current state (with Windows as a host machine), we cannot deploy the site with a <code class=\"language-text\">rake deploy</code> command. The reason for this is we don’t have an ssh key available to the Vagrant box. </p>\n<p>While we could create new keys on the Vagrant machine, this kind of seems to defeat part of the purpose of using Vagrant (setting up a development environment with little manual interaction). Additionally, we could simply share our host machine’s ~/.ssh folder with our vagrant machine but this also seems kind of messy. </p>\n<p>Thankfully, there is a pretty simple way to get everything working to where we can use the host machine’s ssh key and that is through an <a href=\"http://en.wikipedia.org/wiki/Ssh-agent\">ssh-agent</a>. In the Vagrantfile we setup as part of the <a href=\"http://ryanlanciaux.github.io/blog/2014/05/13/vagrantfile-for-octopress/\">previous post</a>, we are already giving our machine access to the ssh-agent with the following command <code class=\"language-text\">config.ssh.forward_agent = true</code>. The only problem with this forward_agent property is that you may not have an ssh-agent running (especially if you are on Windows). There are a couple things we can do to get around that… </p>\n<ol>\n<li><strong>Install <a href=\"http://msysgit.github.io/\">msysgit</a> and manually say <code class=\"language-text\">eval `ssh-agent`</code> followed by <code class=\"language-text\">ssh-add</code> (assuming your keys are id<em>rsa/id</em>rsa.pub)</strong> — You’d connect to your Vagrant machine after running this command and would be able to deploy, however, there are a couple of problems with this method. First off, this is a manual process you’d have to remember every time you wish to deploy. Another issue is that you have an ssh-agent process that you need to remember to get rid of down the road.</li>\n<li><strong>Use msysgit and .profile</strong> — Adding the <code class=\"language-text\">eval `ssh-agent`</code> and <code class=\"language-text\">ssh-add</code> to the .profile would allow us to automate the process of starting the agent when loading the terminal. That being said, using the <code class=\"language-text\">eval</code> script would be bad — it would create a new ssh-agent each time a new shell is loaded. Thankfully, <a href=\"https://help.github.com/articles/working-with-ssh-key-passphrases#auto-launching-ssh-agent-on-msysgit\">GitHub has shared a solution to this problem</a>. </li>\n<li><strong>Use <a href=\"https://github.com/dahlbyk/posh-git\">posh-git</a> with PowerShell</strong> — Posh-git is a series of PowerShell scripts for git integration. Upon installing posh-git and running PowerShell, I was presented with my ssh key’s password prompt. After entering the password, it started an ssh-agent and everything was good-to-go.</li>\n</ol>\n<p>I generally stick with option 2, as I am not much of a PowerShell user. It’s definitely nice to have the PowerShell option available as a backup, however. One thing I would really like to explore a bit more is making this working with <a href=\"http://bliker.github.io/cmder/\">cmder</a>. I could not get the agent to run when using cmder (without having it launch PowerShell) but I did not spend much time on that yet. </p>\n<h4>Testing it out</h4>\n<p>If you want to test to make sure that your ssh-agent is running and getting shared to your vagrant machine…</p>\n<ol>\n<li>Fire up your terminal (either PowerShell with posh-git or msysgit with the github agent code added to your .profile)</li>\n<li>Navigate to the directory where your Vagrantfile is and <code class=\"language-text\">vagrant up</code> followed by <code class=\"language-text\">vagrant ssh</code></li>\n<li>Once ssh’d into your vagrant machine type <code class=\"language-text\">ssh -T git@github.com</code></li>\n</ol>\n<p>If everything is working you should see:<br /><br /> <code class=\"language-text\">Hi _______! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p>","frontmatter":{"title":"Running ssh-agent on Windows","date":"May 15, 2014","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2014/05/15/running-ssh-agent-on-windows/","previous":{"fields":{"slug":"/blog/2014/05/13/vagrantfile-for-octopress/"},"frontmatter":{"title":"Vagrantfile for Octopress","page":null}},"next":{"fields":{"slug":"/blog/2014/05/25/debugging-express-applications/"},"frontmatter":{"title":"Debugging Express Applications","page":null}}}}