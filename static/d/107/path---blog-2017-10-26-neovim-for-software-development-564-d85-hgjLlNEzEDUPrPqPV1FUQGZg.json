{"data":{"site":{"siteMetadata":{"title":"Ryan Lanciaux","author":"Ryan Lanciaux"}},"markdownRemark":{"id":"dc02e8b8-67a1-5347-9ef8-97cd1473cc5b","excerpt":"I’ve recently been interested in\nusing the tried-and-true vim editor again. For those unfamiliar, vim is an\neditor that was first released in 1991. Vim boasts a…","html":"<p>I’ve recently been interested in\nusing the tried-and-true vim editor again. For those unfamiliar, vim is an\neditor that was first released in 1991. Vim boasts a large community of users,\nplugins, and add-ons. Most vim users configure\ntheir editor quite heavily. This customization is one of the nicest things about\nvim. That said, it’s also one of the more challenging things to get right.</p>\n<p>In order to consider my vim configuration a success, I wanted to have some\nIDE like features available. Things like “find in project”, “jump to file”, and\nlinting / TypeScript support are necessary. This article is a high-level overview of how I setup NeoVim (nvim) to achieve these results.</p>\n<h2>1) Install nvim</h2>\n<p>I am using NeoVim (nvim) instead of the standard vim. NeoVim is a “vim-based”\ntext editor. It’s fairly compatible with standard vim but it adds some\nfeatures around what types of things plugins can do (as well as some other things).</p>\n<p>It’s good to <a href=\"https://github.com/neovim/neovim/wiki/Installing-Neovim\">follow the documentation for installing\nnvim</a>. On my Mac, I ran</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install --HEAD neovim</code></pre></div>\n<h2>2) Install VimPlug</h2>\n<p>VimPlug is what I’m using to manage my plugins. <a href=\"https://github.com/junegunn/vim-plug\">Take a look at the installation\ndocumentation</a>. For my setup, I ran the\nfollowing:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</code></pre></div>\n<h2>3) Set up the config files</h2>\n<p>nvim’s configuration, by default, is controlled from\n<code class=\"language-text\">.config/nvim/init.vim</code>. This file could contain all of the configuration\noptions for nvim. As time goes on, placing our configuration in one file could get unwieldy over time. Thankfully, you can <a href=\"https://afnan.io/2018-04-12/my-neovim-development-setup/#split-up-your-initvim\">split\nyour vim\nconfiguration files</a> to\nmake it easier to manage. Following <a href=\"https://afnan.io/2018-04-12/my-neovim-development-setup/#split-up-your-initvim\">that\nguide</a>,\n<code class=\"language-text\">init.vim</code>, loads configuration from other config files. I have the following\nfiles but any number / name of configuration files could be used.</p>\n<h3>01.plugins.vim</h3>\n<p>This is where I place all my plugin installation information.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">call plug#begin(&#39;~/.vim/plugged&#39;)\n  &quot; Plugins go here\ncall plug#end()</code></pre></div>\n<h3>02.settings.vim</h3>\n<p>This settings.vim contains all of my standard nvim configuration.</p>\n<h3>03.plugin-settings.vim</h3>\n<p>Plugin configuration goes in this file. I wanted to keep this separate from the\nplugin installation but it could technically be placed along side the\ninstallation configuration file.</p>\n<h2>4) Configure default vim settings</h2>\n<p><a href=\"https://github.com/ryanlanciaux/nvim-config/blob/master/config/02.settings.vim\">My vim settings are available\nhere</a> to see how I set this up. These settings are mostly personal preference. <a href=\"https://www.linode.com/docs/tools-reference/tools/introduction-to-vim-customization/\">Take a look at this guide on configuring vim for more info</a>.</p>\n<h2>5) Install Plugins</h2>\n<p>With this structure in place, everything should be in a good place to begin\ninstalling and configuring plugins. Plugins can be installed using VimPlug by\nplacing statements <code class=\"language-text\">Plug</code> statements between the opening and closing plug\nfunctions. For example</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Plug &#39;bling/vim-bufferline&#39;</code></pre></div>\n<p>After configuring the plugins, run <code class=\"language-text\">:PlugInstall</code> to install the plugins.</p>\n<p>A couple of plugins that I’m using are:</p>\n<h3><a href=\"https://github.com/ctrlpvim/ctrlp.vim\">ctrlp.vim</a></h3>\n<p>ctrlp is described as a “Full path fuzzy file, buffer, mru, tag, … finder for\nVim.” I use this similarly to how I use Command+P in VS Code to quickly jump to\nanother file.</p>\n<h3><a href=\"https://github.com/dyng/ctrlsf.vim\">ctrlsf</a></h3>\n<p>This plugin makes it very easy to quickly search a codebase and edit files\nin the search results view.</p>\n<h3><a href=\"https://github.com/neoclide/coc.nvim\">Conquer of Completion</a></h3>\n<p>This plugin is what I use to get intellisense information like VS Code. The\nautocompletion is surprisingly good. The documentation boasts that it has the\nsame language protocol support that powers VS Code.</p>\n<p>Conquer of completion has completion sources for TypeScript and other programming languages that\nmay need to be installed separately. <a href=\"https://github.com/neoclide/coc.nvim#extensions\">See the docs for more on this</a></p>\n<h3><a href=\"https://github.com/w0rp/ale\">Ale</a></h3>\n<p>Ale stands for “Asynchronous Lint Engine.” Ale lives up to the name and is great at linting my JavaScript codebases.</p>\n<h2>Wrapping up</h2>\n<p>While vim may not be for everyone and might not even be my primary editor, it\ncan be a nice way to edit code. <a href=\"https://github.com/ryanlanciaux/nvim-config\">My configuration files are available on\ngithub</a>.</p>","frontmatter":{"title":"NeoVim for Software Development","date":"May 01, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2017/10/26/neovim-for-software-development/","previous":{"fields":{"slug":"/blog/2019/08/19/ignoring-files-in-git/"},"frontmatter":{"title":"Ignoring files in git"}},"next":null}}