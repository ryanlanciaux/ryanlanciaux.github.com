{"data":{"site":{"siteMetadata":{"title":"Ryan Lanciaux","author":"Ryan Lanciaux"}},"markdownRemark":{"id":"46e4c84b-76e5-5ce2-bfbc-37238a4a22ac","excerpt":"In this article, we are going to take a quick look at styled components, a styling library for use with React. While there are many ways to style React…","html":"\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\"\n          >\n            <iframe src=\"https://www.youtube.com/embed/FjHPo1E9HK8\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe>\n          </div>\n          \n<p>In this article, we are going to take a quick look at styled components, a styling library for use with React. While there are many ways to style React applications, styled components stands out as an excellent way style our applications as a series of components using familiar CSS syntax.</p>\n<p>We will start by adding styled-components to our application through yarn or npm.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; yarn add styled-components</code></pre></div>\n<p>From our default React application, we’ll jump over to <code class=\"language-text\">App.js</code> and import styled from <code class=\"language-text\">styled-components</code>. We’re ready to create our first styled component that we’ll call Card by typing <code class=\"language-text\">const card = styled.div</code> - noting that our <code class=\"language-text\">Card</code> component will render as a <code class=\"language-text\">div</code>. We’ll add a template literal directly after div and provide some CSS that defines a border, shadow, and padding — as well as a couple other properties. We should end up with something like this</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Card <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token string\">`\n  border: 1px solid #ededed;\n  box-shadow: 0 8px 6px -6px;\n  padding: 16px;\n  border-radius: 5px;\n  background-color: #fafafa;\n  margin: 20px 0px;\n`</span></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Card<span class=\"token operator\">></span>Hello<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Card<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;img src=“./hello.png” alt=\"\" /</p>\n<p>Now we can reuse this card component just like any other React component but what if we wanted to specify variations to this component? Maybe we want to have a version of the card that was highlighted a bit more. Thankfully, since this is a component, we can pass props to it and interact with them in our styled definition through an interpolation. We’ll add a shouldHighlight prop to our App component specifying that shouldHighlight = true. After this, we’ll add a string interpolation arrow function. This function will use props and will return either our default grey color or a highlight color.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Card <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token string\">`\n  border: 1px solid </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>shouldHighlight <span class=\"token operator\">?</span> <span class=\"token string\">\"#F09\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"#EDEDED\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  box-shadow: 0 8px 6px -6px;\n  padding: 16px;\n  border-radius: 5px;\n  background-color: #fafafa;\n  margin: 20px 0px;\n`</span></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Card<span class=\"token operator\">></span>Hello<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Card<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Card shouldHighlight<span class=\"token operator\">></span>Highlighted Card<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Card<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"./highlight_card.png\" alt=\"\" />\n<p>So far, we’ve been providing our colors, font-sizes etc, directly in our styled components. What if we had a <code class=\"language-text\">Text</code> component where we wanted to use the same highlight color? In our trivial example it would be relatively easy to duplicate the colors in each style definition. In a larger application, however, this could become a bit unwieldy to manage consistency between our components. This is where a theme is extremely useful.</p>\n<h2>Themes</h2>\n<p>A theme, is a javascript object where we can specify properties that we can use in our styled components. We could create a theme object that contains our colors.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  colors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    highlight<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#F09\"</span><span class=\"token punctuation\">,</span>\n    grey<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#EDEDED\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once we have this theme object, we’ll place, we’ll want to utilize a <code class=\"language-text\">ThemeProvider</code> and pass our newly created theme to this provider as the <code class=\"language-text\">theme</code> prop.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export default function App() {\n  return (\n    &lt;ThemeProvider theme={theme}&gt;\n      &lt;div className=&quot;App&quot;&gt;\n        &lt;Card&gt;Hello!&lt;/Card&gt;\n\n        &lt;Card shouldHighlight&gt;Highlighted Card&lt;/Card&gt;\n        &lt;Text&gt;Some text&lt;/Text&gt;\n      &lt;/div&gt;\n    &lt;/ThemeProvider&gt;\n  );\n}</code></pre></div>\n<p>Now any component that is rendered under this provider has access to our theme.</p>\n<p>We can now update our components to utilize the theme prop.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Card = styled.div`\n  border: 1px solid\n    ${props =&gt;\n      props.shouldHighlight\n        ? props.theme.colors.highlight\n        : props.theme.colors.grey};\n  box-shadow: 0 8px 6px -6px;\n  padding: 16px;\n  border-radius: 5px;\n  background-color: #fafafa;\n  margin: 20px 0px;\n`;\n\nconst Text = styled.span`\n  color: ${props =&gt; props.theme.colors.highlight};\n`;</code></pre></div>\n<p>I’ve found styled components to be an excellent way to style applications built with React (for teams that are on-board with a css-in-js based mindset). I would love to know your thoughts or of any ways you’ve found useful to style your applications. You can <a href=\"https://codesandbox.io/s/exciting-mestorf-foph3\">take a look at the finished example on CodeSandbox</a></p>","frontmatter":{"title":"An introduction to Styled Components","date":"January 09, 2020","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2020/01/09/an-introduction-to-styled-components/","previous":{"fields":{"slug":"/blog/2020/01/02/tailwind-with-react/"},"frontmatter":{"title":"Tailwind with React"}},"next":null}}