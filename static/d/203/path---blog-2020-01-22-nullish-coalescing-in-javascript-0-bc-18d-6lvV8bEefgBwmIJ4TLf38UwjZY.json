{"data":{"site":{"siteMetadata":{"title":"Ryan Lanciaux","author":"Ryan Lanciaux"}},"markdownRemark":{"id":"189138fa-6e49-5e09-968d-3a7611becb5b","excerpt":"Nullish Coalescing is a language feature of JavaScript that was recently promoted to Stage 4 by TC39, the group that maintains the definition of JavaScript…","html":"\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\"\n          >\n            <iframe src=\"https://www.youtube.com/embed/CJWFr6VJ_A4\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe>\n          </div>\n          \n<p>Nullish Coalescing is a language feature of JavaScript that was recently promoted to Stage 4 by TC39, the group that maintains the definition of JavaScript. This means that this language feature is valid JavaScript as of ES2020.</p>\n<p>With any language feature, it’s good to understand how it helps us. Nullish Coalescing helps us eliminate a certain class of code that primarily consists of checking if something is null or undefined.</p>\n<p><a href=\"https://codepen.io/ryanlanciaux/pen/YzPdbLv?editors=0010\">Lets take an example where we want to display a Star Wars character’s first and last name</a>. When the last name is undefined, we should show “Not Specified”, but if the last name is \"\" we should treat it like the character doesn’t have a last name. (noting that if this was not example code we would probably want to implement different logic for this)</p>\n<p>For instance, if we had the following character definitions:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const hanSolo = {\n  first: &#39;Han&#39;,\n  last: &quot;Solo&quot;\n};\n\nconst chewbacca = {\n  first: &quot;Chewbacca&quot;,\n  last: &quot;&quot;\n}\n\nconst rey = {\n  first: &quot;Rey&quot;,\n  lastName: undefined\n}</code></pre></div>\n<p>Lets assume that we had a function, <code class=\"language-text\">displayName</code> that was responsible for obtaining the character’s full name for display.</p>\n<p>We may be tempted to reach for a logical OR operator like follows.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function displayName(character) {\n  const lastName = character.last || &quot;Not specified&quot;\n\n  log(character.first, lastName)\n}</code></pre></div>\n<p>This would work well for <code class=\"language-text\">hanSolo</code> and <code class=\"language-text\">rey</code> but would fall short for Chewbacca, since we’re specifying that his last name is \"\" (meaning he has no last name for our simple example). The <code class=\"language-text\">&quot;&quot;</code> is evaluated as falsy, so the logical OR operator would evaluate to “Not specified” in this case. This fails to meet our requirements because a lastname of \"\" should not cause the <code class=\"language-text\">displayName</code> function to append “Not specified”</p>\n<p>Without the null coalescing operator, we’d generally have to check for lastName being null or undefined since an empty string is evaluated as falsy.</p>\n<p>If we change our function to the following, everything works as expected, however it’s a bit more code.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function displayName(character) {\n const lastName = character.last === null || character.last === undefined\n  ? &#39;Not Specified&#39;\n  : character.last;\n\n  log(character.first, lastName)\n}</code></pre></div>\n<p>Using the nullish coalescing operator is a lot more focused:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function displayName(character) {\n  const lastName = character.last ?? &quot;Not specified&quot;\n\n  log(character.first, lastName)\n}</code></pre></div>\n<p>This is very similar to the function using the logical OR ”||” except we’re using two question marks instead ”??” <a href=\"https://codepen.io/ryanlanciaux/pen/YzPdbLv?editors=0010\">View the accompanying example for this article on CodePen</a>.</p>\n<p>Please <a href=\"https://twitter.com/ryanlanciaux\">find me on Twitter at @ryanlanciaux</a></p>","frontmatter":{"title":"Nullish Coalescing in JavaScript","date":"January 22, 2020","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2020/01/22/nullish-coalescing-in-javascript/","previous":{"fields":{"slug":"/blog/2020/01/14/snowpack-with-react/"},"frontmatter":{"title":"Snowpack with React"}},"next":{"fields":{"slug":"/blog/about/"},"frontmatter":{"title":""}}}}