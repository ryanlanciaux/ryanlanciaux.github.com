{"data":{"site":{"siteMetadata":{"title":"Ryan Lanciaux","author":"Ryan Lanciaux"}},"markdownRemark":{"id":"0bcd58a8-2f4d-5685-b180-c3209b83cc30","excerpt":"When releasing a new version of an open source project, it’s important to make sure a series of things happen in the same order for every release. I’ve…","html":"<p>When releasing a new version of an open source project, it’s important to make sure a series of things happen in the same order for every release. I’ve attempted to make a “script” I follow for releasing <a href=\"http://griddlegriddle.github.io/Griddle\">Griddle</a> to npm that helps promote consistent releases and (as much as possible) illuminates any issues before they impact others using the package.</p>\n<ol>\n<li>Run all tests and local ”<a href=\"http://softwaretestingfundamentals.com/smoke-testing/\">smoke-tests</a>”</li>\n<li>Update the version in package.json</li>\n<li>Update CHANGELOG.md with any high-level changes</li>\n<li>Push package.json and CHANGELOG.md to the master branch of the project</li>\n<li>Release to npm as a tagged, pre-release version. Generally, this would be done by running <code class=\"language-text\">npm publish --tag next</code> (or whatever you want to call your pre-release version). This lets you test your project as a npm package without making it the version that is installed when running <code class=\"language-text\">npm install</code> or <code class=\"language-text\">yarn add</code>. In Griddle, we generally run this through <code class=\"language-text\">npm run ship-it</code> which essentially runs our build script and then pushes the output as a pre-release package. <a href=\"https://blog.greenkeeper.io/one-simple-trick-for-javascript-package-maintainers-to-avoid-breaking-their-user-s-software-and-to-6edf06dc5617\">See this blog post</a> for more thoughts on this pre-release strategy.</li>\n<li>From here, I generally install the new, pre-release version on the <code class=\"language-text\">griddle-docs</code> project as well as some of my own projects that use the library. I do this to help ensure that there are no known regressions before making this version the <code class=\"language-text\">@latest</code> tag in npm.</li>\n<li>If all is successful, it’s time to officially release this version — <code class=\"language-text\">npm dist-tag griddle-react@1.8.0 latest</code></li>\n</ol>\n<p>While following a script doesn’t ensure there will be zero issues, it does help avoid common mistakes or makes things very clear where there is a problem in the process.</p>","frontmatter":{"title":"Releasing node packages","date":"August 20, 2017","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2017-08-20-releasing-node-packages/","previous":{"fields":{"slug":"/blog/2017-08-17-running-jest-on-linux/"},"frontmatter":{"title":"Running Jest on Linux"}},"next":{"fields":{"slug":"/blog/2017-08-20-a-feature-based-approach-to-react-development/"},"frontmatter":{"title":"A feature based approach to React development"}}}}