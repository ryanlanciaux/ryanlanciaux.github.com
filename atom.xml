<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan Lanciaux]]></title>
  <link href="http://ryanlanciaux.github.com/atom.xml" rel="self"/>
  <link href="http://ryanlanciaux.github.com/"/>
  <updated>2016-11-18T01:45:17-05:00</updated>
  <id>http://ryanlanciaux.github.com/</id>
  <author>
    <name><![CDATA[Ryan Lanciaux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup Bash on Windows: My environment configuration]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2016/11/17/setup-bash-on-windows-my-environment-configuration/"/>
    <updated>2016-11-17T23:32:00-05:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2016/11/17/setup-bash-on-windows-my-environment-configuration</id>
    <content type="html"><![CDATA[<p>Inspired by some recent conversations on Twitter, I&#8217;ve decided to give Bash on Windows another shot. This post contains the steps I&#8217;ve taken to install and configure Bash on Windows to closely resemble my Linux / Mac settings for JavaScript and node development (with some extra steps I&#8217;ve taken for Ruby, etc at the end).</p>

<h2>1. Enable Bash on Windows</h2>

<p>Bash on Windows requires the Anniversary update of Windows 10. Please make sure you have that before continuing. To determine what version of Windows you are running, open a command prompt window and type <code>winver</code>. If you see Version 1607, you should be good to proceed (thanks Josh Pollard).</p>

<p><img src="http://ryanlanciaux.github.com/files/winver.png" alt="Windows Version dialog" /></p>

<p>Once that&#8217;s all set go to <code>Settings -&gt; Update &amp; Security -&gt; For Developers</code> and enable <code>Developer mode</code>. Finally, go to <code>Windows Features</code> and enable <code>Windows Subsystem for Linux</code>. Your computer should restart and you should be able to run Bash for Windows at this point.</p>

<p><img src="http://ryanlanciaux.github.com/files/windows_features.png" alt="Windows features dialog" /></p>

<p>See <a href="http://www.hanselman.com/blog/DevelopersCanRunBashShellAndUsermodeUbuntuLinuxBinariesOnWindows10.aspx">Scott Hanselman&#8217;s blog</a> or <a href="https://blogs.technet.microsoft.com/heyscriptingguy/2016/09/28/part-1-install-bash-on-windows-10-omi-cim-server-and-dsc-for-linux/">Stefan Roth&#8217;s post on TechNet</a> for more on this.</p>

<h2>2. Update apt-get</h2>

<p>We are going to be installing some things and it would be good to make sure we&#8217;re up-to-date here. Launch bash by pressing the Windows key and typing <code>bash</code>. From there, <code>apt-get update</code> should obtain the latest package information. If you are running into issues with IPv6 vs IPv4 checkout this post on <a href="http://askubuntu.com/questions/759524/problem-with-ipv6-sudo-apt-get-update-upgrade">Ask Ubuntu</a> or here on <a href="https://bruteforce.gr/make-apt-get-use-ipv4-instead-ipv6.html">BruteForce labs</a>.</p>

<h2>3. Install nvm</h2>

<p>nvm stands for Node version manager and is an essential part of my development environment. Using nvm allows you to switch what version of node you&#8217;re using on a project by project basis. To install nvm, run <code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</code> (from <a href="https://github.com/creationix/nvm">the nvm documentation</a>) followed by <code>Source .bashrc</code></p>

<h2>4. Install git</h2>

<p>Take the following steps to install git on Bash for Windows and be ready to work with projects on GitHub.</p>

<ol>
<li><code>apt-get install git</code> (see <a href="https://help.github.com/articles/set-up-git/#platform-linux">GitHub&#8217;s guides for more on this</a>)</li>
<li>Generate <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/">an access token</a> or <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#platform-linux">a SSH key</a> (and associate the key to your GitHub account)</li>
</ol>


<h2>5. Setup bash git prompt</h2>

<p><a href="https://github.com/magicmonty/bash-git-prompt">bash-git-prompt</a> is, as the project describes, &#8220;An informative and fancy bash prompt for Git users&#8221; &#8211; that is, it shows git information for the current repository when navigating to project folder.</p>

<p>To install bash-git-prompt:</p>

<ol>
<li><code>cd ~</code></li>
<li><code>git clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1</code></li>
<li>Add <code>GIT_PROMPT_ONLY_IN_REPO=1</code> to .bashrc</li>
</ol>


<p><a href="https://github.com/magicmonty/bash-git-prompt">Read through the documentation</a> as there is a bit of configuration and themeing that&#8217;s possible. That said, I&#8217;m running with the default for now.</p>

<h2>6. Make Visual Studio Code use Bash</h2>

<p>It&#8217;s possible to toggle a terminal inside Visual Studio Code &#8211; by default, this appears to be the standard command prompt. Thankfully, <a href="http://pjdecarlo.com/2016/06/bash-on-windows-as-integrated-terminal-in-visual-studio-code.html">Paul DeCarlo created a blog post</a> explaining that you can add <code>"terminal.integrated.shell.windows": "C:\\Windows\\sysnative\\bash.exe"</code> to your user settings to use Bash as the default instead.</p>

<p>It should look like this if everything is working correctly:</p>

<p><img src="http://ryanlanciaux.github.com/files/git_with_changes.png" alt="Visual Studio code window" /></p>

<h2>Extras</h2>

<h3>Install tmux</h3>

<p>tmux is a terminal multiplexer that lets you run multiple programs in one terminal (it does a lot more than that but <a href="https://tmux.github.io/">read the docs for more info</a>). I frequently use tmux to run tests while running webpack server, <a href="https://getstorybook.io/">React Storybook</a>, or something else along those lines.</p>

<p>You can install tmux by running <code>apt-get install tmux</code>. Once tmux is installed on the system you can press <code>ctrl + b + c</code> to create a new window and <code>ctrl + b + w</code> to list the windows. <a href="https://gist.github.com/MohamedAlaa/2961058">See this tmux cheatsheet for more</a></p>

<h3>Install Ruby and Rails</h3>

<p>I do a bit of Ruby work and highly recommend rbenv for multiple ruby versions. <a href="https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-ubuntu-14-04">Digital Ocean&#8217;s guide to installing ruby / rbenv</a> is great AND it works on Bash for Windows.</p>

<h3>Setup vim and Vundle</h3>

<p>I use <a href="http://www.vim.org/">Vim</a> quite a lot and <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> for managing vim plugins.</p>

<ol>
<li><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li>
<li>Setup your .vimrc (here&#8217;s <a href="https://github.com/ryanlanciaux/dotfiles/blob/master/.vimrc">my .vimrc</a> for example)</li>
<li>Run vim and type <code>:PluginInstall</code></li>
</ol>


<h3>Install cmder</h3>

<p><a href="http://cmder.net/">Cmder</a> is a nice console emulator for Windows. You can run bash in cmder by typing <code>bash</code> from the prompt. You may have to type <code>cd ~</code>from there to get back to your standard bash home directory.</p>

<h2>The End</h2>

<p>Please feel free to let me know of any questions or feel free to <a href="https://github.com/ryanlanciaux/ryanlanciaux.github.com">submit a PR or issue</a> on anything that&#8217;s mistaken here :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Miscellaneous Jest Issues/Workarouds II]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/11/17/miscellaneous-jest-issues-slash-workarouds-ii/"/>
    <updated>2014-11-17T02:15:00-05:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/11/17/miscellaneous-jest-issues-slash-workarouds-ii</id>
    <content type="html"><![CDATA[<p>My brother recently installed Jest on his Windows machine and alerted me that there were some problems that he encountered when using Visual Studio 2013 Express to compile some of the requirements. <a href="http://joellanciaux.github.io/blog/2014/11/14/react-plus-jest-testing-on-windows-2-dot-5/">Check out his full post</a> on what he did to resolve (tldr: Install Express 2012 and update the GYP_MSVS_VERSION environment variable).</p>

<p>This does make me wonder how this whole process works on the newly released <a href="http://www.visualstudio.com/news/vs2013-community-vs">Visual Studio Community edition</a>&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Miscellaneous Jest Issues/Workarounds]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/10/28/miscellaneous-jest-issues-slash-workarounds/"/>
    <updated>2014-10-28T20:44:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/10/28/miscellaneous-jest-issues-slash-workarounds</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using Jest a bit lately and wanted to document some issues I&#8217;ve run into for future reference.</p>

<h2>Debugging Jest Tests</h2>

<p>Recently I had a test that was failing and from looking at the stack trace it wasn&#8217;t really clear why. I followed some advice I had seen about running jest in-band and then <a href="http://ryanlanciaux.github.io/blog/2014/05/25/debugging-express-applications/">running node-inspector</a>. Every time I tried to run node-inspector, however, it failed. Similar to the issue I encountered in <a href="http://ryanlanciaux.github.io/blog/2014/10/28/react-plus-jest-testing-on-windows-ii/">my previous post</a>, it appears that there is a <a href="https://github.com/facebook/jest/pull/153">forthcoming fix</a>.</p>

<p>Until the fix makes it&#8217;s way into the release version, following the steps in <a href="http://stackoverflow.com/questions/25142173/debugging-jest-test-cases-using-node-inspector/26415442#26415442">this stackoverflow post</a> should allow test debugging. Like the solution author, I&#8217;m not super thrilled about modifying the jest.js file outright but it&#8217;s nice to be able to debug the tests.</p>

<h2>Mocking Third-Party Libraries (that aren&#8217;t CommonJS modules)</h2>

<p>Another issue I&#8217;ve encountered is testing components that wrap third-party libraries that are not CommonJS modules. I tried a couple different hacks to try to shim the library in question into something that would load as a CommonJS module but ultimately was unsuccessful in the time I wanted to spend on that.</p>

<p>Thankfully, <a href="https://groups.google.com/forum/#!topic/jestjs/EJGZcNtbW78">a post in the React Google Group</a> led me to use <a href="http://facebook.github.io/jest/docs/manual-mocks.html">Manual mocks</a> as a way to work around these third-party libraries.</p>

<p>Creating a manual mock is pretty simple. Just create a new folder called <code>__mocks__</code> at the same level as the <code>__tests__</code> directory and create a CommonJS module with the same name/properties as the third-party module that is being mocked. Adding <code>var someModule = require('moduleName')</code> will cause <code>someModule</code> to get replaced with the mock when running through jest. Finally, set the third-party library as an <a href="http://webpack.github.io/docs/library-and-externals.html">external module in webpack.config.js</a> and everything should be good-to-go for both the test and the &#8220;compiled&#8221; version of the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React + Jest Testing on Windows II]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/10/28/react-plus-jest-testing-on-windows-ii/"/>
    <updated>2014-10-28T03:14:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/10/28/react-plus-jest-testing-on-windows-ii</id>
    <content type="html"><![CDATA[<p>Last time I wrote about running <a href="http://ryanlanciaux.github.io/blog/2014/08/02/using-jest-for-testing-react-components-on-windows/">Jest on Windows</a> there was one thing I left out. The test output would show if the tests pass or fail but no data is displayed regarding why they fail. This is due to an <a href="https://github.com/joyent/node/issues/3584">issue with stdio in Windows</a>, however, there appears to be <a href="https://github.com/facebook/jest/pull/111">a fix in the works</a>.</p>

<p>Until that fix makes its way into a released version of Jest, you can simply copy bin/jest.js from <a href="https://github.com/malonecj/jest">Connor Malone&#8217;s branch on GitHub</a> as a workaround. If using the file outright doesn&#8217;t sound desirable, any line that has <code>process.exit(0)</code> can be wrapped in a <code>process.on('exit')</code> block:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>process.on('exit', function(){
</span><span class='line'>  process.exit(0);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>See the diff of the modified code <a href="https://github.com/malonecj/jest/commit/3e66e456f4c612126053483508d89f4751966f45">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Active Directory authentication in existing project]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/10/18/azure-active-directory-authentication-in-existing-project/"/>
    <updated>2014-10-18T04:28:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/10/18/azure-active-directory-authentication-in-existing-project</id>
    <content type="html"><![CDATA[<p>Recently, I needed to add Azure Active directory authentication to an existing web project. There was an automated tool for Visual Studio 2012 but there does not seem to be a similar component for 2013. A lot of the advice I found suggested creating a new project and importing a bit of the code / config from the other application &#8211; that&#8217;s what I did here. What follows is not a how-to but rather a log of the steps I took to use AAD authentication (mostly for <a href="http://xkcd.com/1421/">future reference</a>).</p>

<h3>References</h3>

<p>First off there are some references that were missing in the project. I needed to add</p>

<ol>
<li><strong>System.IdentityModel</strong></li>
<li><strong>System.IdentityModelServices</strong></li>
</ol>


<p>In addition to the system references, the <strong>Microsoft Token Validation Extension</strong> should be installed from NuGet.</p>

<h3>Code</h3>

<ol>
<li>Copy over <strong>DatabaseIssuerNameRegistry.cs</strong> (I added this under utils)</li>
<li><strong>IssuingAuthorityKey.cs</strong> (model\tenant)</li>
<li><strong>Tenant.cs</strong></li>
<li><strong>TenantDbContext.cs</strong></li>
<li><strong>IdentityConfig.cs</strong> (This needs to be in the app_start directory)</li>
</ol>


<h3>Azure</h3>

<p>On your Azure active directory settings you will need to add an application. Click on Applications -> Add -> URL: Localhost:Port (or real URL) and give it the ID of the site you are developing.</p>

<h3>Config</h3>

<p>Copy over the following config sections replacing any reference to ID / URL with the settings that were applied to the Application added in the Active Directory settings.</p>

<ol>
<li><strong>configuration\configSections\system.identityModel</strong></li>
<li><strong>configuration\configSections\system.identityModel.services</strong></li>
<li><strong>configuration\location</strong></li>
<li><strong>configuration.system.identityModel</strong> - The DatabaseIssuerNameRegistry should have the fully qualified name of the DatabaseIssuer class.</li>
<li><strong>configuration\system.web\authentication</strong></li>
<li><strong>configuration\system.web\authorization</strong></li>
<li><strong>configuration.system.identityModel.services</strong></li>
<li><strong>configuration\appSettings</strong>

<ol>
<li><strong>ida:FederationMetadataLocation</strong> - Use your active directory path</li>
<li><strong>ida:Realm</strong></li>
<li><strong>ida:AudienceUri</strong></li>
</ol>
</li>
<li><strong>configuration\system.webServer</strong></li>
</ol>


<p>Again this is not an exhaustive guide but rather a checklist for making sure the correct code/configuration is included in the existing project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test React Components Using Jest (on Windows)]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/08/02/using-jest-for-testing-react-components-on-windows/"/>
    <updated>2014-08-02T12:37:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/08/02/using-jest-for-testing-react-components-on-windows</id>
    <content type="html"><![CDATA[<p>I&#8217;m currently going through the process creating unit tests for <a href="http://dynamictyped.github.io/Griddle">Griddle</a> and thought it would be good to document the steps I took to get Jest up and running. I did not find it as simple as typing <code>npm install -g jest-cli</code>, however it was not too bad.</p>

<p>My primary machine is running Windows 8 &#8211; these steps may be a bit different if you&#8217;re on Mac / Linux.</p>

<ol>
<li><strong>Install Python</strong> - Install version 2.7 of Python and add it to your path or create a <code>PYTHONPATH</code> environment variable.</li>
<li><strong>Install Visual Studio (Express Edition is Fine)</strong> - Thankfully, this step was not required for me as I already use Visual Studio. We will need this for some of modules that are compiled when we are installing Jest. (Express editions available <a href="http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx">here</a> &#8211; get one of the versions that has C++)</li>
<li><strong>Set Visual Studio Version Flags</strong> - this step tripped me up a bit at first. We need to tell node-gyp (something that is used for compiling addons) what version of Visual Studio we want to compile with. You can do this either through an environment variable <code>GYP_MSVS_VERSION</code> or the command line option <code>--msvs_version</code>. My environment variable looks a bit like this <code>GYP_MSVS_VERSION=2013</code> but if you are using Express, I think you have to say <code>GYP_MSVS_VERSION=2013e</code></li>
<li><strong>Install Jest-CLI</strong> - Now you can run the command on the <a href="http://facebook.github.io/jest/docs/getting-started.html#content">Jest docs site</a> <code>npm install jest-cli --save-dev</code></li>
</ol>


<p>At this point you should be ready to run Jest, however, I experienced some further trouble on Windows against React components. In the <a href="http://facebook.github.io/jest/docs/tutorial-react.html#content">react example</a>, the package.json contains <code>"unmockedModulePathPatterns": ["&lt;rootDir&gt;/node_modules/react"]</code> which is basically stating that we don&#8217;t want to mock React when running our tests. Unfortunately, it seemed like we need to change this path to just <code>"unmockedModulePathPatterns": ["react"]</code> in order for the test to run successfully (again on Windows &#8211; seems fine on other OS). See <a href="https://github.com/facebook/jest/issues/100">this GitHub issue</a> for more on that.</p>

<p>For more reading on installing Jest&#8217;s requirements see:</p>

<ul>
<li><a href="http://www.steveworkman.com/node-js/2012/installing-jsdom-on-windows/">http://www.steveworkman.com/node-js/2012/installing-jsdom-on-windows/</a></li>
<li><a href="https://github.com/atom/atom/issues/2435">https://github.com/atom/atom/issues/2435</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Griddle: A React.js grid]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/07/08/introducing-griddle-a-react-dot-js-grid/"/>
    <updated>2014-07-08T01:01:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/07/08/introducing-griddle-a-react-dot-js-grid</id>
    <content type="html"><![CDATA[<p>Many of the websites I have worked on have required a grid component. As I had been exploring <a href="http://facebook.github.io/react/">React.js</a> more it was made apparent that I was going to need a grid component for it to be a viable my projects. There are many great solutions for displaying grid data with React but many seem to rely  on writing wrappers for components using jQuery or other libraries. While these solutions work well, I was hoping to render entirely with React. Additionally, I wanted to avoid a dependency on libraries like jQuery / Angular if I could help it.</p>

<p>I decided to try my hand at writing a grid to fit my requirements &#8211; the outcome is <a href="http://dynamictyped.github.io/Griddle/">Griddle - a simple React.js grid</a>.</p>

<h2>What it is</h2>

<p><a href="http://dynamictyped.github.io/Griddle/">Griddle</a> is a configurable grid component for React.js. The main philosophy is that the grid should render quickly, contain a lot of the expected functionality and be simple to use without dictating how the rest of the code is structured. While Griddle is far from perfect I&#8217;m pretty happy with the initial outcome.</p>

<h2>Where it&#8217;s going</h2>

<p>As stated above Griddle is far from finished. There are a lot of things that need to be cleaned up and a good deal of functionality that needs to be added. The high-level road map is as follows:</p>

<ol>
<li><strong>Tests</strong> - The initial version of this grid was mostly a coding session or two followed by some basic clean-up. Griddle should be sustainable and tests are big part of that.</li>
<li><strong>Metadata</strong> - Griddle should allow a more advanced column order, locked columns, column width, etc. Currently with the column order, for example, an initial order is set but hiding and showing the column will display this column at the end of the list.</li>
<li><strong>Additional User-configuration</strong> - The user should be able to drag columns around.</li>
<li><strong>Better sub-grid support</strong> - Currently sub-grids are constrained to have the same columns as the parent and are only one-level deep. Sub-grids should be able to have entirely different columns than the parent and should be able to be nested. Finally, sub-grids should be able to be loaded from the server.</li>
<li><strong>More responsive options</strong> - Columns should have an optional priority. When the grid gets below a certain size, some columns should drop off depending on the priority. Additionally there should be the option to stack certain columns when a grid gets below a specific size.</li>
<li><strong>Streaming Data</strong> - Similar to one result page per request, there should be an option to allow the grid to get the initial page and stream the rest of the data behind the scenes.</li>
</ol>


<h2>Conclusion</h2>

<p>So that is basically <a href="http://dynamictyped.github.io/Griddle/">Griddle</a>. The priority of the road-map items could change but that is the current order. Please <a href="http://dynamictyped.github.io/Griddle/">check it out</a> and submit issues for anything you run into :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying out ReactJS with the Marvel API]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/05/26/trying-out-reactjs-with-the-marvel-api/"/>
    <updated>2014-05-26T18:29:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/05/26/trying-out-reactjs-with-the-marvel-api</id>
    <content type="html"><![CDATA[<p>I&#8217;ve recently started looking into <a href="http://facebook.github.io/react">ReactJS</a> (Facebook&#8217;s front-end JavaScript library) for building web UIs. React has an interesting philosophy about how the UI should function and be defined. First off, while many frameworks have an entire system for interacting with the server, routing, etc, React is just the View portion (in a MV* application). Second, React does not employ 2-way data binding. Instead, it uses a one-way data flow where data is maintained in the parent items and is manually shared to its child components. Finally, React uses a Virtual DOM which they say helps with performance (I cannot speak to this first-hand but it seems logical &#8211; <a href="http://www.forbes.com/sites/quora/2013/06/18/how-is-facebooks-react-javascript-library/">see here for more on React&#8217;s performance</a> from someone who can speak more authoritatively on this).</p>

<p>One other thing that jumped out at me about React is how they recommend you build your UI. According to the documentation, you should start out with a design/mock-up and build a static version of the application. Once the static version is complete, figure out which components are available and how data should flow. Finally, toss your real data into your UI. See <a href="http://facebook.github.io/react/docs/thinking-in-react.html">Thinking in React</a> for more information on this.</p>

<h2>The App</h2>

<p>I generally like to have a goal in mind when learning a new language or framework (this goal doesn&#8217;t necessarily have to be useful). It was determined that working with the Marvel API would be a good way to test the framework since I wouldn&#8217;t have to write a fake API first &#8211; plus it seemed fun :)</p>

<p>The application should let a user search through the Marvel characters API and allow for the assembling of a team. The team members can later be removed from the list. We&#8217;re keeping it pretty simple for this example (wire-frame below).</p>

<blockquote><p><strong>Disclaimer</strong>: This was my first <em>quick</em> foray into using React. There is likely a better way to do some of the things I will be walking through here. Additionally, I know almost nothing about comic books so please don&#8217;t laugh that you can build a &#8220;Hero Team&#8221; out of heroes and villains, etc. (<a href="http://en.wikipedia.org/wiki/Comic_Book_Guy">worst example ever</a>).</p></blockquote>

<p><img src="http://ryanlanciaux.github.com/files/reactMockupFull.png" /></p>

<h2>Setup</h2>

<p>Before we really get going, we need to perform some initial, setup tasks. As a side note, if you want to skip all this and head right to the code &#8211; it&#8217;s available <a href="https://github.com/ryanlanciaux/react-test">here</a>.</p>

<ol>
<li>Obtain a Marvel API key at <a href="http://developer.marvel.com/">http://developer.marvel.com/</a></li>
<li>Add some version of Localhost to the referrers section on the Marvel website (we will need this for testing).</li>
<li>Create some jQuery methods for interacting with the Marvel Character&#8217;s API (see <a href="http://developer.marvel.com">developer.marvel.com</a> for more on the specifics of the API).</li>
<li>Add your public key as a JavaScript field named key. Something like <code>window.key = "___________"; //this is your public key</code></li>
<li>Create an HTML page and load the required scripts/styles</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link href="http://ryanlanciaux.github.com//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" rel="stylesheet"&gt;
</span><span class='line'>&lt;link href="styles/site.css" rel="stylesheet"&gt;
</span><span class='line'>&lt;script src="http://fb.me/react-0.10.0.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="http://fb.me/JSXTransformer-0.10.0.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>Notice we are including the React files. Also of note, for this example we&#8217;re simply loading everything from the CDN&#8217;s without a local fallback.</p>

<h2>Determine Component Architecture</h2>

<p>Taking a look at the wire-frame included above, we want to come up with what React components we will need. Each component should be responsible for it&#8217;s own content so there should ideally be little overlap. Additionally, as mentioned above, we are using a one-way data flow &#8211; we want to design our components as children of a main component.</p>

<ul>
<li><strong>HeroBox</strong>: HeroBox is the container for everything we will be creating with React (the Search / Search Results / Current team). If we take a look at our wire-frame, it consists of pretty much everything but the header section.</li>
<li><strong>Hero</strong>: This is the individual Hero item. <br /><img src="http://ryanlanciaux.github.com/files/hero.png" /><br /></li>
<li><strong>HeroList</strong>: A list of the possible HeroItems (this is the left side of the HeroBox).</li>
<li><strong>HeroForm</strong>: The search form. <br /><img src="http://ryanlanciaux.github.com/files/heroForm.png" /><br /></li>
<li><strong>CurrentTeam</strong>: The container for all of the Heroes / Villains in our current team. <br /><img src="http://ryanlanciaux.github.com/files/currentTeam.png" /><br /></li>
<li><strong>CurrentTeamItem</strong>: An individual Hero/Villain partial that will be displayed in our CurrentTeam container. <br /><img src="http://ryanlanciaux.github.com/files/currentTeamItem.png" /><br /></li>
</ul>


<p> Since HeroBox is the parent of all the other components, it will be the component that owns the state of our application. That is, everything will get its data from HeroBox and will write back to HeroBox if it needs to change the data.</p>

<h2>React Components</h2>

<p>We will need to start out by creating an intial React Component. To do that we can simply say <code>var someComponent = React.createClass({ ... });</code>. This React class, can contain custom methods / properties or override some of the <a href="http://facebook.github.io/react/docs/component-specs.html">default React methods</a>. One of these default methods is the <strong>render()</strong> method which will build the DOM elements for the component. In our example we will be using <a href="http://facebook.github.io/react/docs/jsx-in-depth.html">JSX</a> as the output of our Render method. JSX is simply a JavaScript XML syntax transform &#8211; what that means for us is that we can practically write HTML as the output of a render method. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var someComponent = React.createClass({
</span><span class='line'>  render: function(){
</span><span class='line'>  return(
</span><span class='line'>      &lt;h1&gt;Hello&lt;/h1&gt;
</span><span class='line'>  )
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>When <em>someComponent</em> is rendered it would <em>unsurprisingly</em> write out <code>&lt;h1&gt;Hello&lt;/h1&gt;</code> to the document. This is a bit basic for our example but the concept is necessary.</p>

<h2>HeroBox</h2>

<p>The HeroBox will be the first component we create because all of the other components will obtain it&#8217;s data through it. We will be spending the most time on this component because most of the React-specific <em>stuff</em> is occuring here (the code for this component is posted in its entirety while we will just highlight the interesting parts of the other components).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var HeroBox = React.createClass({
</span><span class='line'>  loadHeroes: function(){
</span><span class='line'>      getCharacters().then(function(data){
</span><span class='line'>          this.setState({data:data.data.results});
</span><span class='line'>      }.bind(this));
</span><span class='line'>  },
</span><span class='line'>  loadHeroByName: function(name){
</span><span class='line'>      getCharacters("?nameStartsWith=" + name).then(function(data){
</span><span class='line'>          this.setState({data: data.data.results, currentTeam: this.state.currentTeam});
</span><span class='line'>      }.bind(this));
</span><span class='line'>  },
</span><span class='line'>  addToTeam: function(item){
</span><span class='line'>      this.state.currentTeam.push(item);
</span><span class='line'>      this.setState({data:this.state.data, currentTeam: this.state.currentTeam});
</span><span class='line'>  },
</span><span class='line'>  getInitialState: function(){
</span><span class='line'>      return{ data: [], currentTeam: []};
</span><span class='line'>  },
</span><span class='line'>  delete: function(item){
</span><span class='line'>      this.state.currentTeam.splice(item, 1);
</span><span class='line'>      this.setState({data: this.state.data, currentTeam: this.state.currentTeam})
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function(){
</span><span class='line'>      this.loadHeroes();
</span><span class='line'>      //this.loadHeroByName("Ajaxis");
</span><span class='line'>  },
</span><span class='line'>  render: function(){
</span><span class='line'>      return(
</span><span class='line'>          &lt;div className="heroBox row"&gt;
</span><span class='line'>              &lt;div className="col-md-8"&gt;
</span><span class='line'>                  &lt;HeroForm onSearchSubmit={this.loadHeroByName} onCancel={this.loadHeroes}/&gt; 
</span><span class='line'>                  &lt;HeroList data={this.state.data} addToTeam={this.addToTeam} /&gt; 
</span><span class='line'>              &lt;/div&gt;
</span><span class='line'>              &lt;div className="col-md-4 teamWrapper"&gt;                
</span><span class='line'>                  &lt;CurrentTeam data={this.state.currentTeam} delete={this.delete} /&gt;
</span><span class='line'>              &lt;/div&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>      )
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>loadHeroes</strong>: method for obtaining a list of heroes starting at the first location in the Marvel API (if we were including pagination, this call would be used for browse functionality). Take special note of the <strong>setState</strong> method. We are using this method to trigger the UI updates (<a href="http://facebook.github.io/react/docs/component-api.html#setstate">see React documentation on setState</a> for more information)</li>
<li><strong>loadHeroByName</strong>: Calls our jQuery method for interacting with the Marvel data with a given hero name</li>
<li><strong>addToTeam</strong>: Adds a record to the current team State and calls setState (see description on setState).</li>
<li><strong>getInitialState</strong>: Define the initial state of the component &#8211; <a href="http://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html">be careful with this method on non-root components</a></li>
<li><strong>delete</strong>: Remove a given item (by index) from the current team and re-render the component.</li>
<li><strong>componentWillMount</strong>: This is a method that is invoked immediately before the rendering occurs. This is one of the methods I was a little iffy about as far as how I&#8217;m using it but it seems okay due to the demos.</li>
<li><strong>render</strong>: The render method is simply the JSX representation of how we want to render this component. You may notice we&#8217;re using some elements that are not valid DOM elements, such as HeroForm / HeroList / CurrentTeam. These are elements we will be defining below. The attributes on the elements are how we are passing the properties from the HeroBox to the rest of the components.</li>
</ul>


<h2>HeroList</h2>

<p>With this component we want to parse through the list of data from HeroBox and create a Hero component for each item. Additionally, this component should serve as the middle man between events on the HeroComponent and the HeroBox component.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var HeroList = React.createClass({
</span><span class='line'>  addToTeam: function(item){
</span><span class='line'>      //basically a passthru
</span><span class='line'>      this.props.addToTeam(item);
</span><span class='line'>  },
</span><span class='line'>  render: function(){
</span><span class='line'>      var that = this; 
</span><span class='line'>      var nodes = this.props.data.map(function(hero, index){
</span><span class='line'>          return &lt;Hero key={index} name={hero.name} thumbnail={hero.thumbnail} description={hero.description} addToTeam={that.addToTeam}&gt;&lt;/Hero&gt;;
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>      return &lt;div className="heroList"&gt;{nodes}&lt;/div&gt;
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>In this component we are using <code>this.props.____</code> to access properties that were passed in from the render method on HeroBox. The render method of HeroBox contains <code>&lt;HeroList data={this.state.data} addToTeam={this.addToTeam} /&gt;</code> &#8211; this means we have this.props.addToTeam and this.props.data as available options here. The <strong>render</strong> function may look a little strange but it is basically iterating through our list of items and returning a Hero component for each one.</p>

<h2>Hero</h2>

<p>As we saw above, the parent component of this item defines what properties we have available. Since the Hero item is rendered as <code>&lt;Hero key={index} name={hero.name} thumbnail={hero.thumbnail} description={hero.description} addToTeam={that.addToTeam}&gt;&lt;/Hero&gt;</code>, we have key, name, thumbnail, description and an addToTeam method available on the object&#8217;s <code>props</code>. The Hero component is mostly just rendering out the properties, however, it is also handling button clicks.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Hero = React.createClass({
</span><span class='line'>  ...
</span><span class='line'>  handleClick: function(){
</span><span class='line'>      var image = this.getImage();
</span><span class='line'>      this.props.addToTeam({name: this.props.name, image: image })
</span><span class='line'>  },
</span><span class='line'>  render: function(){
</span><span class='line'>      return (
</span><span class='line'>          &lt;div className="hero col-md-3"&gt;
</span><span class='line'>              ...
</span><span class='line'>                  &lt;button type="button" className="addToTeam btn btn-primary" onClick={this.handleClick}&gt;Add To Team&lt;/button&gt;
</span><span class='line'>              ...
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>      );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s happening when a user clicks on the &#8220;Add to Team&#8221; button is the onClick method, handleClick is called. From there, the handleClick method calls the addToTeam method from the HeroList which calls the addToTeam method on the HeroBox. The HeroBox method runs the <code>setState</code> function so our UI is kept up-to-date. This may seem like a lot of work to update the UI but its nice how clear and non-magical this is.</p>

<h2>HeroForm</h2>

<p>Similar to Hero, we&#8217;re mostly calling functions back on the HeroBox from this Component. We will call loadHeroByName (which is what is performing our search against the API) when the user submits the form and loadHeroes when the user presses cancel (for the sake of example &#8211; there is not a lot of the standard logic that should go on in reseting form states, etc).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var HeroForm = React.createClass({
</span><span class='line'>  handleSubmit: function(){
</span><span class='line'>      var name = this.refs.name.getDOMNode().value.trim();
</span><span class='line'>      this.props.onSearchSubmit(name);
</span><span class='line'>      this.refs.name.getDOMNode().value = '';
</span><span class='line'>      return false;
</span><span class='line'>  },
</span><span class='line'>  handleCancel: function(){
</span><span class='line'>      this.props.onCancel();
</span><span class='line'>  },
</span><span class='line'>  render: function(){
</span><span class='line'>      return (
</span><span class='line'>          &lt;form className="searchForm row form-inline" onSubmit={this.handleSubmit}&gt;
</span><span class='line'>                  &lt;input type="text" className="form-control" placeholder="Enter a Hero name" ref="name" /&gt;
</span><span class='line'>
</span><span class='line'>                  &lt;input type="submit" value="Search" className="btn btn-primary" /&gt;
</span><span class='line'>
</span><span class='line'>                  &lt;button type="button" className="btn" onClick={this.handleCancel}&gt;Clear Results&lt;/button&gt;
</span><span class='line'>          &lt;/form&gt;
</span><span class='line'>      );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>This is all pretty standard to what we&#8217;ve seen so far except for the <code>getDOMNode()</code> and <code>this.refs</code> in the handleSubmit function. These statements are allowing us to interact with the data in the form. For more on this, <a href="http://facebook.github.io/react/docs/working-with-the-browser.html">see React&#8217;s documentation on the subject</a>.</p>

<h2>CurrentTeam / CurrentTeamItem</h2>

<p>We are not going to go into detail on the Team Components &#8211; they are simply using the same techniques we&#8217;ve already encountered on the other Components. Please <a href="https://github.com/ryanlanciaux/react-test">check out the project on GitHub</a> for the code.</p>

<h2>Finishing Up</h2>

<p>Now that the components are created we need to write out our HeroBox component to the page.</p>

<p>index.html</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;body&gt;
</span><span class='line'>  ...
</span><span class='line'>  &lt;div id="content" class="container-fluid"&gt;&lt;/content&gt;
</span><span class='line'>  &lt;script type="text/jsx" src="scripts/heroes.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;/body&gt;</span></code></pre></td></tr></table></div></figure>


<p>heroes.js</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>React.renderComponent(
</span><span class='line'>  &lt;HeroBox /&gt;, document.getElementById('content')
</span><span class='line'>);
</span></code></pre></td></tr></table></div></figure>


<p>Be sure to <a href="https://github.com/ryanlanciaux/react-test">take a look at code for this project</a> on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Express Applications]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/05/25/debugging-express-applications/"/>
    <updated>2014-05-25T16:18:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/05/25/debugging-express-applications</id>
    <content type="html"><![CDATA[<p>Coming from the .NET world, I&#8217;ve grown accustomed to great debugging tools. My initial Node setup didn&#8217;t have a very good way to debug an application (outside of using <code>DEBUG=express:* node .bin/www</code>) and I wanted to resolve that. I had heard about <a href="https://github.com/node-inspector/node-inspector">node-inspector</a> in several places and decided to give that a shot.</p>

<p>Node-inspector is a visual interface for the Node debugger that looks like just Chrome Developer Tools for Chrome / Opera. I use the Developer Tools quite frequently for debugging front-end code so it is a natural fit for my work-flow.</p>

<p><img src="http://ryanlanciaux.github.com/files/node-inspector.png" /></p>

<h2>Setup</h2>

<p>The guide on <a href="https://github.com/node-inspector/node-inspector">the github page for node-inspector</a> is pretty good but I wanted to run through how I&#8217;m using it on my Express 4 application.</p>

<p>First, like the guides suggest, I ran <code>npm install -g node-inspector</code>. From there, I tried running the application (<code>node --debug ./bin/www</code>) and then running <code>node-debug</code>. Unfortunately, I mixed up node-debug and node-inspector a little bit and the inspector was throwing an <code>EADDRINUSE</code> error. Thankfully, <a href="http://peterlyons.com/">Peter Lyons</a> quickly answered <a href="http://stackoverflow.com/questions/23797931/node-inspector-with-express-4">a question I put on StackOverflow</a> which straightened out the issue I was encountering. Apparently, you either want to use <code>node --debug ___</code> and <code>node-inspector</code> or just <code>node-debug ____</code> &#8211; using <code>node --debug _____.js</code> with the inspector&#8217;s <code>node-debug</code> option was causing conflicts as both were starting node&#8217;s debugger.</p>

<p>Starting the application with <code>node --debug ./bin/www</code> followed by <code>node-inspector</code> (in another terminal) worked painlessly. I could open up the inspector website (generally <code>localhost:8080/debug?port=5858</code>) and set breakpoints. When navigating through my node application, the code execution was stopping at the breakpoint and I could debug from there using the standard Chrome Developer tools.</p>

<h2>Forever</h2>

<p>One final thing I wanted to do is get all this working with Forever as it would be nice to be able to make changes to my code with out needing to restart the node server. I have encountered some weirdness with forever and node-inspector but it does seem to work okay. Starting forever generally doesn&#8217;t fire up the debugger. After some searching, I came across <a href="http://stackoverflow.com/questions/12819268/node-js-debugging-with-node-inspector-and-forever-js">this StackOverflow post</a> that suggests you have to run a custom command to start forever in debug mode <code>forever -w -c 'node --debug' ./bin/www</code>. From there, I could navigate to both the site I was trying to debug and the inspector page and all seemed to work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running ssh-agent on Windows]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/05/15/running-ssh-agent-on-windows/"/>
    <updated>2014-05-15T03:41:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/05/15/running-ssh-agent-on-windows</id>
    <content type="html"><![CDATA[<p>There was one thing I didn&#8217;t mention in my <a href="http://ryanlanciaux.github.io/blog/2014/05/13/vagrantfile-for-octopress/">previous post about running Octopress on a Vagrant machine</a> &#8211; in the machine&#8217;s current state (with Windows as a host machine), we cannot deploy the site with a <code>rake deploy</code> command. The reason for this is we don&#8217;t have an ssh key available to the Vagrant box.</p>

<p>While we could create new keys on the Vagrant machine, this kind of seems to defeat part of the purpose of using Vagrant (setting up a development environment with little manual interaction). Additionally, we could simply share our host machine&#8217;s ~/.ssh folder with our vagrant machine but this also seems kind of messy.</p>

<p>Thankfully, there is a pretty simple way to get everything working to where we can use the host machine&#8217;s ssh key and that is through an <a href="http://en.wikipedia.org/wiki/Ssh-agent">ssh-agent</a>. In the Vagrantfile we setup as part of the <a href="http://ryanlanciaux.github.io/blog/2014/05/13/vagrantfile-for-octopress/">previous post</a>, we are already giving our machine access to the ssh-agent with the following command <code>config.ssh.forward_agent = true</code>. The only problem with this forward_agent property is that you may not have an ssh-agent running (especially if you are on Windows). There are a couple things we can do to get around that&#8230;</p>

<ol>
<li><strong>Install <a href="http://msysgit.github.io/">msysgit</a> and manually say <code>eval `ssh-agent`</code> followed by <code>ssh-add</code> (assuming your keys are id_rsa/id_rsa.pub)</strong> &#8211; You&#8217;d connect to your Vagrant machine after running this command and would be able to deploy, however, there are a couple of problems with this method. First off, this is a manual process you&#8217;d have to remember every time you wish to deploy. Another issue is that you have an ssh-agent process that you need to remember to get rid of down the road.</li>
<li><strong>Use msysgit and .profile</strong> &#8211; Adding the <code>eval `ssh-agent`</code> and <code>ssh-add</code> to the .profile would allow us to automate the process of starting the agent when loading the terminal. That being said, using the <code>eval</code> script would be bad &#8211; it would create a new ssh-agent each time a new shell is loaded. Thankfully, <a href="https://help.github.com/articles/working-with-ssh-key-passphrases#auto-launching-ssh-agent-on-msysgit">GitHub has shared a solution to this problem</a>.</li>
<li><strong>Use <a href="https://github.com/dahlbyk/posh-git">posh-git</a> with PowerShell</strong> &#8211; Posh-git is a series of PowerShell scripts for git integration. Upon installing posh-git and running PowerShell, I was presented with my ssh key&#8217;s password prompt. After entering the password, it started an ssh-agent and everything was good-to-go.</li>
</ol>


<p>I generally stick with option 2, as I am not much of a PowerShell user. It&#8217;s definitely nice to have the PowerShell option available as a backup, however. One thing I would really like to explore a bit more is making this working with <a href="http://bliker.github.io/cmder/">cmder</a>. I could not get the agent to run when using cmder (without having it launch PowerShell) but I did not spend much time on that yet.</p>

<h4>Testing it out</h4>

<p>If you want to test to make sure that your ssh-agent is running and getting shared to your vagrant machine&#8230;</p>

<ol>
<li>Fire up your terminal (either PowerShell with posh-git or msysgit with the github agent code added to your .profile)</li>
<li>Navigate to the directory where your Vagrantfile is and <code>vagrant up</code> followed by <code>vagrant ssh</code></li>
<li>Once ssh&#8217;d into your vagrant machine type <code>ssh -T git@github.com</code></li>
</ol>


<p>If everything is working you should see:<br /><br /> <code>Hi _______! You've successfully authenticated, but GitHub does not provide shell access.</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantfile for Octopress]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/05/13/vagrantfile-for-octopress/"/>
    <updated>2014-05-13T03:59:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/05/13/vagrantfile-for-octopress</id>
    <content type="html"><![CDATA[<p>I&#8217;ve recently started using <a href="http://www.vagrantup.com">Vagrant</a> for managing lightweight virtual machines for various projects. Vagrant is awesome because it allows you to:</p>

<ol>
<li><strong>Configure an environment for a specific project / application</strong> &#8211; For instance, if you want to install Ruby / Rails and a mongo database, you can set up an environment specifically for your project. You don&#8217;t need to worry about messing up another project&#8217;s requirements because each project can have it&#8217;s own!</li>
<li><strong>Save system resources</strong> &#8211; Vagrant starts Virtual Machines in headless mode (no UI) &#8211; the VM I&#8217;m using for my blog (which we&#8217;ll see more in a second) is only using 512megs of RAM and it runs without any hiccups. Additionally, these VMs take virtually no hard-drive space when you are not using them. When you&#8217;re done using a machine, you can remove it, keeping only the Vagrantfile and provision scripts. Your scripts can be run later on and your environment will be setup exactly as it was the last time it was configured.</li>
<li><strong>Edit all your code from your host machine</strong> &#8211; Often times with development VMs, I would treat the machine as if it was a standalone computer (installing vim / sublime, etc. etc). Using Vagrant, however, you can edit the code on the host machine and simply run/serve the application with the VM (it should be noted you definitely could do this with standard VMs &#8211; it&#8217;s just a bit easier with Vagrant). As a developer who is pretty OCD about IDE configuration, this is a fantastic feature.</li>
<li><strong>Easily share machines with other developers</strong> &#8211; Vagrant cuts down on the need for sharing giant virtual machines between different computers / developers. You can simply share your Vagrantfile and provision scripts and you have the same environment on any machine (assuming that machine can run Vagrant, etc.).</li>
</ol>


<h2>Vagrant File</h2>

<p>We are going to walk through the Vagrantfile and provisioning script I&#8217;m using for my blog. First off, the <a href="https://docs.vagrantup.com/v2/vagrantfile/index.html">Vagrantfile</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VAGRANTFILE_API_VERSION = "2"
</span><span class='line'>
</span><span class='line'>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
</span><span class='line'>  config.vm.box = "precise64"
</span><span class='line'>  config.vm.box_url = "http://files.vagrantup.com/precise64.box"
</span><span class='line'>
</span><span class='line'>  config.vm.provision :shell, :path =&gt; "bootstrap.sh"
</span><span class='line'>  config.vm.network :private_network, ip: '10.0.33.36'
</span><span class='line'>  config.ssh.forward_agent = true
</span><span class='line'>
</span><span class='line'>  config.vm.synced_folder "../octopress", "/home/vagrant/octopress", create: false
</span><span class='line'>
</span><span class='line'>  config.vm.provider :virtualbox do |vb|
</span><span class='line'>    vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root", "1"]
</span><span class='line'>    vb.customize ["modifyvm", :id, "--memory", "512"]
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>Vagrant files are written in Ruby, however, you don&#8217;t need to know Ruby to use Vagrant &#8211; the configuration code is nothing too crazy. Lets walk through some of the more interesting parts of the Vagrantfile&#8230;</p>

<h4>Box settings</h4>

<p>The first thing we are doing in the configuration block is defining the type of machine to use. Precise64 is a 64bit Ubuntu 12.04 machine. I generally use this one but there are <a href="https://vagrantcloud.com/discover/featured">quite a few to choose from</a> in the <a href="https://vagrantcloud.com/">Vagrant Cloud</a>. With <code>box_url</code> we are describing where this box can be downloaded if it is not currently available on the host machine.</p>

<h4>Provision settings</h4>

<p>Next, we are telling Vagrant to run this <code>bootstrap.sh</code> as part of it&#8217;s <a href="https://docs.vagrantup.com/v2/provisioning/index.html">provisioning</a> process. Provisioning is where we will define what the environment should look like so it&#8217;s not just a base Ubuntu machine. You can provision a Vagrant box with Chef, Puppet, etc. but for this post I&#8217;m just using a shell script (still learning Chef). We will take a look at this shell script in a little bit.</p>

<h4>Network / Sync settings</h4>

<p>Following the vm configuration, we are setting up the networking and folder options for our box. The <code>vm.network</code> property is stating that when there is a webserver running on this machine, we can access it on our host browser at &#8216;10.0.33.36&#8217;. The <code>synced_folder</code> property is stating that the folder <code>octopress</code> living in a sibling folder to the folder that the Vagrantfile is contained in should be accessible within the virtual machine as <code>~/octopress</code>. The octopress directory already exists (and has it&#8217;s own github repo) so we do not want to recreate it.</p>

<h4>Additional settings</h4>

<p>Finally, in the provider block toward the bottom of this script we are adjusting the memory used and setting a property that allows us to use symbolic links.</p>

<h2>Provisioning Script</h2>

<p>As we talked about earlier, the provisioning script is what differentiates our box from a base Ubuntu machine. In the case of this example it&#8217;s basically just a shell script.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env bash
</span><span class='line'>HOME="/home/vagrant"
</span><span class='line'>PROV_FILE=.vagrant_provision.lock
</span><span class='line'>
</span><span class='line'>#inspired by https://github.com/junwatu/nodejs-vagrant 
</span><span class='line'>if [ -f $PROV_FILE ];
</span><span class='line'>then
</span><span class='line'>    echo "Already Provisioned"
</span><span class='line'>else
</span><span class='line'>    touch $PROV_FILE
</span><span class='line'>
</span><span class='line'>    sudo apt-get install -y git make
</span><span class='line'>
</span><span class='line'>    git clone https://github.com/sstephenson/rbenv.git $HOME/.rbenv
</span><span class='line'>
</span><span class='line'>    # Install ruby-build
</span><span class='line'>    git clone https://github.com/sstephenson/ruby-build.git $HOME/.rbenv/plugins/ruby-build
</span><span class='line'>
</span><span class='line'>    $HOME/.rbenv/bin/rbenv install 1.9.3-p194
</span><span class='line'>    $HOME/.rbenv/bin/rbenv global 1.9.3-p194
</span><span class='line'>
</span><span class='line'>    #Add rbenv to PATH
</span><span class='line'>    echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; $HOME/.profile
</span><span class='line'>    echo 'eval "$(rbenv init -)"' &gt;&gt; $HOME/.profile
</span><span class='line'>
</span><span class='line'>    #own rbenv as the vagrant user
</span><span class='line'>    sudo chown -Rf vagrant $HOME/.rbenv
</span><span class='line'>
</span><span class='line'>    #don't like doing this
</span><span class='line'>    sudo su - vagrant -c "rbenv rehash && cd /home/vagrant/octopress/ && gem install bundler"
</span><span class='line'>    sudo su - vagrant -c "cd /home/vagrant/octopress/ && bundle install"
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m not going to spend as much time on this as it&#8217;s not too interesting if you know shell scripting (and there is probably a better way to do a lot of this).</p>

<ol>
<li>Check to see if the provision lock exists. If it does it means our box is already setup and we shouldn&#8217;t configure our environment again.</li>
<li>If the lock file does not exist we are create it</li>
<li>Get git and make</li>
<li>Install rbenv and Ruby <code>1.9.3-p194</code> (that was the version I was using when my blog was on an actual machine so I&#8217;ll stick with that for now)</li>
<li>modify the path so it contains the Ruby defined in rbenv</li>
<li>Change the ownership of the .rbenv file from the privileged user (sudo) to vagrant &#8211; if you don&#8217;t do this, you will not be able to use the gem files when you ssh into the box later on.</li>
<li>Rehash rbenv so it uses the right Ruby version and install the bundler gem as the vagrant user</li>
<li>Install the files required to run octopress (as it says in the comment, I really don&#8217;t like the sudo su - vagrant commands)</li>
</ol>


<h2>Running the machine</h2>

<p>Once everything is setup, you can simply say <code>vagrant up</code>. Vagrant will then run through the Vagrantfile and the script to configure the environment. Once the configuration is complete, you can say <code>vagrant ssh</code>. Once you are ssh&#8217;d into the box, you can <code>cd octopress</code>, <code>rake generate</code>, <code>rake preview</code>, etc (see <a href="http://octopress.org/docs/blogging/">Octopress docs</a> for more information). When finished, <code>vagrant halt</code> will shut down the VM. If you need to destroy the box, you simply can type <code>vagrant destroy</code>. Removing the machine does not remove the code in the synced folders or the Vagrant scripts. Running <code>vagrant up</code> will configure the machine all over again and your code will still be intact where you left off.</p>

<h2>Finishing up</h2>

<p>I have tossed this <a href="https://github.com/ryanlanciaux/octopress-vagrant">Octopress Vagrantfile and provision script on github</a>. For more information on Vagrant, check out the <a href="http://www.vagrantup.com">Vagrant site</a>. Of further note, I referenced <a href="https://github.com/junwatu/nodejs-vagrant">junwatu&#8217;s Vagrant script</a> when writing the Octopress script. Please feel free to <a href="https://github.com/ryanlanciaux/ryanlanciaux.github.com">submit pull requests</a> for any corrections that you may have to this content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Microsoft Surface]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2014/03/06/-thoughts-on-microsoft-surface/"/>
    <updated>2014-03-06T20:15:00-05:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2014/03/06/-thoughts-on-microsoft-surface</id>
    <content type="html"><![CDATA[<p>Last fall, I won a Microsoft Surface 2 as part of the <a href="http://www.surfaceremixproject.com">Surface Remix Project contest</a>. I always love to win gadgets but this was a bit more exciting to me as I am a hobby music producer (<a href="http://www.soundcloud.com/ryanlanciaux">shameless link to some of my music</a>). I was initially planning on using the device for the music app/remix blade, however, after I had used the device a little over a week, I realized that there was a lot more to the Surface than just another device trying to make waves in the tablet market. I have since purchased a Surface Pro (1) and am really liking it.</p>

<p>I want to be very clear here I&#8217;m stepping into a boundary that could make me sound very fanboy-ish. While I am generally a bit more fond of Microsoft technology than some (.NET developer by trade), I try to avoid using a gadget / language / whatever simply based on the brand. To put it another way, I am more of a fan of technology than any particular company &#8211; I like the advances that each competitor brings because overall it helps the consumer.</p>

<p>Now that I said all that, I want to discuss my initial thoughts on what I think Microsoft is bringing to the table with the Surface and where I hope that&#8217;s going&#8230;</p>

<h2>Hybrid OS</h2>

<p>Initially upgrading to Windows 8 at home had resulted in me switching to Ubuntu until 8.1 came out. My reaction may have been a bit extreme, but I really was not a fan of how many aspects of the OS. While 8.1 is a ton better, seeing the operating system on the tablet really made Windows feel a bit more like it was likely intended. On my desktop I found myself using the Windows UI (or UI style formerly known as Metro) as a task launcher and using mostly desktop apps. On the Surface, however, I kind of wish I could turn desktop mode off entirely. That wouldn&#8217;t workout so well on the Pro, but it would be cool if that could be kind of a combination of the two &#8211; just Windows UI when no keyboard/dock is attached and more like the desktop when docked.</p>

<p>I had always hoped that there would be a day when I would have one device that could function as my computer and phone (I guess kind of like the Ubuntu phone concept). While the Surface is not entirely where I would like this type of technology to end up, it is definitely a step in the right direction. As I said before, if it were entirely up to me, there would be some changes I would make to Windows 8 but it seems a step closer to making this a reality (still Windows phones would need to run the same OS &#8211; not just same kernel).</p>

<h2>Niche Markets</h2>

<p>As stated above, I won the Surface as part of a contest that Microsoft was having to promote their yet-to-be released Remix Cover. I think it&#8217;s fantastic that music producers are given a first-class experience in the Surface world. The remix blade feels like it&#8217;s a natural part of the Surface &#8211; not an add-on. I would love to see more things like this for the device.</p>

<h2>Mobility</h2>

<p>The weight of the Surface pales in comparison to any laptop I&#8217;ve ever owned &#8211; it&#8217;s almost an after-thought to pack it up and bring it when traveling. The type cover feels more natural to me than any iPad keyboard I&#8217;ve used and works well to protect the screen.</p>

<p>Combined with a dock, such as the <a href="http://www.amazon.com/Plugable-UD-3900-Universal-2048x1152-Ethernet/dp/B00ECDM78E">Plugable UD-3900</a>, I can run multiple monitors and hook up to a real keyboard / mouse. When I need to head out, I simply can unplug the dock from the USB port and use it as a tablet or laptop.</p>

<h2>Processor</h2>

<p>The Surface 2 felt pretty zippy but the fact that it ran Windows RT was a bit of a negative for me as a developer. The pro one has been fast enough so far for most web development tasks I&#8217;ve thrown at it. I wouldn&#8217;t necessarily play VM Inception with it but it&#8217;s worked out okay for me so far. I imagine the 2 with 8gb of RAM would fair even better.</p>

<h2>Wrapping Up</h2>

<p>I started this post in November &#8211; left it for a couple months and finally decided to finish it. My feelings toward the Surface are still the same. The pro seems like a fantastic developer machine (if you are in the windows realm) and the ability to have a specialized experience for niche applications makes it a great little device.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fake popovers for Angular-xeditable]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/10/16/fake-popovers-for-angular-xeditable/"/>
    <updated>2013-10-16T21:58:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/10/16/fake-popovers-for-angular-xeditable</id>
    <content type="html"><![CDATA[<p>I was recently working on a project with <a href="http://www.angularjs.org">AngularJS</a> and <a href="http://vitalets.github.io/x-editable/">xeditable</a> (if you&#8217;re not familiar, xeditable is an awesome library for inline editing). There is an <a href="http://vitalets.github.io/angular-xeditable/">Angular version of xeditable</a> but the popover editing functionality is not implemented yet (it&#8217;s in the roadmap). Instead of using the original version of xeditable and implementing custom directives or try to add the popover functionality to the project, I decided to see if I could make the popover using just CSS &#8211; this happened to be more inline with my timeframe.</p>

<p>Take a look at the original (non-angular) popover:</p>

<p><img src="http://ryanlanciaux.github.com/files/original_xeditable.png" /></p>

<p>Starting out, I noticed that clicking on the link of an xeditable element was showing an input element (and buttons) in a form and hiding the link. To mimic the popover, the link and the form should both be visible when the form was activated, however, the form should be positioned a bit higher than the link. Working with a forked version of <a href="http://jsfiddle.net/NfPcH/3/">vitalets&#8217; jsfiddle</a> example, I wrapped the initial links in <code>&lt;span class='item-wrapper'&gt;&lt;/span&gt;</code> &#8211; from there, I edited the link and the form&#8217;s CSS as follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-wrapper</span> <span class="nt">a</span><span class="p">{</span>
</span><span class='line'>    <span class="c">/* make the link always show up */</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.item-wrapper</span><span class="p">{</span>
</span><span class='line'>    <span class="c">/* make absolutely positioned children constrained to this box*/</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.item-wrapper</span> <span class="nt">form</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="m">#FFF</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#AAA</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">/* half the width */</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span> <span class="m">-110px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">7px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">top</span><span class="o">:</span> <span class="m">-55px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">220px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">z-index</span><span class="o">:</span> <span class="m">101</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://ryanlanciaux.github.com/files/xeditable_popover_1.png" /></p>

<p>It&#8217;s a step in the right direction, however, doesn&#8217;t really look exactly like we want. To get the triangle to show up below the pop-up, I thought it would be good to use the <a href="http://css-tricks.com/snippets/css/css-triangle/">technique for creating a triangle on css-tricks</a> as an :after filter (please <a href="http://css-tricks.com/snippets/css/css-triangle/">check the link</a> for more info on that because how it works is a bit outside the scope of this post).</p>

<p><img src="http://ryanlanciaux.github.com/files/xeditable_popover_2.png" /></p>

<p> This works but it looks funny because the popover has a border but the triangle is just a solid color. Additionally, we cannot just toss a border on the :after filter since we&#8217;re using the border to create the triangle. What I ended up doing is using a :before filter with a width of 10px and a background color the same as the border color followed by an :after filter 1px narrower and the same background color as the popover.</p>

<p> <img src="http://ryanlanciaux.github.com/files/xeditable_popover_3.png" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-wrapper</span> <span class="nt">form</span><span class="nd">:before</span><span class="p">{</span>
</span><span class='line'>    <span class="k">content</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border-left</span><span class="o">:</span> <span class="m">10px</span> <span class="k">solid</span> <span class="k">transparent</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border-right</span><span class="o">:</span> <span class="m">10px</span> <span class="k">solid</span> <span class="k">transparent</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border-top</span><span class="o">:</span> <span class="m">10px</span> <span class="k">solid</span> <span class="m">#AAA</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span><span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">bottom</span><span class="o">:-</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span><span class="m">100px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.item-wrapper</span> <span class="nt">form</span><span class="nd">:after</span><span class="p">{</span>
</span><span class='line'>    <span class="k">content</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border-left</span><span class="o">:</span> <span class="m">9px</span> <span class="k">solid</span> <span class="k">transparent</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border-right</span><span class="o">:</span> <span class="m">9px</span> <span class="k">solid</span> <span class="k">transparent</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border-top</span><span class="o">:</span> <span class="m">9px</span> <span class="k">solid</span> <span class="m">#FFF</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span><span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">bottom</span><span class="o">:-</span><span class="m">9px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span><span class="m">101px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a <a href="http://jsfiddle.net/EWcUw/4/">jsfiddle of the example available here</a>. A few things to note&#8230; I am only using this with the Angular-xeditable dropdowns and text boxes so the other controls may or may not work. Additionally, I added some javascript (not in the examples) to hide any visible popovers when displaying a new one. I was running into some issues displaying multiple (or displaying the same one multiple times).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning AngularJS III: Routes]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/08/17/learning-angularjs-iii-routes/"/>
    <updated>2013-08-17T19:47:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/08/17/learning-angularjs-iii-routes</id>
    <content type="html"><![CDATA[<p>So far we&#8217;ve covered the basics of <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">using AngularJS to interact with RESTful services</a> and <a href="http://ryanlanciaux.github.io/blog/2013/06/19/angularjs-filtering-slash-ordering/">Filtering / Ordering views in AngularJS</a>. Using <a href="http://docs.angularjs.org/tutorial/step_07">AngularJS Routes</a>, we are going to add a bit of structure to this example app.</p>

<p>If you have not already, please take a look at <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">Part 1</a> and <a href="http://ryanlanciaux.github.io/blog/2013/06/19/angularjs-filtering-slash-ordering/">Part 2</a> as we will be working with the app we have started there&#8230;</p>

<p>First off, lets open our index.ejs file. As you may notice this file is an unstructured mess. We want to break apart the controllers and templates into their own files so our architecture of our demo app is a bit more clear. When we&#8217;re done, we will have the following files:</p>

<ul>
<li><strong>app.js</strong> under /assets/js/angular/</li>
<li><strong>controllers.js</strong> under /assets/js/angular/</li>
<li><strong>list.html</strong> under /public/templates/ &#8211; there is <a href="https://github.com/balderdashy/sails/issues/273">a better way to use Angular with Sails</a>, however, for the sake of example this is okay</li>
<li><strong>detail.html</strong> under /public/templates/</li>
<li><strong>edit.html</strong> under /public/templates/</li>
</ul>


<h2>app.js</h2>

<p>App.js is where we&#8217;re storing our module definition (that we added in <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">Part 1</a>), our factory defintion and our routes. The factory is exactly the same as before except we&#8217;ve added an update endpoint.</p>

<h4>Resource</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">foodApp</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;Food&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$resource&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$resource</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$resource</span><span class="p">(</span><span class="s1">&#39;/food/:id&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s1">&#39;@id&#39;</span><span class="p">},</span> <span class="p">{</span> <span class="nx">update</span><span class="o">:</span> <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;PUT&#39;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default, the <a href="http://docs.angularjs.org/api/ngResource.$resource">Angular resource module</a> has get/save/query/remove/delete methods but no update. What&#8217;s more, we want to make sure we are using a PUT method for storing our modified food items so Sails knows that we&#8217;re trying to modify an existing record. Thankfully, we can add custom actions (as you may have noticed above) by simply adding a hash after our route parameters object in the resource defintion like so <code>{ update: {method:'PUT' } }</code>. Since this is just a hash, you can add as many definitions as you would like (e.g. <code>{ update: {method: 'PUT' }, somethingelse: {method: 'DELETE'} }</code>).</p>

<h4>Routing</h4>

<p>In <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">Part 1</a> we are showing/hiding a form based on a $scope variable on our controller. While this works, it may be a bit cleaner to use routing and separate our views by their function. Routing in Angular is pretty straight forward &#8211; especially if you have routing experience in other frameworks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">foodApp</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$routeProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/food&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;/templates/list.html&#39;</span><span class="p">,</span> <span class="nx">controller</span><span class="o">:</span> <span class="nx">FoodController</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/food/edit/:id&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;/templates/edit.html&#39;</span><span class="p">,</span> <span class="nx">controller</span><span class="o">:</span> <span class="nx">FoodController</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/food/create&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;/templates/edit.html&#39;</span><span class="p">,</span> <span class="nx">controller</span><span class="o">:</span> <span class="nx">FoodController</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/food/:id&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;/templates/detail.html&#39;</span><span class="p">,</span> <span class="nx">controller</span><span class="o">:</span> <span class="nx">FoodController</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span><span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/food&#39;</span><span class="p">});</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the URL matches one of the route values, the visitor will be directed to the template and given controller (you will notice that we&#8217;re using the same controller for all our routes). Additionally, the routes that have :id will have a route parameter of id available in the controller (more on this later). If none of the routes are matched we default to /food. We won&#8217;t focus too much on the views becuase they are mostly the same as our old index.ejs, however, they are available in <a href="https://gist.github.com/ryanlanciaux/6257478">the gist created for this post</a>.</p>

<h2>controllers.js</h2>

<p>Our controller is mostly the same as before except we&#8217;re no longer maintaining which page we&#8217;re showing. The whole controller is available as <a href="https://gist.github.com/ryanlanciaux/6257478">a gist</a> however, some of the more interesting parts are as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">$routeParams</span><span class="p">.</span><span class="nx">id</span><span class="p">){</span>
</span><span class='line'> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentFood</span> <span class="o">=</span> <span class="nx">Food</span><span class="p">.</span><span class="nx">get</span><span class="p">({</span><span class="nx">id</span><span class="o">:</span> <span class="nx">$routeParams</span><span class="p">.</span><span class="nx">id</span><span class="p">});</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentFood</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Food</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">food</span> <span class="o">=</span> <span class="nx">Food</span><span class="p">.</span><span class="nx">query</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is checking for the route parameter that we are setting in our route &#8211; if it&#8217;s there, we get the individual food item with that ID. When the parameter is not there, we get all the food items to be displayed in a list (and initialize a Food item for creates).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">addFood</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">currentFood</span><span class="p">.</span><span class="nx">id</span> <span class="o">&amp;&amp;</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentFood</span><span class="p">.</span><span class="nx">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">Food</span><span class="p">.</span><span class="nx">get</span><span class="p">({</span><span class="nx">id</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentFood</span><span class="p">.</span><span class="nx">id</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">food</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">food</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentFood</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">food</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentFood</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">food</span><span class="p">.</span><span class="nx">percentRemaining</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentFood</span><span class="p">.</span><span class="nx">percentRemaining</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">food</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentFood</span><span class="p">.</span><span class="nx">quantity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">food</span><span class="p">.</span><span class="nx">$update</span><span class="p">({},</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>              <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span> <span class="s2">&quot;/&quot;</span> <span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentFood</span><span class="p">.</span><span class="nx">$save</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span> <span class="s2">&quot;/&quot;</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this method we are adding our food item or updating an existing food item. We start by checking the food item&#8217;s id. If it has an id, we go ahead and get the server version and update the properties with the form values. If it doesn&#8217;t have an id, we save the food item and redirect to the list view. Food.$save is calling the built in resource action where Food.$update is calling the custom resource action we created above &#8211; both of these actions then interact with the Sails API on the server.</p>

<h2>Wrapping Up</h2>

<p>So there we have it. While this is still an example app &#8211; it&#8217;s way more organized than the previous iterations. The code files are available in <a href="https://gist.github.com/ryanlanciaux/6257478">this gist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning AngularJS II : Filtering / Ordering]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/06/19/angularjs-filtering-slash-ordering/"/>
    <updated>2013-06-19T20:38:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/06/19/angularjs-filtering-slash-ordering</id>
    <content type="html"><![CDATA[<p>Last time I wrote about some basic AngularJS functionality for interacting with a RESTful API. We&#8217;re going to continue where with left off with our food inventory app to add some filtering/sorting . <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">Check out the first post</a> if you missed it, as we will be depending heavily on what is covered there.</p>

<h3>Filtering</h3>

<p>Lets say we want to search through our food inventory for something specific like oranges. We first need to open the index.ejs (that we created in <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">Part 1</a>) and add the following right before our table definition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;filter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;filter&quot;</span><span class="nt">&gt;</span>filter:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;filter&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;filter&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The div isn&#8217;t entirely necessary, however, it could be useful for applying styling (it&#8217;s pretty ugly as it sits). Now that the filter definition is complete, we need to go back to our repeater definition and pipe the results through the filter as so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;f in food | filter:filter&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a console in your project directory &#8211; fire off a <code>sails lift</code> command, navigate to http://localhost:1337 in your browser of choice and start typing in the filter input box. You&#8217;ll notice that all of the model bound columns are available to be filtered (e.g. entering fruit displays only food items that were classified as fruit &#8211; typing in orange shows only any records with orange in the name etc. etc.). Also, you may notice that this is not case sensitive.</p>

<h3>Ordering</h3>

<p>Now lets add the ability to sort the data in our table. If we followed the basic example on the <a href="http://docs-angularjs-org-dev.appspot.com/api/ng.filter:orderBy">AngularJS docs site</a>, we could simply create a sort variable that we would modify in the table headers and reference in the orderBy of our repeater. The value of the sort property should be the names of one of our columns.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;th&gt;&lt;a</span> <span class="na">ng-click=</span><span class="s">&quot;sort=&#39;name&#39;&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/a&gt;&lt;/th&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;f in food | filter:filter | orderBy:sort&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To handle ascending / descending we could do something like this (however, as we&#8217;ll see in a minute this may not be an ideal solution):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;th&gt;&lt;a</span> <span class="na">ng-click=</span><span class="s">&quot;sort=&#39;name&#39;; reverse=!reverse&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/a&gt;&lt;/th&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;f in food | filter:filter | orderBy:sort:reverse&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, the reverse value would be shared across all columns. That means that if I click the &#8216;Name&#8217; column and sort it descending and then click the &#8216;Type&#8217; column &#8211; we will notice that it is sorting in ascending order. The problem is that the shared reverse variable is never getting reset when sorting by a different column.</p>

<p>To get around this, lets move our sorting functionality to the controller so we&#8217;re not duplicating a lot of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">sort</span> <span class="o">=</span> <span class="s2">&quot;name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">reverse</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">changeSort</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">sort</span> <span class="o">==</span> <span class="nx">value</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">reverse</span> <span class="o">=</span> <span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">reverse</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">sort</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">reverse</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re creating the sort and reverse properties that are referenced in the orderBy of the repeater (<code>orderBy:sort:reverse</code>) as well as a function to manage whether to change the sort column or simply change the value of reverse. If you click the &#8216;Name&#8217; column several times, the sort will not change, however, the reverse value will (which wil trigger ascending / descending order).</p>

<p>Next we need to change our table headers so they call this function when clicked. As before, the column&#8217;s property name will be passed as a parameter to this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;th&gt;&lt;a</span> <span class="na">ng-click=</span><span class="s">&quot;changeSort(&#39;name&#39;)&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/a&gt;&lt;/th&gt;</span>
</span><span class='line'><span class="nt">&lt;th&gt;&lt;a</span> <span class="na">ng-click=</span><span class="s">&quot;changeSort(&#39;type&#39;)&quot;</span><span class="nt">&gt;</span>Type<span class="nt">&lt;/a&gt;&lt;/th&gt;</span>
</span><span class='line'><span class="nt">&lt;th&gt;&lt;a</span> <span class="na">ng-click=</span><span class="s">&quot;changeSort(&#39;expiration&#39;)&quot;</span><span class="nt">&gt;</span>Expiration<span class="nt">&lt;/a&gt;&lt;/th&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point fire up the page and see how everything is looking. The sorting / filtering is all working as intended. I have created <a href="https://gist.github.com/ryanlanciaux/5822098">a gist of the newly created index.ejs</a> file that you can <a href="https://gist.github.com/ryanlanciaux/5822098">view here</a>. In the next part of this series we will look at routes and editing our data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note to self: escape LiquidTags with Jekyll raw tag plugin]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/06/05/note-to-self-escape-liquidtags-with-jekyll-raw-tag-plugin/"/>
    <updated>2013-06-05T21:57:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/06/05/note-to-self-escape-liquidtags-with-jekyll-raw-tag-plugin</id>
    <content type="html"><![CDATA[<p>When reviewing <a href="http://ryanlanciaux.github.io/blog/2013/06/04/learning-angularjs/">my recent AngularJS post</a>, I noticed that none of my template display bindings were showing up. LiquidTags use the same {{  }} style bindings as AngularJS (and was trying to render my Angular expressions as LiquidTags). Luckily, there is a <a href="https://gist.github.com/phaer/1020852">jekyll plugin called &#8216;raw tag&#8217;</a> for rendering data that you do not want interpreted as a LiquidTag / etc. Simply place this raw content between {% raw %} and {% endraw %}</p>

<p>For more information <a href="http://stackoverflow.com/questions/3426182/how-to-escape-liquid-template-tags">check out this Stackoverflow Post</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning AngularJS]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/06/04/learning-angularjs/"/>
    <updated>2013-06-04T21:39:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/06/04/learning-angularjs</id>
    <content type="html"><![CDATA[<p>I have recently been playing around with some of the client-side MV_ frameworks. I have avoided Angular for quite some time because I was not a fan of using ng-click (etc.) HTML attributes to fire off js events. The more I&#8217;ve used the framework, however, the less of an issue that has been to me.</p>

<p>As noted in a <a href="http://ryanlanciaux.github.io/blog/2013/05/09/less-alt-plus-tab-with-sublimetext/">previous post</a>, another framework I have been using a bit is <a href="http://www.sailsjs.com">SailsJS</a>. While this post is not about Sails, I am using it as the REST endpoints of the AngularJS application.</p>

<p>First off, sails needs to be installed. Assuming you have <a href="https://github.com/joyent/node/wiki/Installation">node installed</a>, just <code>npm install -g sails</code> From there, create a new sails project from the command line <code>sails new foodinventory</code> and cd into that directory. Once in the directory, create a model <code>sails generate model food</code> and a controller so we can access the model <code>sails generate controller food</code>. Open up api/models/Food.js and edit the file to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*---------------------</span>
</span><span class='line'><span class="cm">  :: Food</span>
</span><span class='line'><span class="cm">  -&gt; model</span>
</span><span class='line'><span class="cm">---------------------*/</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">attributes</span>  <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;STRING&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;STRING&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">expiration</span><span class="o">:</span> <span class="s1">&#39;DATE&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">quantity</span><span class="o">:</span> <span class="s1">&#39;STRING&#39;</span><span class="p">,</span> <span class="c1">//for sake of example, ignore that this is a string...</span>
</span><span class='line'>    <span class="nx">percentRemaining</span><span class="o">:</span> <span class="s1">&#39;INTEGER&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now go back to the console and type <code>sails lift</code>. You should be presented with a cool ascii sailboat and a message stating that sails is running on port 1337. Fire up your browser and head to http://localhost:1337 &#8211; just to see the initial sails page. From there, navigate to /food &#8211; this should return an empty array, which is the JSON representation what&#8217;s currently stored in our food list.</p>

<p>Add a couple of records to the Food list by visiting http://localhost:1337/food/create?name=Spinach&amp;type=Vegetable&amp;expiration=2013-06-20&amp;quantity=16oz&amp;percentRemaining=75 and /food/create with other properties. Now that you have a couple records in, lets start with the Angular stuffs.</p>

<p>  <em>Please note that there are better ways to utilize the sails framework to write single page applications with Angular (see <a href="https://github.com/balderdashy/sails/issues/273">here</a> and <a href="https://github.com/balderdashy/sails/issues/205">here</a>) &#8211; For the sake of example we&#8217;re setting everything up in very few files.</em></p>

<p>Open up your Layout file which is located in <code>views/layout.ejs</code> and add the following includes before <code>&lt;%- assets.js() %&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular-resource.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here we&#8217;re going to edit the default view. We can keep the same div structure as the sails default view but we&#8217;re stripping out all the CSS and other content &#8211; we should have something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   Food Inventory
</span><span class='line'> <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'> <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Some Content Goes Here
</span><span class='line'> <span class="nt">&lt;/div&gt;</span>
</span><span class='line'> <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span> <span class="na">href=</span><span class="s">&quot;http://sailsjs.com&quot;</span> <span class="na">class=</span><span class="s">&quot;copyright&quot;</span><span class="nt">&gt;</span>Built with Sails.js<span class="nt">&lt;/a&gt;</span>
</span><span class='line'> <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Upon refreshing this page, you can see that not much is going on; we should totally do something about that. First, we want to add the ng-app directive to the html tag in layout.ejs (it should now look like <code>&lt;html ng-app="foodApp"</code>). This <a href="http://docs.angularjs.org/tutorial/step_00">bootstraps</a> (not to be confused with <a href="http://www.getbootstrap.com">Bootstrap</a>) our application, stating that the html tag is the Angular root. We could techincally add this directive to any element but the html tag is as good as any for this example.</p>

<p>Next, we&#8217;re going to flip back to our index view (under /home) and add an Angular factory for our food app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foodApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;foodApp&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngResource&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foodApp</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;Food&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$resource&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$resource</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$resource</span><span class="p">(</span><span class="s1">&#39;/food/:id&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s1">&#39;@id&#39;</span><span class="p">});</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the factory, we can now access Query / Get / Save / Delete functions off our Food model (the REST API under /food). By using the :id, we are stating that we can alternatively pass an id (e.g. /Food/1).</p>

<p>You may notice that we&#8217;re injecting &#8216;ngResource&#8217; into our module &#8211; this is the Angular library (that we&#8217;ve already included in the layout page) that is used to interact with our sails REST API that we created above.</p>

<p>Now that we can access the data, lets add a controller.. The controller is responsible for managing the state of the application. There are plenty of tutorials that deal with <a href="http://docs.angularjs.org/tutorial/step_02">how to create a controller in Angular</a>, so lets just jump right in..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">FoodController</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">Food</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">food</span> <span class="o">=</span> <span class="nx">Food</span><span class="p">.</span><span class="nx">query</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">isFormActive</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">toggleForm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">isFormActive</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">isFormActive</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">isFormActive</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">editableFood</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Food</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">addFood</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">editableFood</span><span class="p">.</span><span class="nx">$save</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">food</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">editableFood</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">toggleForm</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our controller is just a plain old javascript function that takes $scope (used to sync data between controller and the view) and our Food item as parameters. The very first line in the controller is obtaining a list of all of the Food items (essentially the same as going to /Food and copying the JSON) and storing it in the $scope.food array.</p>

<p>The isFormActive property is used to determine whether or not we want to show the create form. The toggle form action is used to change this active property as well as create a new model object to use with the form.</p>

<p>Finally, the addFood method posts the newly created food item to our API. This editableForm &#8216;pattern&#8217; was something I first came across on <a href="http://odetocode.com/blogs/scott/archive/2013/02/21/forms-with-angularjs.aspx">K. Scott Allen&#8217;s website</a>.</p>

<p>Now lets write some HTML that utilizes this controller&#8230; We&#8217;ll start this process by specifying that the #content area in our layout page corresponds to the FoodController with the ng-controller directive &#8211; Our modified #content tag should look like this: <code>&lt;div id="content" ng-controller="FoodController"&gt;</code>. All of our $scope.___ properties are now available to use in expressions within the #content div.</p>

<p>Next we&#8217;re going to add a repeater to show the food items.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Type<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Expiration<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Quantity<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Percent Remaining<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;f in food&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>{{f.name}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>{{f.type}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>{{f.expiration}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>{{f.quantity}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;progress&quot;</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">&quot;bar&quot;</span> <span class="na">style=</span><span class="s">&quot;width: {{f.percentRemaining}}%&quot;</span><span class="err">&lt;/</span><span class="na">td</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tr element inside the tbody is where we are telling angular to loop through all our food items. We are going to reference the current item as f and display all of its properties. You may notice in the last column that we&#8217;re using Twitter Bootstrap&#8217;s progress bar in addition to an Angular expression. The expressions in Angular can be quite powerful and seem to have a bit more functionality than many of the other templating frameworks. Go ahead and refresh your page to see how everything is looking so far.</p>

<p>Next we want to add the ability to add new items from this page</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;toggleForm()&quot;</span> <span class="na">ng-hide=</span><span class="s">&quot;isFormActive&quot;</span><span class="nt">&gt;</span>Add One<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;toggleForm()&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;isFormActive&quot;</span><span class="nt">&gt;</span>Hide Form<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  <span class="nt">&lt;form</span> <span class="na">ng-show=</span><span class="s">&quot;isFormActive&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hr</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>Name:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;editableFood.name&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;type&quot;</span><span class="nt">&gt;</span>Type:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;type&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;editableFood.type&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;expiration&quot;</span><span class="nt">&gt;</span>Expiration<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;expiration&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;editableFood.expiration&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;quantity&quot;</span><span class="nt">&gt;</span>Quantity<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;quantity&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;editableFood.quantity&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;percentRemaining&quot;</span><span class="nt">&gt;</span>Percent Remaining<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;percentRemaining&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;editableFood.percentRemaining&quot;</span> <span class="nt">/&gt;&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span4 text-right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;toggleForm()&quot;</span><span class="nt">&gt;</span>Cancel<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>            <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;addFood()&quot;</span><span class="nt">&gt;</span>Add<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a bit more going on with the Angular directives in this snippet of HTML. First, you&#8217;ll notice that several of our elements have ng-click directives; these directives are calling functions on the controller when the user clicks on element. In addition to the click functions, we are using the ng-show / ng-hide directives to show or hide content based on a given condition. For instance, the button for &#8216;Add One&#8217; is only visible when isFormActive = false and the &#8216;Hide Form&#8217; button is only visible when isFormActive = true.</p>

<p>We are using the ng-model directive to bind a form element to $scope.editableFood (which is being created in the toggleForm method of the FoodController). Clicking on &#8216;Add&#8217; will call the addFood method on the FoodController &#8211; this will post the new record to our /Food/Create and push the value into our $scope.food array. The UI will update automatically because Angular $scope properties are observed by default.</p>

<p>So far, we&#8217;ve created a simple REST API and added / retrieved data from this API with AngularJS. The full contents of the modified files are available <a href="https://gist.github.com/ryanlanciaux/5711426">over here</a>. I plan on writing another part in this series where we will focus on searching / ordering / filtering the displayed data and in-place editing on the food list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Less alt+tab with SublimeText]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/05/09/less-alt-plus-tab-with-sublimetext/"/>
    <updated>2013-05-09T20:40:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/05/09/less-alt-plus-tab-with-sublimetext</id>
    <content type="html"><![CDATA[<p><a href="http://ryanlanciaux.github.io/blog/2013/04/13/sublime-text-on-ubuntu/">Back in April</a>, I jokingly lamented not having the ability to run a console from directly within SublimeText &#8211; apparently I did not do quite enough searching. There is a plug-in called <a href="https://github.com/wuub/SublimeREPL">SublimeREPL</a> that lets you run ruby, node and a whole slew of other environments from within SublimeText.</p>

<p><strong>To install SublimeREPL</strong>:</p>

<ol>
<li>Fire up the Command Palette (ctrl+shift+p) and type &#8220;Package Control: Install Package&#8221;</li>
<li>Search for and install SublimeREPL</li>
<li>Restart SublimeText</li>
</ol>


<p>If you are using rbenv, (I assume something similar applies to rvm as well) you will need to edit your SublimeREPL settings (Preferences -> Package Settings -> SublimeREPL -> Settings - User) so your rbenv ruby is used.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "default_extend_env": { "PATH": "{HOME}/.rbenv/shims:{PATH}" }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Finally, SublimeREPL uses <a href="https://github.com/pry/pry">pry</a> to power the ruby REPL. If you don&#8217;t have the pry gem installed, you will need to install it prior to running ruby console.</p>

<p>Now that everything is setup you can launch a REPL and test code before you  add it to your project, use rake thru shell, etc. One note, I would be careful about running servers &#8211; I was messing around with <a href="http://www.sailsjs.com">one of my favorite new frameworks</a> and realized I could not shut down the server (this occurs with servers and other long running operations). That being said, SublimeREPL is definitely a plug-in I would recommend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tig: Great git command line tool]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/05/07/tig-great-git-command-line-tool/"/>
    <updated>2013-05-07T20:28:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/05/07/tig-great-git-command-line-tool</id>
    <content type="html"><![CDATA[<p>I have been using git on most of my hobby projects for quite some time. I prefer the command line when possible, however, it is nice to visualize certain operations. <a href="http://sourcetreeapp.com/">SourceTree</a> and Github&#8217;s <a href="http://windows.github.com">Windows</a> and <a href="http://mac.github.com">Mac</a> apps are very nice but I&#8217;m mostly on Ubuntu when using git. <a href="https://www.kernel.org/pub/software/scm/git/docs/gitk.html">Gitk</a> is a decent option but sometimes tools such as this and the aforementioned GUI tools can be a bit over-the-top for a command line junkie such as myself. Something between the command line and full blown windowed GUI applications would be great; this seems to be where <a href="http://jonas.nitro.dk/tig/">tig</a> comes in.</p>

<p><a href="http://jonas.nitro.dk/tig/">Tig</a> has been around for a little while now but it just came across my radar via <a href="http://blogs.atlassian.com/2013/05/git-tig/">an excellent post on Atlassian&#8217;s blog by Antoine Büsch</a> (as a side note, it&#8217;s kinda cool to see this post on Atlassian&#8217;s blog considering they make SourceTree). Antoine listed some compelling reasons for using tig but I was sold when he related tig to vim versus other development tools :)</p>

<p>To install tig on Ubuntu just open up a command line and run the obvious <code>apt-get install tig</code>. From there, navigate to a directory under source control (with git) and type <code>tig</code> &#8211; you should see the main log view. Pressing &#8216;h&#8217; will bring up help to see a list of available commands. You can stage changes by pressing &#8216;c&#8217;. For a more exhaustive list of commands, check out <a href="http://jonas.nitro.dk/tig/manual.html">the official tig manual</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ikea Standing Desk]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/05/03/ikea-standing-desk/"/>
    <updated>2013-05-03T21:02:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/05/03/ikea-standing-desk</id>
    <content type="html"><![CDATA[<p>Over the past several years, I have grown quite accustomed to using a standing desk at home (I have an adjustable Ergotron that I absolutely love). I decided it was about time to make the switch at work, however, I didn&#8217;t want to spend a lot of money on a desk. Thankfully, I had come across a <a href="http://iamnotaprogrammer.com/Ikea-Standing-desk-for-22-dollars.html">blog post by Colin Nederkoorn</a> on a standing desk he and a coworker built for $22. I like the design, however, I wanted more room for monitors. One of the comments on the blog led me to <a href="http://www.jinyoungkim.com/blog/2012/07/standing-desk/">Jinyoung Kim&#8217;s modification of the Ikea desk</a> which used a wider table than Colin&#8217;s design. I ultimately based my desk plans off Jinyoung&#8217;s design, since it allowed for multiple monitors, laptops and other gadgets.</p>

<p>The main components of the desk are as follows (they should cost about $45 total):</p>

<ul>
<li><a href="http://www.ikea.com/us/en/catalog/products/40104294/">LACK</a> coffee table &#8211; this is the main piece of the desk.</li>
<li><a href="http://www.ikea.com/us/en/catalog/products/10056987/#/20094347">EKBY JÄRPEN</a> shelf &#8211; for keyboard / mouse</li>
<li><a href="http://www.ikea.com/us/en/catalog/products/10136135/#/10136135">EKBY BJÄRNUM</a> brackets</li>
</ul>


<p><img src="http://ryanlanciaux.github.com/files/desk-setup.jpg" alt="" /></p>

<p>As noted on Jinyoung&#8217;s site, the shelf needs to be sawed down a bit to fit the dimensions of the coffee table. I like the brackets I used since it hides the rougher side of the shelf that was cut down. I would also echo his sentiment about using bolts to hold up the shelf as  they are sturdier than screws. Finally, as someone who has used standing desks for a couple years now I would HIGHLY recommend having a gel kitchen mat to stand on; especially if you&#8217;re over hardwood or concrete flooring.</p>
]]></content>
  </entry>
  
</feed>
