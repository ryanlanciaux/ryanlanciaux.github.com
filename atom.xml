<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan Lanciaux]]></title>
  <link href="http://ryanlanciaux.github.com/atom.xml" rel="self"/>
  <link href="http://ryanlanciaux.github.com/"/>
  <updated>2013-05-07T23:36:53-04:00</updated>
  <id>http://ryanlanciaux.github.com/</id>
  <author>
    <name><![CDATA[Ryan Lanciaux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tig: Great git command line tool]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/05/07/tig-great-git-command-line-tool/"/>
    <updated>2013-05-07T20:28:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/05/07/tig-great-git-command-line-tool</id>
    <content type="html"><![CDATA[<p>I have been using git on most of my hobby projects for quite some time. I prefer the command line when possible, however, it is nice to visualize certain operations. <a href="http://sourcetreeapp.com/">SourceTree</a> and Github&#8217;s <a href="http://windows.github.com">Windows</a> and <a href="http://mac.github.com">Mac</a> apps are very nice but I&#8217;m mostly on Ubuntu when using git. <a href="https://www.kernel.org/pub/software/scm/git/docs/gitk.html">Gitk</a> is a decent option but sometimes tools such as this and the aforementioned GUI tools can be a bit over-the-top for a command line junkie such as myself. Something between the command line and full blown windowed GUI applications would be great; this seems to be where <a href="http://jonas.nitro.dk/tig/">tig</a> comes in.</p>

<p><a href="http://jonas.nitro.dk/tig/">Tig</a> has been around for a little while now but it just came across my radar via <a href="http://blogs.atlassian.com/2013/05/git-tig/">an excellent post on Atlassian&#8217;s blog by Antoine Büsch</a> (as a side note, it&#8217;s kinda cool to see this post on Atlassian&#8217;s blog considering they make SourceTree). Antoine listed some compelling reasons for using tig but I was sold when he related tig to vim versus other development tools :)</p>

<p>To install tig on Ubuntu just open up a command line and run the obvious <code>apt-get install tig</code>. From there, navigate to a directory under source control (with git) and type <code>tig</code> &#8211; you should see the main log view. Pressing &#8216;h&#8217; will bring up help to see a list of available commands. You can stage changes by pressing &#8216;c&#8217;. For a more exhaustive list of commands, check out <a href="http://jonas.nitro.dk/tig/manual.html">the official tig manual</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ikea Standing Desk]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/05/03/ikea-standing-desk/"/>
    <updated>2013-05-03T21:02:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/05/03/ikea-standing-desk</id>
    <content type="html"><![CDATA[<p>Over the past several years, I have grown quite accustomed to using a standing desk at home (I have an adjustable Ergotron that I absolutely love). I decided it was about time to make the switch at work, however, I didn&#8217;t want to spend a lot of money on a desk. Thankfully, I had come across a <a href="http://iamnotaprogrammer.com/Ikea-Standing-desk-for-22-dollars.html">blog post by Colin Nederkoorn</a> on a standing desk he and a coworker built for $22. I like the design, however, I wanted more room for monitors. One of the comments on the blog led me to <a href="http://www.jinyoungkim.com/blog/2012/07/standing-desk/">Jinyoung Kim&#8217;s modification of the Ikea desk</a> which used a wider table than Colin&#8217;s design. I ultimately based my desk plans off Jinyoung&#8217;s design, since it allowed for multiple monitors, laptops and other gadgets.</p>

<p>The main components of the desk are as follows (they should cost about $45 total):</p>

<ul>
<li><a href="http://www.ikea.com/us/en/catalog/products/40104294/">LACK</a> coffee table &#8211; this is the main piece of the desk.</li>
<li><a href="http://www.ikea.com/us/en/catalog/products/10056987/#/20094347">EKBY JÄRPEN</a> shelf &#8211; for keyboard / mouse</li>
<li><a href="http://www.ikea.com/us/en/catalog/products/10136135/#/10136135">EKBY BJÄRNUM</a> brackets</li>
</ul>


<p><img src="http://ryanlanciaux.github.com/files/desk-setup.jpg" alt="" /></p>

<p>As noted on Jinyoung&#8217;s site, the shelf needs to be sawed down a bit to fit the dimensions of the coffee table. I like the brackets I used since it hides the rougher side of the shelf that was cut down. I would also echo his sentiment about using bolts to hold up the shelf as  they are sturdier than screws. Finally, as someone who has used standing desks for a couple years now I would HIGHLY recommend having a gel kitchen mat to stand on; especially if you&#8217;re over hardwood or concrete flooring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodreads status widget available on github]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/05/02/goodreads-status-widget-available-on-github/"/>
    <updated>2013-05-02T19:49:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/05/02/goodreads-status-widget-available-on-github</id>
    <content type="html"><![CDATA[<p><a href="http://www.goodreads.com">Goodreads</a> is currently one of my favorite sites; I love that I can see what my friends are reading and find new books to read based on their recommendations. Noticing that many other blog platforms have sidebar widgets (asides), I decided to create one for Octopress. The first thing I did was make sure I was not duplicating effort. Goodreads has some great <a href="http://www.goodreads.com/user/edit?tab=widgets">sidebar widgets</a>, however, I preferred to generate the aside in the standard <code>rake generate</code> process (as well as keep the same look-and-feel of the other asides).</p>

<p>The Goodreads API is pretty robust but I was a little concerned about the possibility of a user&#8217;s API key getting checked into github. Thankfully, Goodreads also provides an RSS feed for status updates &#8211; which seemed a bit safer to use for publicly available code (and with the RSS feed it&#8217;s not necessary to obtain an API key). I assumed that if someone didn&#8217;t want their status updates public via RSS, they probably wouldn&#8217;t be installing an aside to display their status.</p>

<p>I created an aside and a subsequent <a href="https://github.com/Shopify/liquid/wiki">liquid tags</a> plugin that grabbed and formatted the RSS data. I used REXML to process the xml because it wouldn&#8217;t require users to install additional gems. One thing I still need to figure out is how to pass data from the config.yml into the plugin via the aside. I realize I have access to the config properties via site.whatever  variables but I&#8217;m not entirely sure how to pass that info along to the tag plugin. Currently, the aside needs to be modified with the user&#8217;s Goodreads unique id and the max number of results to display. I noticed some others on the <a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">3rd party plugins list on the Octopress wiki</a> are doing the same thing, however, I would prefer to use the config file for the config data :P</p>

<p>All-in-all, it was pretty fun creating the plugin. If you use Octopress and would like to install the Goodreads plugin, <a href="https://github.com/ryanlanciaux/octo-goodreads-status">take a look at the github repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text on Ubuntu]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/04/13/sublime-text-on-ubuntu/"/>
    <updated>2013-04-13T18:42:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/04/13/sublime-text-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Recently, I have switched from Windows 8 to Ubuntu on my laptop. Since the primary function of my laptop is development I have spent some time tweaking the software installed to fit my workflow.</p>

<p>The main tool I am using for all my development is <a href="http://www.sublimetext.com/">Sublime Text</a>. I like Sublime Text for many reasons &#8211; it&#8217;s lightweight, great community, tons of plugins and most importantly, <strong>vim keybindings</strong>; needless to say, it&#8217;s pretty awesome.</p>

<p>To start with, I installed the package like so: <code>apt-get install sublime-text</code>. From there, I pretty much followed
<a href="http://blog.alexmaccaw.com/sublime-text">Alex MacCaw&#8217;s excellent post on Sublime Text</a>. Mentioned in the post, <a href="http://wbond.net/sublime_packages/package_control">Package Manager</a> is pretty much a must. As someone who has grown pretty dependent on ReSharper when doing .NET development, I find myself typing Ctrl + Shift + T to switch files (rather than the default Ctrl + P &#8211; which, to me, seems a little weird because doing that in different environments brings up print dialog)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ "keys": ["ctrl+shift+t"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} }</span></code></pre></td></tr></table></div></figure>


<p>Finally, since I will be writing most of my blog posts with Sublime Text (yea, this post about Sublime Text was written in Sublime Text :P), I installed <a href="https://github.com/revolunet/sublimetext-markdown-preview">Markdown Preview</a> through package control. If you notice the statement on the GitHub page, Linux users need to install a different version of Python to get the plugin to work. I wasn&#8217;t super comfortable changing Python just for installing the Markdown plugin. Thankfully, <a href="https://github.com/revolunet/sublimetext-markdown-preview/issues/27#issuecomment-11772098">one of the comments on the plugin&#8217;s GitHub</a> page has a pretty decent walkthrough on how to use pythonbrew to give Sublime Text the version of Python that the plugin needs (without necessarily using it throughout the system).</p>

<p>Now, I only wish there was a way to open up a console directly in Sublime Text &#8211; because alt tabbing to terminal is just so difficult.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to Octopress]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2013/04/06/moving-to-octopress/"/>
    <updated>2013-04-06T14:11:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2013/04/06/moving-to-octopress</id>
    <content type="html"><![CDATA[<p>Recently, it seems that the only time I&#8217;ve spent with my blog has been moving it to other platforms. Hopefully, that will change with the move to Octopress. Since this is mainly a programming / technical blog, I thought it would be great to host the blog with <a href="http://pages.github.com/">Github pages</a>.</p>

<p>The Octopress install was pretty simple.. I mostly just followed the steps on the <a href="http://octopress.org/docs/setup/">Octopress Setup page</a>:</p>

<ol>
<li>Install Ruby / rbenv</li>
<li>Install git</li>
<li>Clone the Octopress repo</li>
<li>Export posts from Wordpress</li>
<li>Convert the Wordpress xml file to Jekyll with <a href="https://github.com/theaob/wpXml2Jekyll">wpXml2Jekyll</a></li>
<li>rake generate / rake deploy / git commit origin source (from the examples)</li>
</ol>


<p>The part that gave me the most trouble was hiding legacy posts from the main page area. I wanted to keep some of the posts around for posterity but I didn&#8217;t want them to show up with any sort of prominence on the blog. To that end, I created a folder called &#8216;Legacy&#8217; and a folder within this newly created folder called &#8216;_posts&#8217;. From there, I moved the markdown versions of the posts into this folder. So far so good&#8230;</p>

<p>When I fired up the preview for Octopress, the blog was still loading all the legacy posts in the content area. I asked a question on <a href="http://stackoverflow.com/questions/15852698/octopress-custom-folder-for-old-posts">Stack Overflow</a> (that was subsequently shut down for not being programmy enough &#8211; whoops) and tried a couple other things until I stumbled upon <a href="http://arshad.github.io/blog/2012/05/10/recipe-hiding-posts-from-the-octopress-front-page/">this post</a> on Hiding Pages from Octopress. Making the suggested changes produced the results I was looking for. Mission Accomplished &#8211; for now. I may try to change the &#8216;Recent Posts&#8217; widget so it does not show legacy posts, however, that won&#8217;t be an issue when there is more content.</p>

<p>So, as of this post, I&#8217;ve used all Octopress for all of one new article but I really like the workflow; storing the posts in github is definitely an added benefit. Hopefully, I will continue writing beyond this post but I guess we will see.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gherkin style BDD testing in .NET]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2011/08/14/gherkin-style-bdd-testing-in-net/"/>
    <updated>2011-08-14T18:03:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2011/08/14/gherkin-style-bdd-testing-in-net</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Behavior_Driven_Development" target="_blank">Behavior Driven Development</a> is something that has interested me forquite awhile. I have constantly tried to write my tests as clear andconcise as possible but once I saw <a href="http://cukes.info/" target="_blank">Cucumber for Ruby</a> that became thenew standard for what I was trying to achieve in .NET. This is where<a href="http://specflow.org/" target="_blank">SpecFlow </a>comes in.<p>&nbsp;</p><p>SpecFlow is a BDD library for .NET that aimsto add testing capabilities that are similar to  <a href="http://cukes.info/" target="_blank">Cucumber</a> &#8211; that is,specifications are written in human readable Gherkin Format. From the<a href="http://specflow.org/" target="_blank">project site</a>:&nbsp;</p><blockquote>   <a href="http://specflow.org/" target="_blank">SpecFlow </a>aims at bridging the communication gap between domain experts   and developers by binding business readable behavior specifications to  the underlying implementation. <br /></blockquote><p>In theory, I really like that domain experts could write the specifications but I would be interested in seeing how that works out. </p><p><strong>So what exactly is this Gherkin format?</strong> </p><p>According to the <a href="http://wiki.github.com/aslakhellesoy/cucumber/gherkin" target="_blank">Gherkin project</a> on github, &#39;Gherkin is the language that Cucumber understands. It is a <a href="http://martinfowler.com/bliki/BusinessReadableDSL.html">Business Readable, Domain Specific Language</a> that lets you describe software&rsquo;s behaviour without detailing how that behaviour is implemented.&#39; In other words, its a common DSL for describing the required functionality for a given system.&nbsp;</p><p>This functionality is typically broken down by feature and each feature has a number of scenarios. A scenario is made up of 3 steps: GIVEN, WHEN and THEN (which seems to somewhat loosely correspond to Arrange, Act, Assert) and in a simplistic world, looks a little like this:</p><blockquote> GIVEN an admin user<br />   WHEN user requests top secret data<br />    THEN return the list of data <br /></blockquote>If you want to learn more about the Gherkin format check out <a href="http://www.engineyard.com/blog/2009/cucumber-introduction/" target="_blank">Engine Yard&#39;s Introduction to BDD with Cucumber by Dave Astels</a>  or <a href="http://wiki.github.com/aslakhellesoy/cucumber/given-when-then" target="_blank">Given-When-Then by Aslak Helles&oslash;y</a><p><strong>Quick Synopsis</strong></p><p>I&#39;ve recently started to move my blog over to a new server and a new root domain name; this could have an adverse affect on inbound links. In order to make sure this move was successful, I wanted to write an app to perform 301 redirects from the old URL to the new one. </p><p>There are a number of <a href="http://www.singingeels.com/Blogs/Nullable/2007/09/14/URL_ReWriting_The_Right_Way_Its_Easy.aspx" target="_blank">examples out there already for performing 301s</a> but I wanted to make sure I was testing the code &#8211; It seemed like a great opportunity to get a little more use out of SpecFlow. </p><p><strong>Initial Setup</strong></p><ol> <li><a href="http://specflow.org/getdoc/b647f699-ff30-48db-9bd5-db6dc45016e8/SpecFlowSetup_v1-1-0.aspx" target="_blank">Download and run the SpecFlow installer </a></li>   <li>Create a new Project and add a reference to SpecFlow and NUnit Framework</li>   <li>Add references to your mocking framework (this example is using <a href="http://code.google.com/p/moq/" target="_blank">Moq</a>)</li></ol><p><strong>On with the code!</strong> </p><p>After all the references are sorted out add a SpecFlow feature. <br /><br /><img src="http://ryanlanciaux.github.com/files/templates.gif" alt="" /><br /><br />The feature file is where we&#39;re going to define our specifications. I want to make sure that when a request is made to the old root it will get redirect to the new root url. So here is what the feature looks like initially:</p><blockquote style="width: 550px">    Feature: Redirection <br /> &nbsp;&nbsp;&nbsp; In order to not upset the google<br />   &nbsp;&nbsp;&nbsp; As a blogger who almost never has the time to blog<br /> &nbsp;&nbsp;&nbsp; I want to redirect my old url to my new one <br />   <br />  Scenario: Redirect root request<br />   &nbsp;&nbsp;&nbsp; Given I have entered a request to http://www.frickinsweet.com/ryanlanciaux.com<br /> &nbsp;&nbsp;&nbsp; And the old url is frickinsweet.com/ryanlanciaux.com<br />   &nbsp;&nbsp;&nbsp; And my new url is ryanlanciaux.com<br /> &nbsp;&nbsp;&nbsp; When the request is made<br />   &nbsp;&nbsp;&nbsp; Then the response url is http://www.ryanlanciaux.com<br />   &nbsp;&nbsp;&nbsp; And the response has a 301 in the status </blockquote><p>Notice that over in the Solution Explorer window you can expand the feature to reveal a .cs file. <br /><img src="http://ryanlanciaux.github.com/files/solution_explorer.gif" alt="" /><br />The class is an auto-generated file that updates when the .feature file is changed. We can run this through our test runner to watch it fail and get some extra information as to why it failed. </p><p>&nbsp;</p><p><img src="http://ryanlanciaux.github.com/files/test_runner.gif" alt="" /><br /><br />The tests are failing because there is no real definition to the scenario steps. We can almost directly copy and paste the output from the test runner dialog to a new class and fill in the code for the methods with standard unit testing code. Like I said before, I treat everything that is a GIVEN statement like an arrange section of a standard test; WHEN and THEN like act and assert respectively. </p><p>We could hardcode these tests to be specifically run against the urls specified in the scenario but this approach feels brittle and does not encourage code reuse. In order to use these these same steps in our future scenarios we can add wildcard mappings rather than specifying a single url in the attribute definition. The wildcard mapping is the familiar .<em> surrounded by parenthesis.<br /><br /></p><div class="code"><div style="background-image: none; background-repeat: repeat; background-attachment: scroll; -webkit-background-clip: initial; -webkit-background-origin: initial; background-color: white; font-family: 'Courier New'; font-size: 10pt; color: black; background-position: 0% 0%"><pre style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;24</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #2b91af">Given</span>(<span style="color: #a31515">@&quot;I have entered a request to (.</em>)&quot;</span>)]</pre></div><div style="background-image: none; background-repeat: repeat; background-attachment: scroll; -webkit-background-clip: initial; -webkit-background-origin: initial; background-color: white; font-family: 'Courier New'; font-size: 10pt; color: black; background-position: 0% 0%">&nbsp;</div></div><p>Also note now that when we have a wildcard mapping, we can pass in a parameter to that ScenarioStepDefinition</p><br /><div class="code"><div style="background-image: none; background-repeat: repeat; background-attachment: scroll; -webkit-background-clip: initial; -webkit-background-origin: initial; background-color: white; font-family: 'Courier New'; font-size: 10pt; color: black; background-position: 0% 0%"><pre style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">void</span> GivenIHaveEnteredARequestToHttpWww_Frickinsweet_ComRyanlanciaux_ComPage2(<span style="color: blue">string</span> url)</pre></div></div><br />The final result is a lot of code but it is broken down into small, reusable sections. <div class="code"><div style="background-image: none; background-repeat: repeat; background-attachment: scroll; -webkit-background-clip: initial; -webkit-background-origin: initial; background-color: white; font-family: 'Courier New'; font-size: 9pt; color: black; background-position: 0% 0%"><pre style="margin: 0px">[<span style="color: #2b91af">TestFixture</span>]</pre><pre style="margin: 0px">[<span style="color: #2b91af">Binding</span>]</pre><pre style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">RedirectTest</span></pre><pre style="margin: 0px">{</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">private</span> <span style="color: blue">string</span> oldUrl;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">private</span> <span style="color: blue">string</span> newUrl;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">private</span> <span style="color: blue">string</span> requestedUrl;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">private</span> <span style="color: blue">string</span> finalUrl;</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">private</span> <span style="color: #2b91af">RedirectHandler</span> <em>handler;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">private</span> <span style="color: #2b91af">Mock</span>&lt;<span style="color: #2b91af">HttpContextBase</span>&gt; mockContext;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">private</span> <span style="color: #2b91af">Mock</span>&lt;<span style="color: #2b91af">HttpResponseBase</span>&gt; mockResponse;</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af">Given</span>(<span style="color: #a31515">@&quot;I have entered a request to (.<em>)&quot;</span>)]</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">public</span> <span style="color: blue">void</span> GivenIHaveEnteredARequestToHttpWww_Frickinsweet_ComRyanlanciaux_ComPage2(<span style="color: blue">string</span> url)</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue">var</span> uri = <span style="color: blue">new</span> <span style="color: #2b91af">Uri</span>(url);</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; requestedUrl = url;</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; mockContext = <span style="color: blue">new</span> <span style="color: #2b91af">Mock</span>&lt;<span style="color: #2b91af">HttpContextBase</span>&gt;();</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; mockContext.Setup(x =&gt; x.Request.Url).Returns(uri);</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af">Given</span>(<span style="color: #a31515">@&quot;the old url is (.</em>)&quot;</span>)]</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">public</span> <span style="color: blue">void</span> GivenTheOldUrlIsFrickinsweet_ComRyanlanciaux_Com(<span style="color: blue">string</span> url)</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; oldUrl = url;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af">Given</span>(<span style="color: #a31515">@&quot;my new url is (.*)&quot;</span>)]</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">public</span> <span style="color: blue">void</span> GivenMyNewUrlIsRyanlanciaux_Com(<span style="color: blue">string</span> url)</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; newUrl = url;</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//now that we know both old and new url do a replace on httpcontexts&#39; url</span></pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//setup what we expect the called url to be and throw a callback on the mock so we can verify later</span></pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; mockResponse = <span style="color: blue">new</span> <span style="color: #2b91af">Mock</span>&lt;<span style="color: #2b91af">HttpResponseBase</span>&gt;();</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; mockResponse.SetupProperty(x =&gt; x.Status);</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; mockResponse.Setup(x =&gt; x.AddHeader(<span style="color: #a31515">&quot;Location&quot;</span>, requestedUrl.Replace(oldUrl, newUrl)))</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Callback(() =&gt; finalUrl = requestedUrl.Replace(oldUrl, newUrl));</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; mockContext.Setup(x =&gt; x.Response).Returns(mockResponse.Object);</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af">When</span>(<span style="color: #a31515">@&quot;the request is made&quot;</span>)]</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">public</span> <span style="color: blue">void</span> WhenTheRequestIsMade()</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </em>handler = <span style="color: blue">new</span> <span style="color: #2b91af">RedirectHandler</span>();</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _handler.ProcessRequest(mockContext.Object, oldUrl, newUrl);</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af">Then</span>(<span style="color: #a31515">@&quot;the response has a 301 in the status&quot;</span>)]</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">public</span> <span style="color: blue">void</span> ThenTheResponseHasA301InTheStatus()</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af">Assert</span>.That(mockContext.Object.Response.Status == <span style="color: #a31515">&quot;301 Moved Permanently&quot;</span>);</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af">Then</span>(<span style="color: #a31515">@&quot;the response url is (.*)&quot;</span>)]</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">public</span> <span style="color: blue">void</span> ThenTheResponseUrlIsTheNewUrl(<span style="color: blue">string</span> expectedUrl)</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af">Assert</span>.AreEqual(expectedUrl, finalUrl);</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px">&nbsp;</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af">Then</span>(<span style="color: #a31515">@&quot;301 is not in the headers&quot;</span>)]</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; <span style="color: blue">public</span> <span style="color: blue">void</span> Then_301IsNotInTheHeaders()</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af">Assert</span>.IsNull(mockResponse.Object.Status);</pre><pre style="margin: 0px">&nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px">}</pre></div></div><p>Since we are using wildcards instead of raw urls in the step definitions we can easily write other tests that will just work with out adding any extra code.</p><blockquote style="width: 550px">  <p> Scenario: Redirect to correct path on new url<br /> &nbsp;&nbsp;&nbsp; Given I have entered a request to http://www.frickinsweet.com/ryanlanciaux.com/page2<br />   &nbsp;&nbsp;&nbsp; And the old url is frickinsweet.com/ryanlanciaux.com<br />   &nbsp;&nbsp;&nbsp; And my new url is ryanlanciaux.com<br /> &nbsp;&nbsp;&nbsp; When the request is made<br />   &nbsp;&nbsp;&nbsp; Then the response url is http://www.ryanlanciaux.com/page2<br /> &nbsp;&nbsp;&nbsp; And the response has a 301 in the status     </p></blockquote><p>This project, in its entirety, is <a href="http://github.com/ryanlanciaux/Redirect" target="_blank">hosted on GitHub</a>. Check it out if you are interested in seeing SpecFlow in the context of the whole (tiny) application. Make sure that you add all the files from the lib dir into your references the first time you run it or you will receive all kinds of errors &#8211; additionally, I wrote this quickly for myself so there is no real warranty / guarantee that the code is free from defects &#8211; use at your own risk. :) </p><p><a href="http://github.com/ryanlanciaux/Redirect" target="_blank">Download Project from GitHub</a> </p><p><a href="http://specflow.org/" target="_blank">Visit the SpecFlow homepage</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning ASP.NET MVC 1.0 available on Amazon]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2009/08/07/beginning-asp-net-mvc-1-0-available-on-amazon/"/>
    <updated>2009-08-07T07:37:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2009/08/07/beginning-asp-net-mvc-1-0-available-on-amazon</id>
    <content type="html"><![CDATA[<p>
I know I&#39;ve been quiet for a little bit here but wanted to point out some great news. Simone Chiaretta and Keyvan Nayyeri&#39;s book <a href="http://www.amazon.com/gp/product/047043399X/105-8603807-8434027?ie=UTF8&amp;tag=keyvannayyeri-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=047043399X" target="_blank">Beginning ASP.NET MVC 1.0 </a>is available for purchase in the US on Amazon. Both Simone and Keyvan have a wealth of knowledge about the framework, so I&#39;m really looking forward to the book. For more information check out
</p>


<ul>
    <li><a href="http://codeclimber.net.nz/archive/2009/08/05/beginning-asp.net-mvc-1.0-available-on-amazon.aspx" target="_blank">Simone&#39;s site&nbsp;</a></li>
    <li><a href="http://nayyeri.net/blog/beginning-asp-net-mvc-1-0-ndash-finally-available/" target="_blank">Keyvan&#39;s site</a><br />
    </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are you a Control Freak?]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2009/03/24/are-you-a-control-freak/"/>
    <updated>2009-03-24T21:04:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2009/03/24/are-you-a-control-freak</id>
    <content type="html"><![CDATA[<p><strong>No Controls?</strong>
Since the very early ASP.NET MVC previews, the
most common argument I&#8217;ve heard against using the framework is the lack
of user controls. In my opinion, this is a mixed blessing, however, for
some, this is a show stopper. What can you do to provide a rich user
interface with the MVC framework, while not reinventing the wheel?</p>

<p><strong>jQuery</strong>
Now
you could go ahead and program a full fledged data grid or WYSIWYG
editor, however, unless you have a bit of time to spare this is not the
ideal solution. As most may realize, jQuery fits very nicely to fill in
the gaps left by the absence of user controls. For the most part, the
controls are not going to let you just drag-and-drop, type in a dataset
and profit but a lot of the pain is kept to a minimum.</p>

<p><strong>Examples</strong>
<a id="k9ve" title="Ingrid" href="http://www.reconstrukt.com/ingrid/">Ingrid</a>
<img src="http://ryanlanciaux.github.com/files/ingrid.gif" alt="" />
If
you&#8217;re looking for a data grid there are a number of options available
pictured above is Ingrid. <strong>Flexigrid </strong>is another good one that people
have <a id="zc7x" title="used with the MVC framework" href="http://www.codeproject.com/KB/aspnet/MVCFlexigrid.aspx">used with the MVC framework</a>, however, <em>their site appears to be down</em> at the moment.
<a href="http://bassistance.de/jquery-plugins/jquery-plugin-treeview/" target="_blank">Treeviews</a> are available</p>

<p><img src="http://ryanlanciaux.github.com/files/treeview.gif" alt="" /></p>

<p><a href="http://code.google.com/p/jquery-checkbox/" target="_blank">Radio Buttons / Check Boxes
</a></p>

<p><img src="http://ryanlanciaux.github.com/files/check_box.gif" alt="" /></p>

<p><a href="http://plugins.jquery.com/" target="_blank">Check out the jQuery plugin database</a>.</p>

<p><strong>Getting Started
</strong>So,
if you&#8217;ve decided you want to look more into using jQuery plugins &#8211; a
couple of tips that may make the transition a little easier:</p>

<ul>
    <li>Obviously,
familiarize yourself with jQuery. Some of the plugins will work with
almost 0 configuration but it&#8217;s much better to actually know what&#8217;s
going on. <a href="http://www.smashingmagazine.com/2008/09/16/jquery-examples-and-best-practices/" target="_blank">View more info on getting started with jQuery</a></li>
</ul>


<ul>
    <li>The <a href="http://nayyeri.net/blog/using-jsonresult-in-asp-net-mvc-ajax/" target="_blank">JsonResult</a> is your friend &#8211; <a href="http://www.dev102.com/2008/08/19/jquery-and-the-aspnet-mvc-framework/" target="_blank">learn it well</a>.</li>
</ul>


<ul>
    <li>Read up on what people using different languages are doing. I&#8217;m
not saying that you should necessarily go out and learn Rails or
CakePHP/CodeIgniter (although, it is beneficial). but at least look at the
techniques that programmers from that realm of things are doing &#8211; see how they are implementing their controls.</li>
</ul>


<p>What tips do you have for creating robust user interfaces with the MVC framework?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Constitutes Ethical SEO?]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/12/12/what-constitutes-ethical-seo/"/>
    <updated>2008-12-12T00:45:00-05:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/12/12/what-constitutes-ethical-seo</id>
    <content type="html"><![CDATA[<blockquote>
    <em>&quot;nice post!!thanks for the info..that&#39;s great and cool&quot;<br />
    &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Random Spammer</em>
</blockquote>


<br />


<p>As
a web developer / someone who has a blog, I understand dealing with
spam is one of the necessary evils of having a comments enabled on my
site. For the most part, my site has remained far enough under the
radar that most spammers do not waste their time. More recently,
however, there has been a gradual influx of comment spam with a title
something along the lines of &quot;[Company Name] SEO Test.&quot; There is worse
spam for sure but it was definitely annoying. <br /></p>

<br />


<p>A quick Google
search pointed me to a Web Development and Search Engine Optimization
company hosting an SEO competition. I checked the rules and sure enough,
there was a rule stating that only Ethical SEO Techniques would be
permitted. Quickly, I emailed the organization one of the comments
(with url, ip, email, etc) exepecting the offending parties would be
removed from the competition, eliminating additional garbage comments.
I was shocked to receive their reply.<br /></p>

<blockquote>
    <em>Unfortunately
    this is not against the rules of the competition &ndash; I would encourage
    you to remove the spamming links for your website to discourage this
    behaviour but as I said I can&rsquo;t actually penalise this person
    for making posts on other peoples websites.</em><br />
    <br />
    <em>Sorry about the spam.</em><br />
</blockquote>


<p><strong>Gaming the System</strong><br />
In
my opinion, Search Engine Optimization should be about perfecting a
website and the website&#39;s content; not tricking google into thinking
more people find your content useful than actuality. <a href="http://www.youngentrepreneur.com/blog/2008/12/11/seo-advice-josh-can-help/" target="_blank">Optimizing tags
and titles</a> is one thing but gaming the system to garner search ranking is wrong
and is detrimental to the web as a whole. Just because commenting is
legal and allowable does not make it ethical. Unfortunately, this
practice will continue to exist as long as it gets results and
organizations act as enablers to those who would use these tactics for
financial gain (not to mention increased search engine ranking for the
enabling organizations). <br /></p>

<br />


<p><strong>Link Spam is Digital Graffiti</strong><br /></p>

<div style="float: right">
<img src="http://ryanlanciaux.github.com/files/spra-paint.jpg" alt="" />
</div>


<p>Imagine
for a second if companies condoned this practice outside of the Web &#8211;
what if McDonalds or Nike paid for their logos to be spray painted on
other&#39;s property? To make matters worse what if after receiving
numerous complaints they held a press conference and said &quot;soap and
water removes the paint&quot; or &quot;just hire some guards and the problem will
go away.&quot;? I think it&#39;s safe to assume that practice would not be
received so kindly (h/t <a href="http://www.codehinting.com" target="_blank">Matt Braun</a> on the graffiti analogy)!
Fortunately a link is not as hard to remove as paint but the concept is
similar. <br /></p>

<br />


<p><strong>Solutions anyone?</strong><br />
Social networks such as
<a href="http://www.digg.com" target="_blank">Digg</a>, <a href="http://www.dotnetkicks.com" target="_blank">DotNetKicks </a>and <a href="http://www.dzone.com" target="_blank">DZone </a>have always been plagued by those who would
try to circumvent the rules for personal gain. Where honeypots and
captcha systems would traditionally help against
bots, an increasing number of spammers seem to be actual people. The
administrators of these social networks are constantly coming up with
more sophisticated ways to combat spam but what should small blogs and
websites do?<br /></p>

<br />


<p>Currently,
there are a number of methodologies for preventing blog spam that work
with varying degrees of effectiveness but none are ideal. Obviously,
you can moderate comments &#8211; this works okay but is painful if you are
getting a lot of spam or a lot of comments. Also, make sure your
comment links have a rel=&quot;nofollow&quot; attribute (h/t <a href="http://codeclimber.net.nz" target="_blank">Simone Chiaretta</a>). Google
does not take nofollow links into account when calculating page rank.
Although this does not reward the spammer, it does not prevent spam. <br /></p>

<br />


<p>What I would like to see is a centralized comment system like Disqus or
IntenseDebate that lets a user login with OpenID, Google Friend
Connect, Microsoft LiveID, Facebook Connect (whichever the user wants).
There would be a standard vote up / down vote for every comment a user
makes where the overall votes across all sites would determine the
users rating. Casting a down vote would remove a minimal amount of
points from the voter to prevent someone from going on a down vote
rampage (exactly how <a href="http://www.stackoverflow.com" target="_blank">StackOverflow </a>works). Site owners could set
restrictions that would prevent users with a rating less than a
specified number from posting on their site. This may be idealistic and
introduce a new realm of privacy concerns but if done properly, I think it
would help eliminate a great deal of spam.<br /></p>

<br />


<p><strong>Wrapping things up<br />
</strong>Although there are many less-than ethical tactics to increasing a
site&#39;s ranking, site structure and site content are the best methods of
SEO. I would love to hear your thoughts, ideas and any suggestions you
have in eliminating link spam.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is your strategy for becoming a better developer?]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/09/21/what-is-your-strategy-for-becoming-a-better-developer/"/>
    <updated>2008-09-21T11:59:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/09/21/what-is-your-strategy-for-becoming-a-better-developer</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.codethinked.com">Justin Etheredge</a> recently posted <a href="http://www.codethinked.com/post/2008/09/20/What-is-your-strategy-for-becoming-a-better-developer.aspx" target="_blank">a question</a> for the community on <a href="http://www.codethinked.com" target="_blank">his site</a>. I think this is a good thing to think about because my definition of a good developer is one who continually tries to be better at their craft. My suggestions may be very similar to others but I would love to hear feedback.
</p>


<p>
<strong>Read</strong> : the first suggestion I have is a bit obvious. I like to read books and blogs on programming &#8211; especially methodologies and architecture. Its hard to find good books becuase there seems to be an over saturation, many of which are not good. That being said, there are quite a few that I would still recommend : <a href="http://www.amazon.com/Head-First-Design-Patterns/dp/0596007124" target="_blank">Head First Design Patterns</a>, <a href="http://www.amazon.com/Dont-Make-Me-Think-Usability/dp/0321344758/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1222029313&amp;sr=8-1" target="_blank">Don&#39;t Make Me Think</a> (not really a programming book but important for anyone that writes applications with end-users) and <a href="http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/" target="_blank">Code Complete</a>. Additionally I&#39;m really looking foward to <a href="http://www.amazon.com/gp/product/047043399X/" target="_blank">Beginning ASP.NET MVC</a> by <a href="http://codeclimber.net.nz/" target="_blank">Simone </a>and <a href="http://nayyeri.net/" target="_blank">Keyvan</a>. As for blogs, there are tons I subscribe to but a few I&#39;ll mention are <a href="http://www.codethinked.com" target="_blank">Justin</a>&#39;s, <a href="http://www.noop.nl" target="_blank">Jurgen Appelo</a>&#39;s and <a href="http://www.diditwith.net" target="_blank">Dustin Campbell</a>&#39;s.
</p>


<p>
<strong>Share </strong>:&nbsp; I first started my site to help myself and hopefully others with programming topics. As I chose a subject to write about, I realized I did a lot more research than I would if it was just something I wanted to learn. Additionally, there was a lot of experience that I gained from the comments on the articles. Sharing information with a high level of transparency helps you become a better developer because you will get feedback on your work.
</p>


<p>
<strong>Set Goals</strong> : Set goals to learn new languages / techniques. I start off by reading blogs/books/articles then think of achievable pet project to use these new techniques on. The progress on the project can be used as the baseline for determining your progress. This is not saying you would be an expert in the new area but, in my opinion, is one of the best ways to learn.
</p>


<p>
There are tons of additional ways to become a better developer and I would love to hear your suggestions!
</p>


<p>
&nbsp;
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Theme Generator on Channel9!]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/08/18/theme-generator-on-channel9/"/>
    <updated>2008-08-18T12:36:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/08/18/theme-generator-on-channel9</id>
    <content type="html"><![CDATA[<p>
Wow, the <a href="http://www.frickinsweet.com/tools" target="_blank">theme generator</a> that my <a href="http://www.frickinsweet.com/joelroxor" target="_blank">brother</a> and I made is on <a href="http://channel9.msdn.com/shows/This+Week+On+Channel+9/This-Week-on-C9-Christian-LittleGuru-Liensberger-VS-2008-and-NET-Framework-35-SP1/" target="_blank">Channel 9</a>.<br />
</p>


<div>
<a style="text-decoration: none" href="http://go.microsoft.com/fwlink/?LinkID=124807">
<img style="border-style: none" src="http://go.microsoft.com/fwlink/?LinkId=108181" alt="Get Microsoft Silverlight" />
</a>
</div>


<p>
It&#39;s in the video at about 11:30. Thanks to <a href="http://blogs.msdn.com/danielfe/" target="_blank">Dan</a> and team for mentioning it! <a href="http://channel9.msdn.com/shows/This+Week+On+Channel+9/This-Week-on-C9-Christian-LittleGuru-Liensberger-VS-2008-and-NET-Framework-35-SP1/" target="_blank">View the channel 9 site here</a>.
</p>


<p>
&nbsp;
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Studio Theme Generator]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/08/07/visual-studio-theme-generator/"/>
    <updated>2008-08-07T08:36:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/08/07/visual-studio-theme-generator</id>
    <content type="html"><![CDATA[<p>
This is a really short post but I wanted to pass the word along. I just finished a fun little ASP.NET MVC Application to generate Visual Studio
themes based off of 3 given colors. I have always felt that selecting
every color to make a coherent theme is way too repetitive. This web
application automatically chooses complements / contrasts based off
your initial color selections (and uses jQuery to let you preview your
theme before creating). I will be making another, more detailed post later that will explain how it all works but for now, <a href="http://www.frickinsweet.com/tools">check it out</a> and let me know what you think.
</p>


<p>
&nbsp;
</p>


<p>
<a href="http://www.frickinsweet.com/tools">View the application </a>
</p>


<p>
&nbsp;
</p>


<p>
&nbsp;
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How did I get started in software development?]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/07/08/how-did-i-get-started-in-software-development/"/>
    <updated>2008-07-08T20:16:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/07/08/how-did-i-get-started-in-software-development</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.codethinked.com" target="_blank">
Justin Etheredge</a> recently tagged me to write up how I got started in software development (you are probably familiar with the meme started by <a href="http://www.michaeleatonconsulting.com/blog/archive/2008/06/04/how-did-you-get-started-in-software-development.aspx" target="_blank">Michael Eaton</a>). Without any further explanation, here goes:
</p>


<p>
<strong>How old were you when you first started programming?</strong>
</p>


<p>
I first started programming when I was 10 or 11 (I don&#39;t remember exactly).
</p>


<p>
<strong>How did you get started in programming?</strong>
</p>


<p>
My interest in programming initially began as a general interest in computer games. My dad showed me how to get around in DOS and pulled up some games in QBasic. It wasn&#39;t long after that I started messing with the code to see what would happen if I changed things. From there, I tried writing some stuff on my own spending a lot of time in the syntax help.&nbsp;
</p>


<p>
<strong>What was your first language?</strong>
</p>


<p>
BASIC
</p>


<p>
<strong>What was the first real program you wrote?</strong>
</p>


<p>
Depending on the definition, the first real program I wrote was a game that worked in an AOL chat room. When I was 13, one of my friends showed me this thing called a scrambler. The scrambler would let you enter a word, send the scrambled word to the chat and keep score of who got the word right first, etc. I don&#39;t know why but I thought it would be an interesting thing to try and replicate. About a month later, I had finished writing one using the VB and the Windows API. It was not very useful but I learned a lot that way I guess.
</p>


<p>
<strong>What languages have you used since you started programming?</strong>
</p>


<p>
C#, VB.NET, Java, JavaScript, Ruby, Perl, PHP, BASIC, C, C++, F# (and others)
</p>


<p>
<strong>What was your first professional programming gig?</strong>
</p>


<p>
When I was in Highschool/College I did some freelance websites/applications mainly for construction and contracting companies. After college my first full-time programming job was working at Franklin University on the development team (websites / web applications).
</p>


<p>
<strong>If you knew then what you know now, would you have started programming?</strong>
</p>


<p>
Absolutely.
</p>


<p>
<strong>If there is one thing you learned along the way that you would tell new developers, what would it be?</strong>
</p>


<p>
Be continuously learning.
</p>


<p>
<strong>What&#39;s the most fun you&#39;ve ever had programming?</strong>&nbsp;
</p>


<p>
I honestly couldn&#39;t tell you &#8211; there are a lot of projects that have been really fun. I especially like when there&#39;s some new kind of challenge I haven&#39;t encountered before.
</p>


<p>
<strong>Who are you calling out?</strong>&nbsp;
</p>


<p>
<a href="http://www.codehinting.com" target="_blank">Matt Braun</a>
</p>


<p>
<a href="http://blog.sanzenbacher.com" target="_blank">Scott Sanzenbacher&nbsp;</a>
</p>


<p>
<a href="http://blog.wekeroad.com" target="_blank">Rob Conery</a>
</p>


<p>
<a href="http://www.noop.nl/" target="_blank">Jurgen Appelo </a>
</p>


<p>
<a href="http://www.dannydouglass.com/" target="_blank">Danny Douglass</a>
</p>


<p>
<a href="http://www.ayende.com/Blog/" target="_blank">Oren Eini</a>
</p>


<p>
&nbsp;
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip - Visual Studio Keybindings]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/06/05/quick-tip-visual-studio-keybindings/"/>
    <updated>2008-06-05T13:08:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/06/05/quick-tip-visual-studio-keybindings</id>
    <content type="html"><![CDATA[<p>
This may be common knowledge but it was new to me. If you&#39;re ever hand mangling control position in a winforms designer you can setup keybindings for Bring to Front Send to Back options that are normally available on the controls context menu. This is really useful if you have layers of controls and you can&#39;t always get to the Context.
</p>


<ol>
    <li>Click on Tools -&gt; Options<br />
    </li>
    <li>Under Environment, Select the Keyboard menu</li>
    <li>Type &quot;Format.BringtoFront&quot; (or &quot;Format.SendtoBack&quot;) in the &quot;Show Commands Containing&quot; box</li>
    <li>Choose your shortcut keys <br />
    </li>
    <li>Press Assign</li>
</ol>


<p>
<br />
<img src="http://ryanlanciaux.github.com/files/BringToFront.gif" alt="" />
<br />
<br />
Thanks to my friend Ross for pointing this out.
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RhinoCommons, NHibernate and ASP.NET MVC Part 5 - LINQ to NHibernate]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/06/03/rhinocommons-nhibernate-and-asp-net-mvc-part-5-linq-to-nhibernate/"/>
    <updated>2008-06-03T21:15:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/06/03/rhinocommons-nhibernate-and-asp-net-mvc-part-5-linq-to-nhibernate</id>
    <content type="html"><![CDATA[<p>
<strong>Settings</strong>&nbsp;
</p>


<p>
Up until now, we&#39;ve been using&nbsp; NHibernate Query Generator for all of our data access. Although this is a great way to retrieve our data, there is another option we can play around with &#8211; LINQ for NHibernate. To set this up in our existing application (see <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC.aspx" target="_blank">Part 1</a>, <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC-Part-2--.aspx" target="_blank">Part 2</a>, <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC-Part-3-the-model.aspx" target="_blank">Part 3</a> and <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC-Part-4---The-MVC-Application.aspx" target="_blank">Part 4</a> on creating the ASP.NET MVC Application) we&#39;ll first need to grab the code out of subversion <a href="https://rhino-tools.svn.sourceforge.net/svnroot/rhino-tools/experiments/NHibernate.Linq/" target="_blank">https://rhino-tools.svn.sourceforge.net/svnroot/rhino-tools/experiments/NHibernate.Linq/</a> and build it using MSBuild or Visual Studio. After that we want to add a reference to it in our application.
</p>


<p>
<strong>Simple Code</strong>&nbsp;
</p>


<p>
Next we&#39;ll want to update our controller to use Linq for NHibernate instead of NHQG (Service layer would be better place for this type of code but since this is a demo it&#39;ll be okay &#8211; for more on using a service layer to handle all the repository code check out <a href="http://michaelhanney.com/blog/" target="_blank">Michael Hanney</a>&#39;s post on <a href="http://michaelhanney.com/blog/2008/05/27/systemwebmvc-rhino-commons-caslte-active-record-nhibernate-part-2/" target="_blank">ActiveRecord, NHibernate and ASP.NET MVC</a>). The initial NHGQ code is:
</p>


<!--code-->


<div class="code">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
<span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">p</span> = <span style="color: #47b3d1">Repository</span>&lt;<span style="color: #47b3d1">Product</span>&gt;.<span style="color: #a5a3a3">FindOne</span>(<span style="color: #47b3d1">Where</span>.<span style="color: #a5a3a3">Product</span>.<span style="color: #a5a3a3">Title</span> == <span style="color: #a5a3a3">ID</span>);
</p>
</div>
</div>


<!--end code-->


<br />


<p>Our LINQ for NHibernate query will look like this:<br /></p>

<!--code-->


<div class="code">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">p</span> = (<span style="color: #23b4eb">from</span> <span style="color: #a5a3a3">item</span> <span style="color: #23b4eb">in</span> <span style="color: #47b3d1">UnitOfWork</span>.<span style="color: #a5a3a3">CurrentSession</span>.<span style="color: #a5a3a3">Linq</span>&lt;<span style="color: #47b3d1">Product</span>&gt;()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  <span style="color: #23b4eb">where</span> <span style="color: #a5a3a3">item</span>.<span style="color: #a5a3a3">Title</span> == <span style="color: #a5a3a3">ID</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  <span style="color: #23b4eb">select</span> <span style="color: #a5a3a3">item</span>).<span style="color: #a5a3a3">First</span>();
</p>
</div>
</div>


<p>
<!--end code-->
It&#39;s pretty obvious that the Linq code is a bit longer than the NHQG code. Although that in itself is not a bad thing, it may turn some people away. Momentarily, we&#39;ll see some scenarios where Linq for NH is very useful.
</p>


<p>
<strong>Paging and Sorting</strong>&nbsp;
</p>


<p>
One nice thing we can easily do with Linq for NHibernate is page and sort our data. If we simply want to get a list of all products it would look like this. &nbsp;
</p>


<!--code-->


<div class="code">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">p</span> = (<span style="color: #23b4eb">from</span> <span style="color: #a5a3a3">item</span> <span style="color: #23b4eb">in</span> <span style="color: #47b3d1">UnitOfWork</span>.<span style="color: #a5a3a3">CurrentSession</span>.<span style="color: #a5a3a3">Linq</span>&lt;<span style="color: #47b3d1">Product</span>&gt;()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  <span style="color: #23b4eb">select</span> <span style="color: #a5a3a3">item</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ).<span style="color: #a5a3a3">ToList</span>()
</p>
</div>
</div>


<p>
<!--end code--> To page/sort the data it&#39;s just a slight addition to the list all code.
<!--code-->
</p>


<div class="code">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">int</span> <span style="color: #a5a3a3">itemsPerPage</span> = <span style="color: lime">5</span>;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">int</span> <span style="color: #a5a3a3">startIndex</span> = (<span style="color: #a5a3a3">ID</span>.<span style="color: #a5a3a3">Value</span> - <span style="color: lime">1</span>)* <span style="color: #a5a3a3">itemsPerPage</span>;
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">p</span> = (<span style="color: #23b4eb">from</span> <span style="color: #a5a3a3">item</span> <span style="color: #23b4eb">in</span> <span style="color: #47b3d1">UnitOfWork</span>.<span style="color: #a5a3a3">CurrentSession</span>.<span style="color: #a5a3a3">Linq</span>&lt;<span style="color: #47b3d1">Product</span>&gt;()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  <span style="color: #23b4eb">orderby</span> <span style="color: #a5a3a3">item</span>.<span style="color: #a5a3a3">Title</span> <span style="color: #23b4eb">ascending</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  <span style="color: #23b4eb">select</span> <span style="color: #a5a3a3">item</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ).<strong><span style="color: #a5a3a3">Skip</span></strong>(<span style="color: #a5a3a3">startIndex</span>).<strong><span style="color: #a5a3a3">Take</span></strong>(<span style="color: #a5a3a3">itemsPerPage</span>).<span style="color: #a5a3a3">ToList</span>();
</p>
</div>
</div>


<p>
<!--endcode-->
<br />
<strong>More Advanced Usage</strong>
</p>


<p>
<a href="http://codebetter.com/blogs/kyle.baley/" target="_blank">Kyle Baley</a>&#39;s <a href="http://codebetter.com/blogs/kyle.baley/archive/2008/04/07/trying-out-linq-for-nhibernate.aspx" target="_blank">article on Linq for Nhibernate</a> shows a more interesting use for Linq for NHibernate; we can create a generic method that adds query criteria on the fly. This would make our code much more reusable so we&#39;re going to go ahead and make a <em>demo </em>class heavily based on these concepts.
</p>


<!--code-->


<div class="code">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">QueryHandler</span>&lt;<span style="color: #a5a3a3">T</span>&gt;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #2b91af">IList</span>&lt;<span style="color: #a5a3a3">linqExpression</span>.<span style="color: #47b3d1">Expression</span>&lt;<span style="color: #2b91af">Func</span>&lt;<span style="color: #a5a3a3">T</span>, <span style="color: #23b4eb">bool</span>&gt;&gt;&gt;&nbsp; <span style="color: #a5a3a3">_criteria</span>;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #a5a3a3">QueryHandler</span>()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_criteria</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">List</span>&lt;<span style="color: #a5a3a3">linqExpression</span>.<span style="color: #47b3d1">Expression</span>&lt;<span style="color: #2b91af">Func</span>&lt;<span style="color: #a5a3a3">T</span>, <span style="color: #23b4eb">bool</span>&gt;&gt;&gt;();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">AddCriteria</span>(<span style="color: #a5a3a3">linqExpression</span>.<span style="color: #47b3d1">Expression</span>&lt;<span style="color: #2b91af">Func</span>&lt;<span style="color: #a5a3a3">T</span>, <span style="color: #23b4eb">bool</span>&gt;&gt; <span style="color: #a5a3a3">LambdaFunc</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_criteria</span>.<span style="color: #a5a3a3">Add</span>(<span style="color: #a5a3a3">LambdaFunc</span>);
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #2b91af">IList</span>&lt;<span style="color: #a5a3a3">T</span>&gt; <span style="color: #a5a3a3">GetList</span>()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">query</span> = <span style="color: #23b4eb">from</span> <span style="color: #a5a3a3">item</span> <span style="color: #23b4eb">in</span> <span style="color: #47b3d1">UnitOfWork</span>.<span style="color: #a5a3a3">CurrentSession</span>.<span style="color: #a5a3a3">Linq</span>&lt;<span style="color: #a5a3a3">T</span>&gt;()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">select</span> <span style="color: #a5a3a3">item</span>;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #d200d5">//Tack on our query Criteria</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">foreach</span> (<span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">criterion</span> <span style="color: #23b4eb">in</span> <span style="color: #a5a3a3">_criteria</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  <span style="color: #a5a3a3">query</span> = <span style="color: #a5a3a3">query</span>.<span style="color: #a5a3a3">Where</span>&lt;<span style="color: #a5a3a3">T</span>&gt;(<span style="color: #a5a3a3">criterion</span>);
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">query</span>.<span style="color: #a5a3a3">ToList</span>();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>
</div>


<p>
<!--endcode-->
Here, we&#39;ve created a class that has a private list of criteria, a method to add criteria to the list and a method to get the list based on the given criteria. I realize it may be a little intimidating but we can perfom most of our select queries through this method due to the use of Generics.&nbsp;
</p>


<p>
Updating the controllers to use this functionality is not too difficult. For pages that simply retrieve lists we call the GetList method without specifying any criteria:
</p>


<!--code-->


<div class="code">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">queryHandler</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">QueryHandler</span>&lt;<span style="color: #47b3d1">Product</span>&gt;();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">p</span> = <span style="color: #a5a3a3">queryHandler</span>.<span style="color: #a5a3a3">GetList</span>().<span style="color: #a5a3a3">Skip</span>(<span style="color: #a5a3a3">startIndex</span>).<span style="color: #a5a3a3">Take</span>(<span style="color: #a5a3a3">itemsPerPage</span>).<span style="color: #a5a3a3">ToList</span>();
</p>
</div>
</div>


<p>
&nbsp;Pass in new lambda expressions to add query criteria
</p>


<div class="code">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Consolas; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">queryHandler</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">QueryHandler</span>&lt;<span style="color: #47b3d1">Product</span>&gt;();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">queryHandler</span>.<span style="color: #a5a3a3">AddCriteria</span>(<span style="color: #a5a3a3">item</span> =&gt; <span style="color: #a5a3a3">item</span>.<span style="color: #a5a3a3">Title</span> == <span style="color: #a5a3a3">ID</span>);
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">p</span> = <span style="color: #a5a3a3">queryHandler</span>.<span style="color: #a5a3a3">GetList</span>().<span style="color: #a5a3a3">First</span>();
</p>
</div>
</div>


<p>
<!--endcode-->
<br />
Now we see there are multiple options for interacting with our ActiveRecord Repository. Please let me know of any changes that you would make. I&#39;ve updated the demo code in Assembla &#8211; <a href="http://svn2.assembla.com/svn/NHibernateTest" target="_blank">http://svn2.assembla.com/svn/NHibernateTest</a> - Standard disclaimer does apply (some of the code is less than ideal but for learning it should be okay).
</p>


<p></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RhinoCommons, NHibernate and ASP.NET MVC Part 4 - The MVC Application]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/05/26/rhinocommons-nhibernate-and-asp-net-mvc-part-4-the-mvc-application/"/>
    <updated>2008-05-26T20:26:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/05/26/rhinocommons-nhibernate-and-asp-net-mvc-part-4-the-mvc-application</id>
    <content type="html"><![CDATA[<p>
Finally we&#39;re to the point where we can see all our hard work come together. We have most of the hard work done but we still have a lot of ground to cover. If you haven&#39;t been following along, please check out <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC.aspx" target="_blank">Setting Up The Assemblies</a>, <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC-Part-2--.aspx" target="_blank">Configuring the Application</a> and <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC-Part-2--.aspx" target="_blank">Developing the Model</a>.
</p>


<p>
<strong>Unit of Work</strong>
</p>


<p>
In some of my initial tests with NHibernate and ASP.NET MVC Pattern I kept seeing the benefits of having a Unit of Work or Session Per Request (that is opening and closing the NHibernate session at the begining and end of the http request respectively). To Recap a little, I started to write my own Session Per Request, however, <a href="http://www.lostechies.com/blogs/chad_myers/" target="_blank">Chad Myers</a> pointed me to the Rhino Commons project which already implemented this. I think it&#39;s worthwhile becuase I don&#39;t really like putting NHibernate session code in my controller plus as <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html" target="_blank">Martin Fowler writes</a>
<br />
</p>


<blockquote>
    A Unit of Work keeps track of everything you do during a business transaction that can affect the database. When you&#39;re done, it figures out everything that needs to be done to alter the database as a result of your work.
</blockquote>


<p>
Luckily, with RhinoCommons, it&#39;s pretty easy to implement this pattern (<a href="http://www.ayende.com/Blog/archive/2007/06/08/Rhino-Commons-RepositoryltTgt-and-Unit-Of-Work.aspx" target="_blank">check out Ayende&#39;s post on this</a>). In a standard web forms application, we would normally create a Global.aspx that inherits UnitOfWorkApplication. Since we&#39;re using ASP.NET MVC, however, we don&#39;t necessarily want to go that route. As <a href="http://michaelhanney.com/blog/" target="_blank">Michael Hanney</a> notes on <a href="http://michaelhanney.com/blog/2008/04/27/beginning-systemwebmvc-with-rhino-tools-caslte-active-record-and-nhibernate/" target="_blank">his post on MVC and Castle</a> we can have our Global.asax inherit from UnitOfWorkApplication.
</p>


<p>
&nbsp;
</p>


<!--code-->


<div class="code">
<div style="background: #1b1b1b none repeat scroll 0% 0%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">GlobalApplication</span> : <span style="color: #47b3d1">UnitOfWorkApplication</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">override</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">Application_Start</span>(<span style="color: #23b4eb">object</span> <span style="color: #a5a3a3">sender</span>, <span style="color: #47b3d1">EventArgs</span> <span style="color: #a5a3a3">e</span>)&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">base</span>.<span style="color: #a5a3a3">Application_Start</span>(<span style="color: #a5a3a3">sender</span>, <span style="color: #a5a3a3">e</span>);&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">RegisterRoutes</span>(<span style="color: #47b3d1">RouteTable</span>.<span style="color: #a5a3a3">Routes</span>);&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&#8230;
</p>
<p style="margin: 0px">
&nbsp; &nbsp;&nbsp; }
</p>
</div>
</div>


<p>
<!--endCode-->If you know of another way to do this, please be sure to let me know. Also, the routing still works as it normally would &#8211; we&#39;re just running this code first to instantiate the UnitOfWork.
</p>


<p>
In our controllers we can call our reference our Hibernate repositories and classes without specifying an ISession.
<br />
<!--code-->
</p>


<div class="code">
<div style="background: #1b1b1b none repeat scroll 0% 0%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #47b3d1">ActionResult</span> <span style="color: #a5a3a3">InsertProductGroup</span>(<span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">Title</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #47b3d1">ProductGroup</span> <span style="color: #a5a3a3">pg</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">ProductGroup</span>();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">pg</span>.<span style="color: #a5a3a3">Title</span> = <span style="color: #a5a3a3">Title</span>;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #47b3d1">Repository</span>&lt;<span style="color: #47b3d1">ProductGroup</span>&gt;.<span style="color: #a5a3a3">Save</span>(<span style="color: #a5a3a3">pg</span>);
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #47b3d1">UnitOfWork</span>.<span style="color: #a5a3a3">Current</span>.<span style="color: #a5a3a3">Flush</span>();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">RenderView</span>(<span style="color: #80ff00">&quot;AddProductGroup&quot;</span>);
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
</div>
</div>


<p>
<!--endCode--> Notice we&#39;re still flushing our data &#8211; but it makes the controllers a LOT cleaner. Imagine if we had to instantiate and clean up our session in each controller.
</p>


<p>
One further thing, the UnitOfWorkApplication supports both short and long conversations. I&#39;m not going to go too much into that but if your application requires keeping objects around for a couple HTTP Requests before saving to the database Long Conversation may be the way to go. <a href="http://www.ayende.com/Wiki/HttpModules.ashx" target="_blank">See Ayende&#39;s Wiki for more on this</a>
</p>


<p>
<strong>NHibernate Query Generator</strong><br />
In the <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC.aspx" target="_blank">first post of this series</a> we looked at what it takes to setup NHibernate Query Generator (NHQG from here out). Now we get to use it to make some really nice looking code (in a later post, however, we&#39;ll be using LINQ to NHibernate). If we&#39;ve set up the tool as mentioned in the first post (listed earlier), all we have to do is run the tool and make sure the generated code is added to the project.
</p>


<p>
NHQG lets us use a fluent interface to set filters on our Hibernate queries; this results in code that, in my opinion, is very easy to write and understand later on. If we wanted to Find one Product with a specific title, our code would look something like this:
</p>


<!--code-->


<div class="code">
<div style="background: #1b1b1b none repeat scroll 0% 0%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #47b3d1">ActionResult</span> <span style="color: #a5a3a3">ViewProduct</span>(<span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">ID</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">p</span> = <span style="color: #47b3d1">Repository</span>&lt;<span style="color: #47b3d1">Product</span>&gt;.<span style="color: #a5a3a3">FindOne</span>(<span style="color: #47b3d1">Where</span>.<span style="color: #a5a3a3">Product</span>.<span style="color: #a5a3a3">Title</span> == <span style="color: #a5a3a3">ID</span>);
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">if</span> (<span style="color: #a5a3a3">p</span> != <span style="color: #23b4eb">null</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">RenderView</span>(<span style="color: #80ff00">&quot;DisplayProduct&quot;</span>,
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; <span style="color: #a5a3a3">p</span>);&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">RenderView</span>(<span style="color: #80ff00">&quot;DisplayProduct&quot;</span>);
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
</div>
</div>


<p>
<!--endCode-->
The <em>Where.Product.Title == ID</em> is all from the NHQG autogenerated code. Now we actually have something to show for all our configuration and setup work. Soon, we&#39;re going to take a look at using LINQ to NHibernate instead of NHQG.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RhinoCommons, NHibernate and ASP.NET MVC Part 3 - The Model]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/05/22/rhinocommons-nhibernate-and-asp-net-mvc-part-3-the-model/"/>
    <updated>2008-05-22T10:00:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/05/22/rhinocommons-nhibernate-and-asp-net-mvc-part-3-the-model</id>
    <content type="html"><![CDATA[<p>
We&#39;re going to keep moving now that everything is setup (<a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC.aspx" target="_blank">see part one for setup</a>) and configured (<a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC-Part-2--.aspx" target="_blank">see part two for configuration</a>).
</p>


<p>
First off we are going to create our classes. The original classes and SQL tables are posted below (these may look familiar &#8211; they are from <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/Using-NHibernate.aspx" target="_blank">my initial NHibernate post</a>)
</p>


<br />


<p>Initial Product<!--code --></p>

<div class="code" style="width: 100%">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">Product</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #a5a3a3">IList</span>&lt;<span style="color: #a5a3a3">Product</span>&gt; <span style="color: #a5a3a3">_RelatedProducts</span>;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #a5a3a3">IList</span>&lt;<span style="color: #a5a3a3">ProductGroup</span>&gt; <span style="color: #a5a3a3">_ProductGroups</span>;
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #a5a3a3">Product</span>()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_RelatedProducts</span> = <span style="color: #23b4eb">new</span> <span style="color: #a5a3a3">List</span>&lt;<span style="color: #a5a3a3">Product</span>&gt;();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_ProductGroups</span> = <span style="color: #23b4eb">new</span> <span style="color: #a5a3a3">List</span>&lt;<span style="color: #a5a3a3">ProductGroup</span>&gt;();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">ID</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">private</span> <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">Title</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">ImagePath</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">Description</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #a5a3a3">IList</span>&lt;<span style="color: #a5a3a3">Product</span>&gt; <span style="color: #a5a3a3">RelatedProducts</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">_RelatedProducts</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">set</span> { <span style="color: #a5a3a3">_RelatedProducts</span> = <span style="color: #23b4eb">value</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #a5a3a3">IList</span>&lt;<span style="color: #a5a3a3">ProductGroup</span>&gt; <span style="color: #a5a3a3">ProductGroups</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">_ProductGroups</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">set</span> { <span style="color: #a5a3a3">_ProductGroups</span> = <span style="color: #23b4eb">value</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>
</div>


<br />


<!--end code-->


<p>Initial ProductGroup<br /></p>

<!--code-->


<div class="code" style="width: 100%">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">ProductGroup</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">ProductGroupID</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">Title</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #2b91af">IList</span>&lt;<span style="color: #a5a3a3">Product</span>&gt; <span style="color: #a5a3a3">Products</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>
</div>


<!--end code-->


<br />


<p>SQL Tables</p>

<!--code-->


<div class="code" style="width: 100%">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
<span style="color: #a5a3a3">CREATE</span> <span style="color: #a5a3a3">TABLE</span> [<span style="color: #a5a3a3">dbo</span>].[<span style="color: #a5a3a3">SimpleProducts</span>](
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #a5a3a3">ProductID</span>] [<span style="color: #23b4eb">char</span>](<span style="color: lime">32</span>) <span style="color: #a5a3a3">NOT</span> <span style="color: #a5a3a3">NULL</span>,
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #a5a3a3">Title</span>] [<span style="color: #a5a3a3">nvarchar</span>](<span style="color: lime">50</span>) <span style="color: #a5a3a3">NOT</span> <span style="color: #a5a3a3">NULL</span>,
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #a5a3a3">ImagePath</span>] [<span style="color: #a5a3a3">nvarchar</span>](<span style="color: lime">300</span>) <span style="color: #a5a3a3">NULL</span>,
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #a5a3a3">Description</span>] [<span style="color: #a5a3a3">nvarchar</span>](<span style="color: lime">500</span>) <span style="color: #a5a3a3">NULL</span>
</p>
<p style="margin: 0px">
)
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
<span style="color: #a5a3a3">CREATE</span> <span style="color: #a5a3a3">TABLE</span> [<span style="color: #a5a3a3">dbo</span>].[<span style="color: #a5a3a3">RelatedProductsLookup</span>](
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #a5a3a3">ProductID</span>] [<span style="color: #23b4eb">char</span>](<span style="color: lime">32</span>) <span style="color: #a5a3a3">NOT</span> <span style="color: #a5a3a3">NULL</span>,
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #a5a3a3">RelatedProductID</span>] [<span style="color: #23b4eb">char</span>](<span style="color: lime">32</span>) <span style="color: #a5a3a3">NOT</span> <span style="color: #a5a3a3">NULL</span>
</p>
<p style="margin: 0px">
)
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
<span style="color: #a5a3a3">CREATE</span> <span style="color: #a5a3a3">TABLE</span> [<span style="color: #a5a3a3">dbo</span>].[<span style="color: #a5a3a3">ProductsProductGroupsLookup</span>](
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #a5a3a3">ProductGroupID</span>] [<span style="color: #23b4eb">char</span>](<span style="color: lime">32</span>) <span style="color: #a5a3a3">NULL</span>,
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #a5a3a3">ProductID</span>] [<span style="color: #23b4eb">char</span>](<span style="color: lime">32</span>) <span style="color: #a5a3a3">NULL</span>
</p>
<p style="margin: 0px">
)
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
<span style="color: #a5a3a3">CREATE</span> <span style="color: #a5a3a3">TABLE</span> [<span style="color: #a5a3a3">dbo</span>].[<span style="color: #a5a3a3">ProductGroups</span>](
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #a5a3a3">ProductGroupID</span>] [<span style="color: #23b4eb">char</span>](<span style="color: lime">32</span>) <span style="color: #a5a3a3">NOT</span> <span style="color: #a5a3a3">NULL</span>,
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #a5a3a3">Title</span>] [<span style="color: #a5a3a3">nvarchar</span>](<span style="color: lime">50</span>) <span style="color: #a5a3a3">NULL</span>
</p>
</div>
</div>


<p>
<!--end code--><br />
<strong>ActiveRecord Classes</strong><br />
In a traditional NHibernate application, we would write usually our mapping files at this time<a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/Using-NHibernate.aspx" target="_blank">(see my other NHibernate post</a> for more on that). Since we&#39;re using the ActiveRecord pattern, however, we can specify all our mappings inline with the classes. It is important to note that this would not be a pure domain because we&#39;re placing our mappings inside the model. Warning if you&#39;re sensitive to using Attributes this may not be the code for you&#8230;
</p>


<p>
Our classes will now begin with an ActiveRecord attribute over the class; our properties will begin with Property/HasAndBelongsToMany/etc. Please note, for the sake of the example, I&#39;m being extremely verbose with my attributes. If your table/column names match the class/property names, some of the additional info in the attribute is not necessary.
<br />
<!--code-->
</p>


<div class="code" style="width: 100%">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">ActiveRecord</span>(<span style="color: #a5a3a3">Table</span>=<span style="color: #80ff00">&quot;SimpleProducts&quot;</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">Product</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #2b91af">IList</span>&lt;<span style="color: #47b3d1">Product</span>&gt; <span style="color: #a5a3a3">_RelatedProducts</span>;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #2b91af">IList</span>&lt;<span style="color: #47b3d1">ProductGroup</span>&gt; <span style="color: #a5a3a3">_ProductGroups</span>;
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #a5a3a3">Product</span>()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_RelatedProducts</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">List</span>&lt;<span style="color: #47b3d1">Product</span>&gt;();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_ProductGroups</span> = <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">List</span>&lt;<span style="color: #47b3d1">ProductGroup</span>&gt;();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">PrimaryKey</span>(<span style="color: #a5a3a3">Column</span>=<span style="color: #80ff00">&quot;ProductID&quot;</span>, <span style="color: #a5a3a3">Generator</span>=<span style="color: #a5a3a3">Castle</span>.<span style="color: #a5a3a3">ActiveRecord</span>.<span style="color: #2b91af">PrimaryKeyType</span>.<span style="color: #a5a3a3">UuidHex</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">ID</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">private</span> <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">Property</span>(<span style="color: #a5a3a3">NotNull</span>=<span style="color: #23b4eb">true</span>, <span style="color: #a5a3a3">Length</span>=<span style="color: lime">50</span>, <span style="color: #a5a3a3">Column</span>=<span style="color: #80ff00">&quot;Title&quot;</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">Title</span> {<span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">Property</span>(<span style="color: #a5a3a3">Length</span>=<span style="color: lime">300</span>, <span style="color: #a5a3a3">NotNull</span>=<span style="color: #23b4eb">false</span>, <span style="color: #a5a3a3">Column</span>=<span style="color: #80ff00">&quot;ImagePath&quot;</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">ImagePath</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">Property</span>(<span style="color: #a5a3a3">NotNull</span> = <span style="color: #23b4eb">false</span>, <span style="color: #a5a3a3">Length</span> = <span style="color: lime">500</span>, <span style="color: #a5a3a3">Column</span>=<span style="color: #80ff00">&quot;Description&quot;</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">Description</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">HasAndBelongsToMany</span>(<span style="color: #a5a3a3">Table</span>=<span style="color: #80ff00">&quot;RelatedProductsLookup&quot;</span>, <span style="color: #a5a3a3">ColumnKey</span>=<span style="color: #80ff00">&quot;ProductID&quot;</span>, <span style="color: #a5a3a3">ColumnRef</span>=<span style="color: #80ff00">&quot;RelatedProductID&quot;</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #2b91af">IList</span>&lt;<span style="color: #47b3d1">Product</span>&gt; <span style="color: #a5a3a3">RelatedProducts</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">_RelatedProducts</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">set</span> { <span style="color: #a5a3a3">_RelatedProducts</span> = <span style="color: #23b4eb">value</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">HasAndBelongsToMany</span>(<span style="color: #a5a3a3">Table</span>=<span style="color: #80ff00">&quot;ProductsProductGroupsLookup&quot;</span>, <span style="color: #a5a3a3">ColumnKey</span>=<span style="color: #80ff00">&quot;ProductID&quot;</span>, <span style="color: #a5a3a3">ColumnRef</span>=<span style="color: #80ff00">&quot;ProductGroupID&quot;</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #2b91af">IList</span>&lt;<span style="color: #47b3d1">ProductGroup</span>&gt; <span style="color: #a5a3a3">ProductGroups</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">get</span> { <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">_ProductGroups</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">set</span> { <span style="color: #a5a3a3">_ProductGroups</span> = <span style="color: #23b4eb">value</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>
</div>


<br />


<!--code-->


<div class="code" style="width: 100%">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">ActiveRecord</span>(<span style="color: #a5a3a3">Table</span>=<span style="color: #80ff00">&quot;ProductGroups&quot;</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">ProductGroup</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">PrimaryKey</span>(<span style="color: #a5a3a3">Column</span>=<span style="color: #80ff00">&quot;ProductGroupID&quot;</span>, <span style="color: #a5a3a3">Generator</span>=<span style="color: #a5a3a3">Castle</span>.<span style="color: #a5a3a3">ActiveRecord</span>.<span style="color: #2b91af">PrimaryKeyType</span>.<span style="color: #a5a3a3">UuidHex</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">ProductGroupID</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">Property</span>(<span style="color: #a5a3a3">NotNull</span>=<span style="color: #23b4eb">true</span>, <span style="color: #a5a3a3">Length</span>=<span style="color: lime">50</span>, <span style="color: #a5a3a3">Column</span>=<span style="color: #80ff00">&quot;Title&quot;</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">Title</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #47b3d1">HasAndBelongsToMany</span>(<span style="color: #a5a3a3">Table</span>=<span style="color: #80ff00">&quot;ProductsProductGroupsLookup&quot;</span>, <span style="color: #a5a3a3">ColumnKey</span>=<span style="color: #80ff00">&quot;ProductGroupID&quot;</span>, <span style="color: #a5a3a3">ColumnRef</span>=<span style="color: #80ff00">&quot;ProductID&quot;</span>)]
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">virtual</span> <span style="color: #2b91af">IList</span>&lt;<span style="color: #47b3d1">Product</span>&gt; <span style="color: #a5a3a3">Products</span> { <span style="color: #23b4eb">get</span>; <span style="color: #23b4eb">set</span>; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>
</div>


<p>
<br />
<strong>Repository Object</strong><br />
Another added benefit of using the Castle Active Record library is that we can use the Repository&lt;T&gt; for all of our object persistence. Instead of creating our own implementation of IRepository, we can write code like this to save / retrieve / update objects.
</p>


<div class="code">
Selecting an object (our product IDs are HEX UUID&#39;s so this is not exactly accurate)
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
<span style="color: #23b4eb">var</span> <span style="color: #a5a3a3">p</span> = <span style="color: #47b3d1">Repository</span>&lt;<span style="color: #47b3d1">Product</span>&gt;.<span style="color: #a5a3a3">Get</span>(<span style="color: lime">23</span>);&nbsp;
</p>
</div>
</div>


<br />


<div class="code">
Saving / Updating <br />
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
<span style="color: #47b3d1">Repository</span>&lt;<span style="color: #47b3d1">Product</span>&gt;.<span style="color: #a5a3a3">Save</span>(<span style="color: #a5a3a3">p</span>);
</p>
</div>
</div>


<p>
<br />
The repository is pretty nice &#8211; we can save all of our objects outside of the domain, which makes for a much cleaner design. Next time, we&#39;ll be looking at the extremely simple MVC application powered by this model and NHibernate Query Generator. <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC-Part-4---The-MVC-Application.aspx" target="_blank">Continue to Part 4</a>
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RhinoCommons, NHibernate and ASP.NET MVC Part 2 - Configuration]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/05/20/rhinocommons-nhibernate-and-asp-net-mvc-part-2-configuration/"/>
    <updated>2008-05-20T22:23:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/05/20/rhinocommons-nhibernate-and-asp-net-mvc-part-2-configuration</id>
    <content type="html"><![CDATA[<p>
Following up on <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC.aspx" target="_blank">my last post</a>, we&#39;re going to setup a project and get everything ready for the code (we&#39;ll be doing the coding very soon &#8211; I promise).&nbsp; First off, create a new MVC application (make sure you&#39;re using the latest preview from codeplex) and a new Class library. From here, you&#39;d normally want to want to do some TDD to create your model but that&#39;s a little outside the scope of this example.
</p>


<p>
Add the references to Boo, Castle, NHibernate, RhinoCommons and Log4Net to the MVC application. In the class library, add Castle.ActiveRecord, Iesi.Collections, NHibernate, Rhino.Commons and Rhino.Commons.NHibernate. Switch over to your web.config file and Underneath the ConfigSections node add the following custom tags:
</p>


<!--code-->


<div class="code" style="width: 100%">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">section</span><span style="color: #88d0e8"> </span><span style="color: #cecece">name</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">activerecord</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> </span><span style="color: #cecece">type</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler, Castle.ActiveRecord</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">sectionGroup</span><span style="color: #88d0e8"> </span><span style="color: #cecece">name</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">applicationSettings</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> </span><span style="color: #cecece">type</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> &gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">section</span><span style="color: #88d0e8"> </span><span style="color: #cecece">name</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">Rhino.Commons.Properties.Settings</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> </span><span style="color: #cecece">type</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8">/&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</span><span style="color: lime">sectionGroup</span><span style="color: #88d0e8">&gt;&nbsp;&nbsp;&nbsp;  </span>
</p>
</div>
</div>


<p>
Next add the specific custom tag properties somewhere after the &lt;/ConfigSections&gt; :&nbsp;
</p>


<!--code-->


<div class="code" style="width: 100%">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">activerecord</span><span style="color: #88d0e8"> </span><span style="color: #cecece">isWeb</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">true</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">config</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">add</span><span style="color: #88d0e8"> </span><span style="color: #cecece">key</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">hibernate.connection.driver_class</span><span style="color: fuchsia">&quot;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  </span><span style="color: #cecece">value</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">NHibernate.Driver.SqlClientDriver</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">add</span><span style="color: #88d0e8"> </span><span style="color: #cecece">key</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">dialect</span><span style="color: fuchsia">&quot;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  </span><span style="color: #cecece">value</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">NHibernate.Dialect.MsSql2005Dialect</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">add</span><span style="color: #88d0e8"> </span><span style="color: #cecece">key</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">hibernate.connection.provider</span><span style="color: fuchsia">&quot;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  </span><span style="color: #cecece">value</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">NHibernate.Connection.DriverConnectionProvider</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">add</span><span style="color: #88d0e8"> </span><span style="color: #cecece">key</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">hibernate.show_sql</span><span style="color: fuchsia">&quot;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  </span><span style="color: #cecece">value</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">false</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">add</span><span style="color: #88d0e8"> </span><span style="color: #cecece">key</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">connection.connection_string</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> </span><span style="color: #cecece">value</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">Data Source=___________;Initial Catalog=NHibernateTest;Integrated Security=True</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> /&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</span><span style="color: lime">config</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &lt;/</span><span style="color: lime">activerecord</span><span style="color: #88d0e8">&gt;</span>
</p>
</div>
</div>


<!--end code-->


<p>These active record settings should be pretty straight-forward but for more information on specific dialects or other properties check out the <a href="http://using.castleproject.org/display/AR/Configuration+Reference" target="_blank">Castle&#39;s Configuration Reference</a>. Be sure to swap out my Data Source and Initial Catalog settings with yours.<br /></p>

<br />


<!--code-->


<div class="code" style="width: 100%">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">applicationSettings</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">Rhino.Commons.Properties.Settings</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">setting</span><span style="color: #88d0e8"> </span><span style="color: #cecece">name</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">WindsorConfig</span><span style="color: fuchsia">&quot;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  </span><span style="color: #cecece">serializeAs</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">String</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</span><span style="color: lime">value</span><span style="color: #88d0e8">&gt;</span><span style="color: #47b3d1">windsor.boo</span><span style="color: #88d0e8">&lt;/</span><span style="color: lime">value</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</span><span style="color: lime">setting</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</span><span style="color: lime">Rhino.Commons.Properties.Settings</span><span style="color: #88d0e8">&gt;</span>
</p>
<p style="margin: 0px">
<span style="color: #88d0e8">&nbsp;&nbsp;&nbsp; &lt;/</span><span style="color: lime">applicationSettings</span><span style="color: #88d0e8">&gt;</span>
</p>
</div>
</div>


<!--end code-->


<p>With this tag, we&#39;re telling Castle that we&#39;re going to configure Windsor with a boo file instead of an xml document. <a href="http://ayende.com/blog/" target="_blank">Ayende Rahien</a> pointed out in the comments that this tag is no longer necessary as long as the file is named windsor.boo</p>

<p>
<strong>Windsor Configuration With Boo</strong>&nbsp;
</p>


<p>
Up until this point, we&#39;ve been dealing with the web.config to configure our application &#8211; now we want to configure Windsor but instead of using another xml file, we&#39;re going to use a boo file. What is Boo you might ask? According to <a href="http://en.wikipedia.org/wiki/Boo_(programming_language)" target="_blank">wiki</a>&#8230;
</p>


<blockquote>
    Boo is an object oriented, statically typed programming language developed starting in 2003, which seeks to make use of the Common Language Infrastructure support for Unicode, internationalization and web style applications, while using a Python-inspired syntax and a special focus on language and compiler extensibility.&nbsp;
</blockquote>


<p>
The mere fact that you can use a programming language instead of an XML file to configure Windsor is pretty sweet. I would be lying if I claimed to know boo very well, however, the Exesto and Hibernating-Forums samples (from the Rhino-Tools project) have enough information to get you up and running. I plan on learning boo well enought to create my own config files from scratch but in the mean time, here&#39;s what my boo file looks like (heavily influenced by the sample applications mentioned above)&#8230;
</p>


<!--begin code-->


<div class="code" style="width: 100%">
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
import Rhino.Commons
</p>
<p style="margin: 0px">
import System.Reflection
</p>
<p style="margin: 0px">
import Castle.Core
</p>
<p style="margin: 0px">
import Castle.Services.Transaction
</p>
<p style="margin: 0px">
import Castle.Facilities.AutomaticTransactionManagement
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
activeRecordAssemblies = ( Assembly.Load(&quot;ProductModelActiveRecord&quot;), )
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
Component(&quot;active_record_repository&quot;, IRepository, ARRepository)
</p>
<p style="margin: 0px">
Component(&quot;active_record_unit_of_work&quot;,
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; IUnitOfWorkFactory,
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; ActiveRecordUnitOfWorkFactory,
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; assemblies: activeRecordAssemblies )
</p>
</div>
</div>


<p>
<!--end code-->Check out <a href="http://ayende.com/blog/" target="_blank">Ayende&#39;s</a> <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC-Part-2--.aspx#comment">comment </a>for a more succinct way to register these components.
As you might have noticed, I still have to set up the colors for boo files in Visual Studio :) What this file is doing is loading the assemblies and setting up the repository / unit of work (we&#39;ll see those in action in the next parts of this series). Your project configuration should be all set. Next time we will actually be writing some code so stick around for that. <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/RhinoCommons2c-NHibernate-and-ASPNET-MVC-Part-3-the-model.aspx">View Part Three - The Model</a>
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RhinoCommons, NHibernate and ASP.NET MVC Part 1 - Setup]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/05/19/rhinocommons-nhibernate-and-asp-net-mvc-part-1-setup/"/>
    <updated>2008-05-19T17:29:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/05/19/rhinocommons-nhibernate-and-asp-net-mvc-part-1-setup</id>
    <content type="html"><![CDATA[<p>
After my last post about the unit of work with NHibernate, <a href="http://www.lostechies.com/blogs/chad%5Fmyers/" target="_blank">Chad Myers</a> mentioned that I should take a look at Ayende&#39;s Rhino Commons (because the Unit of Work stuff is already being handled). Since I am not a big fan of reinventing the wheel I decided I would give it a shot. There&#39;s going to be another post in the near future about how to get Rhino Commons, Castle ActiveRecord and ASP.NET MVC working together but for now, it would be good to make sure all the necessary components are installed on your machine.
</p>


<ol>
    <li>Make sure you have a subversion client &#8211; <a href="http://tortoisesvn.tigris.org/" target="_blank">Tortoise SVN</a> or the command prompt is what I use but any subversion client should be fine. </li>
    <li>If you don&#39;t already have <a href="http://nant.sourceforge.net/" target="_blank">Nant</a> installed on your machine download and install that</li>
    <li>Download and build the following (<a href="http://www.ayende.com/blog" target="_blank">Ayende </a>mentions, the <a href="http://www.ayende.com/Blog/archive/2007/08/06/Running-on-the-trunk-Building-Rhino-Commons.aspx" target="_blank">trick is not opening in Visual Studio</a>):
    <ul>
        <li>Castle Project &#8211; (<a href="http://svn.castleproject.org:8080/svn/castle/trunk" target="_blank">http://svn.castleproject.org:8080/svn/castle/trunk</a>)</li>
        <li> NHibernate &#8211; (<a href="https://nhibernate.svn.sourceforge.net/svnroot/nhibernate/trunk" target="_blank">https://nhibernate.svn.sourceforge.net/svnroot/nhibernate/trunk</a>)</li>
        <li> Rhino-Tools (<a href="https://rhino-tools.svn.sourceforge.net/svnroot/rhino-tools/trunk" target="_blank">https://rhino-tools.svn.sourceforge.net/svnroot/rhino-tools/trunk</a>) </li>
    </ul>
    </li>
    <li>Next you&#39;re going to want to setup the NHibernate Query Generator (we&#39;re going to use Linq to NHibernate in a later example but for now get this installed). This should be a part of the Rhino-tools package but if you want you can <a href="http://www.ayende.com/projects/nhibernate-query-analyzer/downloads.aspx" target="_blank">download the binaries</a>. Then setup the application as an external tool in Visual Studio (my settings are posted below). <a href="http://jhollingworth.wordpress.com/2008/03/28/subsonic-like-nhibernate-query-generator-button-in-visual-studio/%20target=">see James Hollingworth&#39;s post for more info</a>
    <br />
    <img src="http://ryanlanciaux.github.com/ryanlanciaux.com/image.axd?picture=nhibernateqg.gif" alt="" />
    <ul>
        <li>Command: C:\program files\nhqg\NHQG.exe</li>
        <li>Arguments: /Lang:cs /InputFilePattern:$(BinDir)/ProductModelActiveRecord.dll /OutputDirectory:$(ProjectDir)/Queries /BaseNamespace:Queries</li>
        <li>Initial Directory: $(TargetDir)</li>
    </ul>
    </li>
    <li>Finally make sure you&#39;re running the preview 3 drop of the ASP.NET MVC Framework &#8211; you can <a href="http://www.codeplex.com/aspnet/Release/ProjectReleases.aspx?ReleaseId=12640" target="_blank">get that here from CodePlex</a> </li>
</ol>


<p>You should now have everything setup. It may be good to take a look at the Exesto application in the rhino-tools\SampleApplications directory to get an introduction to the Rhino-tools / binsor / castle settings that we&#39;ll be looking at later on. Finally, if you are not familiar with the ASP.NET MVC Framework take a look <a href="http://weblogs.asp.net/fredriknormen/archive/2008/04/17/asp-net-mvc-framework-pre-preview-3-a-step-by-step-guide-to-create-a-simple-web-app.aspx" target="_blank">Fredrik Normen&#39;s step by step guide</a>. In the next couple of days, I will be posting how to wire these tools together for quick web application development. Stay Tuned.<br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NHibernate Session Per Request]]></title>
    <link href="http://ryanlanciaux.github.com/blog/2008/05/11/nhibernate-session-per-request/"/>
    <updated>2008-05-11T23:47:00-04:00</updated>
    <id>http://ryanlanciaux.github.com/blog/2008/05/11/nhibernate-session-per-request</id>
    <content type="html"><![CDATA[<p>
A little earlier on, I had posted a simple example of <a href="http://svn2.assembla.com/svn/NHibernateTest/" target="_blank">NHibernate in an MVC application</a> as well as some <a href="http://ryanlanciaux.github.com/ryanlanciaux.com/post/NHibernate-in-an-ASPNET-MVC-application.aspx" target="_blank">initial questions</a> I had about NHibernate Session management. In response to my question, <a href="http://mhinze.com/" target="_blank">Matt Hinze</a> mentioned that the session should be transparent to the controller and posted some links to various articles explaining how to achieve this. I finally had a chance to play around with this type of session management and spent most of my time looking through <a href="http://devlicio.us/blogs/billy_mccafferty/" target="_blank">Billy McCafferty</a>&#39;s <a href="http://www.codeproject.com/KB/architecture/NHibernateBestPractices.aspx" target="_blank">NHibernate Best practices</a> on CodeProject. As I&#39;ve mentioned before, I&#39;m very new to NHibernate so some of the things I&#39;m doing may not be ideal.
</p>


<p>
<strong>HTTP Module</strong>
</p>


<p>
First off, I created an HTTP module; this is where the session will be opened and closed (by accessing the session manager class). You&#39;ll notice on the Init that event handlers have been added. I&#39;m using the same session manager class that I was using in my last example, however, now it&#39;s being initialized / closed here (rather than in each controller action).
</p>


<div class="code">
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Monaco;}}{\colortbl;??\red255\green255\blue255;\red27\green27\blue27;\red35\green180\blue235;\red71\green179\blue209;\red43\green145\blue175;\red165\green163\blue163;}??\fs18 \cf1\cb2\highlight2     \cf3 public\cf1  \cf3 class\cf1  \cf4 SessionModule\cf1  : \cf5 IHttpModule\par ??\cf1     \{\par ??        \cf3 private\cf1  \cf5 ISession\cf1  \cf6 _session\cf1 ;\par ??\par ??        \cf3 public\cf1  \cf3 void\cf1  \cf6 Init\cf1 (\cf4 HttpApplication\cf1  \cf6 context\cf1 )\par ??        \{\par ??            \cf6 context\cf1 .\cf6 BeginRequest\cf1  += \cf3 new\cf1  \cf5 EventHandler\cf1 (\cf6 BeginTransaction\cf1 );\par ??            \cf6 context\cf1 .\cf6 EndRequest\cf1  += \cf3 new\cf1  \cf5 EventHandler\cf1 (\cf6 CloseSession\cf1 );\par ??        \}\par ??\par ??        \cf3 private\cf1  \cf3 void\cf1  \cf6 BeginTransaction\cf1 (\cf3 object\cf1  \cf6 sender\cf1 , \cf4 EventArgs\cf1  \cf6 e\cf1 )\par ??        \{\par ??            \cf6 _session\cf1  = \cf4 SessionManager\cf1 .\cf6 GetCurrentSession\cf1 ();\par ??        \}\par ??\par ??        \cf3 private\cf1  \cf3 void\cf1  \cf6 CloseSession\cf1 (\cf3 object\cf1  \cf6 sender\cf1 , \cf4 EventArgs\cf1  \cf6 e\cf1 )\par ??        \{\par ??            \cf6 _session\cf1 .\cf6 Flush\cf1 ();\par ??            \cf6 _session\cf1 .\cf6 Close\cf1 ();\par ??        \}\par ??\par ??        \cf3 public\cf1  \cf3 void\cf1  \cf6 Dispose\cf1 ()\par ??        \{\par ??            \cf6 _session\cf1  = \cf3 null\cf1 ;\par ??        \}\par ??    \}}
-->
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">class</span> <span style="color: #47b3d1">SessionModule</span> : <span style="color: #2b91af">IHttpModule</span>
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #2b91af">ISession</span> <span style="color: #a5a3a3">_session</span>;
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">Init</span>(<span style="color: #47b3d1">HttpApplication</span> <span style="color: #a5a3a3">context</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">context</span>.<span style="color: #a5a3a3">BeginRequest</span> += <span style="color: #23b4eb">new</span> <span style="color: #2b91af">EventHandler</span>(<span style="color: #a5a3a3">OpenSession</span>);
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">context</span>.<span style="color: #a5a3a3">EndRequest</span> += <span style="color: #23b4eb">new</span> <span style="color: #2b91af">EventHandler</span>(<span style="color: #a5a3a3">CloseSession</span>);
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">OpenSession</span>(<span style="color: #23b4eb">object</span> <span style="color: #a5a3a3">sender</span>, <span style="color: #47b3d1">EventArgs</span> <span style="color: #a5a3a3">e</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_session</span> = <span style="color: #47b3d1">SessionManager</span>.<span style="color: #a5a3a3">GetCurrentSession</span>();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">private</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">CloseSession</span>(<span style="color: #23b4eb">object</span> <span style="color: #a5a3a3">sender</span>, <span style="color: #47b3d1">EventArgs</span> <span style="color: #a5a3a3">e</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_session</span>.<span style="color: #a5a3a3">Flush</span>();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_session</span>.<span style="color: #a5a3a3">Close</span>();
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #23b4eb">void</span> <span style="color: #a5a3a3">Dispose</span>()
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #a5a3a3">_session</span> = <span style="color: #23b4eb">null</span>;
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }
</p>
<p style="margin: 0px">
&nbsp;&nbsp;&nbsp; }
</p>
</div>
</div>


<p>
<br />
Next, I added this class to the HttpModules section of the web.config
</p>


<div class="code">
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Monaco;}}{\colortbl;??\red136\green208\blue232;\red27\green27\blue27;\red0\green255\blue0;\red206\green206\blue206;\red255\green0\blue255;}??\fs18 \cf1\cb2\highlight2 &lt;\cf3 add\cf1  \cf4 name\cf1 =\cf5 "\cf4 SessionModule\cf5 "\cf1  \cf4 type\cf1 =\cf5 "\cf4 ProductModel.Session.SessionModule\cf5 "\cf1 /&gt;}
-->
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
<span style="color: #88d0e8">&lt;</span><span style="color: lime">add</span><span style="color: #88d0e8"> </span><span style="color: #cecece">name</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">SessionModule</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8"> </span><span style="color: #cecece">type</span><span style="color: #88d0e8">=</span><span style="color: fuchsia">&quot;</span><span style="color: #cecece">ProductModel.Session.SessionModule</span><span style="color: fuchsia">&quot;</span><span style="color: #88d0e8">/&gt;</span>
</p>
</div>
</div>


<p>
<strong>Controller Code</strong>
</p>


<p>
Finally, since the NHibernate Session is being created / closed in the HTTP Module, I no longer have to use the <em>using</em> statement in every controller. Instead, I&#39;m just setting a ISession = to the SessionManagers Current session.
</p>


<div class="code">
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Monaco;}}{\colortbl;??\red255\green255\blue255;\red27\green27\blue27;\red35\green180\blue235;\red71\green179\blue209;\red165\green163\blue163;\red43\green145\blue175;\red128\green255\blue0;}??\fs18 \cf1\cb2\highlight2         \cf3 public\cf1  \cf4 ActionResult\cf1  \cf5 AddProduct\cf1 (\cf3 string\cf1  \cf5 ID\cf1 )\par ??        \{\par ??            \cf6 ISession\cf1  \cf5 session\cf1  = \cf4 SessionManager\cf1 .\cf5 GetCurrentSession\cf1 ();\par ??            \cf3 return\cf1  \cf5 RenderView\cf1 (\cf7 "AddProduct"\cf1 ,\par ??                \cf3 new\cf1  \cf4 SimpleProductRepository\cf1 (\cf5 session\cf1 ).\cf5 List\cf1 ());\par ??        \}}
-->
<div style="background: #1b1b1b none repeat scroll 0% 50%; font-family: Monaco; font-size: 9pt; color: white; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">
<p style="margin: 0px">
&nbsp;&nbsp; <span style="color: #23b4eb">public</span> <span style="color: #47b3d1">ActionResult</span> <span style="color: #a5a3a3">AddProduct</span>(<span style="color: #23b4eb">string</span> <span style="color: #a5a3a3">ID</span>)
</p>
<p style="margin: 0px">
&nbsp;&nbsp; {
</p>
<p style="margin: 0px">
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af">ISession</span> <span style="color: #a5a3a3">session</span> = <span style="color: #47b3d1">SessionManager</span>.<span style="color: #a5a3a3">GetCurrentSession</span>();
</p>
<p style="margin: 0px">
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">return</span> <span style="color: #a5a3a3">RenderView</span>(<span style="color: #80ff00">&quot;AddProduct&quot;</span>,
</p>
<p style="margin: 0px">
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #23b4eb">new</span> <span style="color: #47b3d1">SimpleProductRepository</span>(<span style="color: #a5a3a3">session</span>).<span style="color: #a5a3a3">List</span>());
</p>
<p style="margin: 0px">
&nbsp;&nbsp; }
</p>
</div>
</div>


<p>
<strong>Wrapping Up</strong>
</p>


<p>
There&#39;s still a bit more I want to explore with this method of Session Management (maybe transactions). Also I would be interested to test out the threading / performance implications of going this route. I&#39;ve updated the code on my assembla site. If you&#39;re interested, you can check it out here <a href="http://svn2.assembla.com/svn/NHibernateTest/" target="_blank">http://svn2.assembla.com/svn/NHibernateTest/</a> (keep in mind it&#39;s demo code &#8211; not anything remotely resembling anything I would use in production). I would really appreciate any suggestions / feedback that you may have!
</p>



]]></content>
  </entry>
  
</feed>
